int choosing[2] = {0,0};
int number[3] = {0,0,0};

proctype P0 {
int j;
int max;
int tmp;
int tmp2;
P0_NCS:		store(choosing[0],1);
		j = 0;
		max = 0;
		goto P0_CHOOSE;
P0_CHOOSE:		if
		:: j < 2 ->
			goto P0_CHOOSE2;
		:: j == 2 && max < 9 ->
			store(number[0], max+1);
			j = 0;
			store(choosing[0], 0);
			goto P0_FORLOOP;
		fi;
P0_CHOOSE2:	tmp = loadval(number[j]);
		if
		:: tmp > max ->
			tmp = loadval(number[j]);
			max = tmp;
			j = j + 1;
			goto P0_CHOOSE;
		:: tmp <= max ->
			j = j + 1;
			goto P0_CHOOSE;
		fi;
P0_FORLOOP:	do
		:: true ->
			if
			:: j < 2 ->
				tmp = loadval(choosing[j]);
				if
				:: tmp == 0 ->
					goto P0_WAIT;
				:: tmp != 0 ->
					skip;
				fi;
			:: j == 2 ->
				goto P0_CS;
			fi;
		od;
P0_WAIT:	do
		:: true ->
			tmp = loadval(number[j]);
			tmp2 = loadval(number[0]);
			if
			:: tmp == 0 || (tmp > tmp2) || (tmp == tmp2 && 0 <= j) ->
				j = j + 1;
				goto P0_FORLOOP;
			:: !(tmp == 0 || (tmp > tmp2) || (tmp == tmp2 && 0 <= j)) ->
				skip;
			fi;
		od;
P0_CS:		number[0] = 0;
		goto P0_NCS;
}

proctype P1 {
int j;
int max;
int tmp;
int tmp2;
P1_NCS:		store(choosing[1],1);
		j = 0;
		max = 0;
		goto P1_CHOOSE;
P1_CHOOSE:		if
		:: j < 2 ->
			goto P1_CHOOSE2;
		:: j == 2 && max < 9 ->
			store(number[1], max+1);
			j = 0;
			store(choosing[1], 0);
			goto P1_FORLOOP;
		fi;
P1_CHOOSE2:	tmp = loadval(number[j]);
		if
		:: tmp > max ->
			tmp = loadval(number[j]);
			max = tmp;
			j = j + 1;
			goto P1_CHOOSE;
		:: tmp <= max ->
			j = j + 1;
			goto P1_CHOOSE;
		fi;
P1_FORLOOP:	do
		:: true ->
			if
			:: j < 2 ->
				tmp = loadval(choosing[j]);
				if
				:: tmp == 0 ->
					goto P1_WAIT;
				:: tmp != 0 ->
					skip;
				fi;
			:: j == 2 ->
				goto P1_CS;
			fi;
		od;
P1_WAIT:	do
		:: true ->
			tmp = loadval(number[j]);
			tmp2 = loadval(number[1]);
			if
			:: tmp == 0 || (tmp > tmp2) || (tmp == tmp2 && 1 <= j) ->
				j = j + 1;
				goto P1_FORLOOP;
			:: !(tmp == 0 || (tmp > tmp2) || (tmp == tmp2 && 1 <= j)) ->
				skip;
			fi;
		od;
P1_CS:		number[1] = 0;
		goto P1_NCS;
}
