package GeneratedCode;

import java.util.ArrayList;
import GenericCode.SharedVariable;
import GenericCode.SharedVariableList;

import GenericCode.Assignment;
import GenericCode.Class;
public class Assignment_[%= transition.name%] extends Assignment{
	public [%= stateMachine.name%] sm;
	public Assignment_[%= transition.name%](Class slcoClass, SharedVariableList sharedVariables, [%= stateMachine.name%] sm) {
		super(slcoClass, sharedVariables);
		this.sm = sm;
		// TODO Auto-generated constructor stub
	}
	@Override
	public void assign() {
		// TODO Auto-generated method stub
			[%=generateAssignmentStatement(statement, class, stateMachine)%]
	}
}
[* Generate the Assignment*]
[%operation generateAssignmentStatement(statement : slco::Statement, class : slco::Class, stateMachine : slco::StateMachine) : String{%]
[%var returnValue : String;%]
[* the type of expression in "Assignment" is "VariableExpression"*]
[%if(statement.expression.isTypeOf(VariableExpression)){%][% returnValue = generateExpression(statement.expression, class, stateMachine);%]
[%}%]
[* the type of expression in "Assignment" is "BinaryOperatorExpression"*]
[%else if(statement.expression.isTypeOf(BinaryOperatorExpression)){%][%returnValue = ("("+generateExpression(statement.expression.operand1, class, stateMachine) + generateOperator(statement.expression) + generateExpression(statement.expression.operand2, class, stateMachine)+")");%]
[%}%]
[* the type of expression in "Assignment" is "ConstantExpression"*]
[%else {%][% returnValue = statement.expression.value;%]
[%}%]
[% if (class.variables.exists(v|v.name = statement.variable.name)){%]
[%returnValue = (("slcoClass.getSharedVariableName(" + '"'+ statement.variable.name +'"'+").setValue(").toString + returnValue + ");");%]
[%}%]
[%else{%]
[%returnValue = ("sm." + statement.variable.name+"="+returnValue+";");%]
[%}%]
[% return returnValue;%]
[%}%]
[* Generate the right of "Assignment": BinaryOperatorExpression*]
[%operation generateExpression(expression : slco::Expression, class : slco::Class, stateMachine : slco::StateMachine) : String{%]
[%var returnValue : String;%]
[%if(expression.isTypeOf(IntegerConstantExpression) or expression.isTypeOf(BooleanConstantExpression)){%][% returnValue = (expression.value).toString();%][%}%]
[%else if(expression.isTypeOf(StringConstantExpression)){%][%returnValue = ('"'+(expression.value).toString()+'"');%][%}%]
[%else if(expression.isTypeOf(VariableExpression)){%][%returnValue = generateVariableExpression(expression.variable, class, stateMachine);%][%}%]
[%else if(expression.isTypeOf(BinaryOperatorExpression)){returnValue = "("+generateExpression(expression.operand1, class, stateMachine) + generateOperator(expression) + generateExpression(expression.operand2, class, stateMachine)+")";%][%}%]
[% return returnValue;%]
[%}%]
[* Generate the right of "Assignment": VariableExpression*]
[%operation generateVariableExpression(variable : slco::Variable, class : slco::Class, stateMachine : slco::StateMachine) : String{%]
[%var returnValue : String;%]
[* class variables*]
[%if (class.variables.exists(v|v.name = variable.name)){%]
[%returnValue = ("("+generateVariableExpressionType(variable)+")slcoClass.getSharedVariableName(" + '"'+ variable.name +'"'+").getValue()").toString;%]
[%}%]
[%else{%][%returnValue = ("sm."+variable.name).toString;%][%}%]
[% return returnValue;%]
[%}%]
[%operation generateVariableExpressionType(variable : slco::Variable) : String{%]
[%var returnValue : String;%]
[%if (variable.type = PrimitiveTypeEnum#Integer){%][% returnValue = "Integer";%][%}%]
[%else if (variable.type = PrimitiveTypeEnum#Boolean){%][% returnValue = "boolean";%][%}%]
[%else if (variable.type = PrimitiveTypeEnum#String){%][%returnValue = "String";%][%}%]
[% return returnValue;%]
[%}%]
[* generate Operator*]
[%operation generateOperator(expression : slco::Expression){%]
[%var returnValue : String;%]
[%if (expression.operator = slco::OperatorEnum#atLeast){returnValue= ">=";}%]
[%else if (expression.operator = slco::OperatorEnum#atMost){returnValue= "<=";}%]
[%else if (expression.operator = slco::OperatorEnum#differs){returnValue= "!=";}%]
[%else if (expression.operator = slco::OperatorEnum#equals){returnValue= "==";}%]
[%else if (expression.operator = slco::OperatorEnum#subtract){returnValue= "-";}%]
[%else if (expression.operator = slco::OperatorEnum#add){returnValue= "+";}%]
[%else if (expression.operator = slco::OperatorEnum#`and`){returnValue= "&&";}%]
[%else if (expression.operator = slco::OperatorEnum#`or`){returnValue= "||";}%]
[% return returnValue;%]
[%}%]