package GeneratedCode;

import java.util.ArrayList;
import GenericCode.SharedVariable;
import GenericCode.Class;
import GenericCode.SignalMessage;
import GenericCode.SendSignal;
import GenericCode.SharedVariableList;

public class SendSignal_[%= transition.name%] extends SendSignal{
	public [%= stateMachine.name%] sm;
	public SendSignal_[%= transition.name%](Class slcoClass, SharedVariableList sharedVariables, [%= stateMachine.name%] sm) {
		super(slcoClass, sharedVariables);
		this.sm = sm;
		// TODO Auto-generated constructor stub
	}
	@Override
	public boolean send(boolean isNonDeterministicTransition) {
		// TODO Auto-generated method stub
        [%var argumentLists : String;%]
        [%for(expression in statement.arguments){%]
        [%if(expression = statement.arguments.first()){%]
        [%argumentLists = argumentLists + generateExpression(expression, class, stateMachine);%]
        [%}%]
        [%else {%]
        [%argumentLists = argumentLists + "," + generateExpression(expression, class, stateMachine);%]
        [%}%]
        [%}%]  
        SignalMessage signal = new SignalMessage([%='"'+statement.signalName+'"'%],new Object[]{[%=argumentLists%]});
        return slcoClass.getPortName("port_[%=statement.port.name%]").channel.put(signal, isNonDeterministicTransition);
	}
}
[* Generate the right of "Assignment": BinaryOperatorExpression*]
[%operation generateExpression(expression : slco::Expression, class : slco::Class, stateMachine : slco::StateMachine) : String{%]
[%var returnValue : String;%]
[%if(expression.isTypeOf(IntegerConstantExpression) or expression.isTypeOf(BooleanConstantExpression)){%][% returnValue = (expression.value).toString();%][%}%]
[%else if(expression.isTypeOf(StringConstantExpression)){%][%returnValue = ('"'+(expression.value).toString()+'"');%][%}%]
[%else if(expression.isTypeOf(VariableExpression)){%][%returnValue = generateVariableExpression(expression.variable, class, stateMachine);%][%}%]
[%else if(expression.isTypeOf(BinaryOperatorExpression)){returnValue = "("+generateExpression(expression.operand1, class, stateMachine) + generateOperator(expression) + generateExpression(expression.operand2, class, stateMachine)+")";%][%}%]
[% return returnValue;%]
[%}%]
[* Generate the right of "Assignment": VariableExpression*]
[%operation generateVariableExpression(variable : slco::Variable, class : slco::Class, stateMachine : slco::StateMachine) : String{%]
[%var returnValue : String;%]
[* class variables*]
[%if (class.variables.exists(v|v.name = variable.name)){%]
[%returnValue = ("slcoClass.getSharedVariableName(" + '"'+ variable.name +'"'+").getValue()").toString;%]
[%}%]
[%else{%][%returnValue = ("sm."+variable.name).toString;%][%}%]
[% return returnValue;%]
[%}%]
[* generate Operator*]
[%operation generateOperator(expression : slco::Expression){%]
[%var returnValue : String;%]
[%if (expression.operator = slco::OperatorEnum#atLeast){returnValue= ">=";}%]
[%else if (expression.operator = slco::OperatorEnum#atMost){returnValue= "<=";}%]
[%else if (expression.operator = slco::OperatorEnum#differs){returnValue= "!=";}%]
[%else if (expression.operator = slco::OperatorEnum#equals){returnValue= "==";}%]
[%else if (expression.operator = slco::OperatorEnum#subtract){returnValue= "-";}%]
[%else if (expression.operator = slco::OperatorEnum#add){returnValue= "+";}%]
[%else if (expression.operator = slco::OperatorEnum#`and`){returnValue= "&&";}%]
[%else if (expression.operator = slco::OperatorEnum#`or`){returnValue= "||";}%]
[% return returnValue;%]
[%}%]