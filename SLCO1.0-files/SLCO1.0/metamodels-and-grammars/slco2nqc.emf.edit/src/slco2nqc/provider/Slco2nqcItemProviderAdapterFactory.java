/**
 */
package slco2nqc.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import slco2nqc.util.Slco2nqcAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Slco2nqcItemProviderAdapterFactory extends Slco2nqcAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Slco2nqcItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link slco2nqc.Signal2MotorList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Signal2MotorListItemProvider signal2MotorListItemProvider;

	/**
	 * This creates an adapter for a {@link slco2nqc.Signal2MotorList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignal2MotorListAdapter() {
		if (signal2MotorListItemProvider == null) {
			signal2MotorListItemProvider = new Signal2MotorListItemProvider(this);
		}

		return signal2MotorListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link slco2nqc.Signal2SensorList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Signal2SensorListItemProvider signal2SensorListItemProvider;

	/**
	 * This creates an adapter for a {@link slco2nqc.Signal2SensorList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignal2SensorListAdapter() {
		if (signal2SensorListItemProvider == null) {
			signal2SensorListItemProvider = new Signal2SensorListItemProvider(this);
		}

		return signal2SensorListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link slco2nqc.MotorInitList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MotorInitListItemProvider motorInitListItemProvider;

	/**
	 * This creates an adapter for a {@link slco2nqc.MotorInitList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMotorInitListAdapter() {
		if (motorInitListItemProvider == null) {
			motorInitListItemProvider = new MotorInitListItemProvider(this);
		}

		return motorInitListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link slco2nqc.MotorInit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MotorInitItemProvider motorInitItemProvider;

	/**
	 * This creates an adapter for a {@link slco2nqc.MotorInit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMotorInitAdapter() {
		if (motorInitItemProvider == null) {
			motorInitItemProvider = new MotorInitItemProvider(this);
		}

		return motorInitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link slco2nqc.ClassList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassListItemProvider classListItemProvider;

	/**
	 * This creates an adapter for a {@link slco2nqc.ClassList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassListAdapter() {
		if (classListItemProvider == null) {
			classListItemProvider = new ClassListItemProvider(this);
		}

		return classListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link slco2nqc.Signal2Motor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Signal2MotorItemProvider signal2MotorItemProvider;

	/**
	 * This creates an adapter for a {@link slco2nqc.Signal2Motor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignal2MotorAdapter() {
		if (signal2MotorItemProvider == null) {
			signal2MotorItemProvider = new Signal2MotorItemProvider(this);
		}

		return signal2MotorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link slco2nqc.Signal2MotorWithDirection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Signal2MotorWithDirectionItemProvider signal2MotorWithDirectionItemProvider;

	/**
	 * This creates an adapter for a {@link slco2nqc.Signal2MotorWithDirection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignal2MotorWithDirectionAdapter() {
		if (signal2MotorWithDirectionItemProvider == null) {
			signal2MotorWithDirectionItemProvider = new Signal2MotorWithDirectionItemProvider(this);
		}

		return signal2MotorWithDirectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link slco2nqc.Signal2Sensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Signal2SensorItemProvider signal2SensorItemProvider;

	/**
	 * This creates an adapter for a {@link slco2nqc.Signal2Sensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignal2SensorAdapter() {
		if (signal2SensorItemProvider == null) {
			signal2SensorItemProvider = new Signal2SensorItemProvider(this);
		}

		return signal2SensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link slco2nqc.Slco2Nqc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Slco2NqcItemProvider slco2NqcItemProvider;

	/**
	 * This creates an adapter for a {@link slco2nqc.Slco2Nqc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSlco2NqcAdapter() {
		if (slco2NqcItemProvider == null) {
			slco2NqcItemProvider = new Slco2NqcItemProvider(this);
		}

		return slco2NqcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link slco2nqc.SensorInitList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorInitListItemProvider sensorInitListItemProvider;

	/**
	 * This creates an adapter for a {@link slco2nqc.SensorInitList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorInitListAdapter() {
		if (sensorInitListItemProvider == null) {
			sensorInitListItemProvider = new SensorInitListItemProvider(this);
		}

		return sensorInitListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link slco2nqc.SensorInit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorInitItemProvider sensorInitItemProvider;

	/**
	 * This creates an adapter for a {@link slco2nqc.SensorInit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorInitAdapter() {
		if (sensorInitItemProvider == null) {
			sensorInitItemProvider = new SensorInitItemProvider(this);
		}

		return sensorInitItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (signal2MotorListItemProvider != null) signal2MotorListItemProvider.dispose();
		if (signal2SensorListItemProvider != null) signal2SensorListItemProvider.dispose();
		if (motorInitListItemProvider != null) motorInitListItemProvider.dispose();
		if (motorInitItemProvider != null) motorInitItemProvider.dispose();
		if (classListItemProvider != null) classListItemProvider.dispose();
		if (signal2MotorItemProvider != null) signal2MotorItemProvider.dispose();
		if (signal2MotorWithDirectionItemProvider != null) signal2MotorWithDirectionItemProvider.dispose();
		if (signal2SensorItemProvider != null) signal2SensorItemProvider.dispose();
		if (slco2NqcItemProvider != null) slco2NqcItemProvider.dispose();
		if (sensorInitListItemProvider != null) sensorInitListItemProvider.dispose();
		if (sensorInitItemProvider != null) sensorInitItemProvider.dispose();
	}

}
