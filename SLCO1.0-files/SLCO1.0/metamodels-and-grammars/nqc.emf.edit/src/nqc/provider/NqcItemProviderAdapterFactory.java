/**
 */
package nqc.provider;

import java.util.ArrayList;
import java.util.Collection;

import nqc.util.NqcAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class NqcItemProviderAdapterFactory extends NqcAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NqcItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.AcquireConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcquireConstantItemProvider acquireConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.AcquireConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcquireConstantAdapter() {
		if (acquireConstantItemProvider == null) {
			acquireConstantItemProvider = new AcquireConstantItemProvider(this);
		}

		return acquireConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.AcquireStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcquireStatementItemProvider acquireStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.AcquireStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcquireStatementAdapter() {
		if (acquireStatementItemProvider == null) {
			acquireStatementItemProvider = new AcquireStatementItemProvider(this);
		}

		return acquireStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.ArrayExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayExpressionItemProvider arrayExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.ArrayExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayExpressionAdapter() {
		if (arrayExpressionItemProvider == null) {
			arrayExpressionItemProvider = new ArrayExpressionItemProvider(this);
		}

		return arrayExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.AssignmentStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignmentStatementItemProvider assignmentStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.AssignmentStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssignmentStatementAdapter() {
		if (assignmentStatementItemProvider == null) {
			assignmentStatementItemProvider = new AssignmentStatementItemProvider(this);
		}

		return assignmentStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.BinaryExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryExpressionItemProvider binaryExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.BinaryExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryExpressionAdapter() {
		if (binaryExpressionItemProvider == null) {
			binaryExpressionItemProvider = new BinaryExpressionItemProvider(this);
		}

		return binaryExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.BinaryBuiltInFunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryBuiltInFunctionCallItemProvider binaryBuiltInFunctionCallItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.BinaryBuiltInFunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryBuiltInFunctionCallAdapter() {
		if (binaryBuiltInFunctionCallItemProvider == null) {
			binaryBuiltInFunctionCallItemProvider = new BinaryBuiltInFunctionCallItemProvider(this);
		}

		return binaryBuiltInFunctionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.BinaryBuiltInValueFunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryBuiltInValueFunctionCallItemProvider binaryBuiltInValueFunctionCallItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.BinaryBuiltInValueFunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryBuiltInValueFunctionCallAdapter() {
		if (binaryBuiltInValueFunctionCallItemProvider == null) {
			binaryBuiltInValueFunctionCallItemProvider = new BinaryBuiltInValueFunctionCallItemProvider(this);
		}

		return binaryBuiltInValueFunctionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.BlockStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockStatementItemProvider blockStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.BlockStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockStatementAdapter() {
		if (blockStatementItemProvider == null) {
			blockStatementItemProvider = new BlockStatementItemProvider(this);
		}

		return blockStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.BooleanConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanConstantItemProvider booleanConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.BooleanConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanConstantAdapter() {
		if (booleanConstantItemProvider == null) {
			booleanConstantItemProvider = new BooleanConstantItemProvider(this);
		}

		return booleanConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.BreakStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BreakStatementItemProvider breakStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.BreakStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBreakStatementAdapter() {
		if (breakStatementItemProvider == null) {
			breakStatementItemProvider = new BreakStatementItemProvider(this);
		}

		return breakStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.Case} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CaseItemProvider caseItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.Case}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCaseAdapter() {
		if (caseItemProvider == null) {
			caseItemProvider = new CaseItemProvider(this);
		}

		return caseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.ContinueStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContinueStatementItemProvider continueStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.ContinueStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContinueStatementAdapter() {
		if (continueStatementItemProvider == null) {
			continueStatementItemProvider = new ContinueStatementItemProvider(this);
		}

		return continueStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.DirectionConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DirectionConstantItemProvider directionConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.DirectionConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDirectionConstantAdapter() {
		if (directionConstantItemProvider == null) {
			directionConstantItemProvider = new DirectionConstantItemProvider(this);
		}

		return directionConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.DisplayModeConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisplayModeConstantItemProvider displayModeConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.DisplayModeConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplayModeConstantAdapter() {
		if (displayModeConstantItemProvider == null) {
			displayModeConstantItemProvider = new DisplayModeConstantItemProvider(this);
		}

		return displayModeConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.DoWhileStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoWhileStatementItemProvider doWhileStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.DoWhileStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoWhileStatementAdapter() {
		if (doWhileStatementItemProvider == null) {
			doWhileStatementItemProvider = new DoWhileStatementItemProvider(this);
		}

		return doWhileStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.EmptyStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmptyStatementItemProvider emptyStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.EmptyStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmptyStatementAdapter() {
		if (emptyStatementItemProvider == null) {
			emptyStatementItemProvider = new EmptyStatementItemProvider(this);
		}

		return emptyStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.EventTypeConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventTypeConstantItemProvider eventTypeConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.EventTypeConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventTypeConstantAdapter() {
		if (eventTypeConstantItemProvider == null) {
			eventTypeConstantItemProvider = new EventTypeConstantItemProvider(this);
		}

		return eventTypeConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionItemProvider functionItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionAdapter() {
		if (functionItemProvider == null) {
			functionItemProvider = new FunctionItemProvider(this);
		}

		return functionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.FunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionCallItemProvider functionCallItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.FunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionCallAdapter() {
		if (functionCallItemProvider == null) {
			functionCallItemProvider = new FunctionCallItemProvider(this);
		}

		return functionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.ForStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForStatementItemProvider forStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.ForStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForStatementAdapter() {
		if (forStatementItemProvider == null) {
			forStatementItemProvider = new ForStatementItemProvider(this);
		}

		return forStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.GoToStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoToStatementItemProvider goToStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.GoToStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoToStatementAdapter() {
		if (goToStatementItemProvider == null) {
			goToStatementItemProvider = new GoToStatementItemProvider(this);
		}

		return goToStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.IfStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfStatementItemProvider ifStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.IfStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIfStatementAdapter() {
		if (ifStatementItemProvider == null) {
			ifStatementItemProvider = new IfStatementItemProvider(this);
		}

		return ifStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.IntegerConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerConstantItemProvider integerConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.IntegerConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerConstantAdapter() {
		if (integerConstantItemProvider == null) {
			integerConstantItemProvider = new IntegerConstantItemProvider(this);
		}

		return integerConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.Label} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabelItemProvider labelItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.Label}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabelAdapter() {
		if (labelItemProvider == null) {
			labelItemProvider = new LabelItemProvider(this);
		}

		return labelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.MonitorHandler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MonitorHandlerItemProvider monitorHandlerItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.MonitorHandler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMonitorHandlerAdapter() {
		if (monitorHandlerItemProvider == null) {
			monitorHandlerItemProvider = new MonitorHandlerItemProvider(this);
		}

		return monitorHandlerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.MonitorStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MonitorStatementItemProvider monitorStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.MonitorStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMonitorStatementAdapter() {
		if (monitorStatementItemProvider == null) {
			monitorStatementItemProvider = new MonitorStatementItemProvider(this);
		}

		return monitorStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.NullaryBuiltInFunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NullaryBuiltInFunctionCallItemProvider nullaryBuiltInFunctionCallItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.NullaryBuiltInFunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNullaryBuiltInFunctionCallAdapter() {
		if (nullaryBuiltInFunctionCallItemProvider == null) {
			nullaryBuiltInFunctionCallItemProvider = new NullaryBuiltInFunctionCallItemProvider(this);
		}

		return nullaryBuiltInFunctionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.NullaryBuiltInValueFunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NullaryBuiltInValueFunctionCallItemProvider nullaryBuiltInValueFunctionCallItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.NullaryBuiltInValueFunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNullaryBuiltInValueFunctionCallAdapter() {
		if (nullaryBuiltInValueFunctionCallItemProvider == null) {
			nullaryBuiltInValueFunctionCallItemProvider = new NullaryBuiltInValueFunctionCallItemProvider(this);
		}

		return nullaryBuiltInValueFunctionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.OutputModeConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputModeConstantItemProvider outputModeConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.OutputModeConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputModeConstantAdapter() {
		if (outputModeConstantItemProvider == null) {
			outputModeConstantItemProvider = new OutputModeConstantItemProvider(this);
		}

		return outputModeConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.OutputPortNameConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputPortNameConstantItemProvider outputPortNameConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.OutputPortNameConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputPortNameConstantAdapter() {
		if (outputPortNameConstantItemProvider == null) {
			outputPortNameConstantItemProvider = new OutputPortNameConstantItemProvider(this);
		}

		return outputPortNameConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.Program} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgramItemProvider programItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.Program}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgramAdapter() {
		if (programItemProvider == null) {
			programItemProvider = new ProgramItemProvider(this);
		}

		return programItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.Programs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgramsItemProvider programsItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.Programs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgramsAdapter() {
		if (programsItemProvider == null) {
			programsItemProvider = new ProgramsItemProvider(this);
		}

		return programsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.QuaternaryBuiltInFunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuaternaryBuiltInFunctionCallItemProvider quaternaryBuiltInFunctionCallItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.QuaternaryBuiltInFunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuaternaryBuiltInFunctionCallAdapter() {
		if (quaternaryBuiltInFunctionCallItemProvider == null) {
			quaternaryBuiltInFunctionCallItemProvider = new QuaternaryBuiltInFunctionCallItemProvider(this);
		}

		return quaternaryBuiltInFunctionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.RepeatStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepeatStatementItemProvider repeatStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.RepeatStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepeatStatementAdapter() {
		if (repeatStatementItemProvider == null) {
			repeatStatementItemProvider = new RepeatStatementItemProvider(this);
		}

		return repeatStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.ReturnStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReturnStatementItemProvider returnStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.ReturnStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReturnStatementAdapter() {
		if (returnStatementItemProvider == null) {
			returnStatementItemProvider = new ReturnStatementItemProvider(this);
		}

		return returnStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.SenaryBuiltInFunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SenaryBuiltInFunctionCallItemProvider senaryBuiltInFunctionCallItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.SenaryBuiltInFunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSenaryBuiltInFunctionCallAdapter() {
		if (senaryBuiltInFunctionCallItemProvider == null) {
			senaryBuiltInFunctionCallItemProvider = new SenaryBuiltInFunctionCallItemProvider(this);
		}

		return senaryBuiltInFunctionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.SensorConfigConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorConfigConstantItemProvider sensorConfigConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.SensorConfigConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorConfigConstantAdapter() {
		if (sensorConfigConstantItemProvider == null) {
			sensorConfigConstantItemProvider = new SensorConfigConstantItemProvider(this);
		}

		return sensorConfigConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.SensorModeConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorModeConstantItemProvider sensorModeConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.SensorModeConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorModeConstantAdapter() {
		if (sensorModeConstantItemProvider == null) {
			sensorModeConstantItemProvider = new SensorModeConstantItemProvider(this);
		}

		return sensorModeConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.SensorNameConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorNameConstantItemProvider sensorNameConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.SensorNameConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorNameConstantAdapter() {
		if (sensorNameConstantItemProvider == null) {
			sensorNameConstantItemProvider = new SensorNameConstantItemProvider(this);
		}

		return sensorNameConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.SensorTypeConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorTypeConstantItemProvider sensorTypeConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.SensorTypeConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorTypeConstantAdapter() {
		if (sensorTypeConstantItemProvider == null) {
			sensorTypeConstantItemProvider = new SensorTypeConstantItemProvider(this);
		}

		return sensorTypeConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.SerialBaudConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SerialBaudConstantItemProvider serialBaudConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.SerialBaudConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSerialBaudConstantAdapter() {
		if (serialBaudConstantItemProvider == null) {
			serialBaudConstantItemProvider = new SerialBaudConstantItemProvider(this);
		}

		return serialBaudConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.SerialBiphaseConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SerialBiphaseConstantItemProvider serialBiphaseConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.SerialBiphaseConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSerialBiphaseConstantAdapter() {
		if (serialBiphaseConstantItemProvider == null) {
			serialBiphaseConstantItemProvider = new SerialBiphaseConstantItemProvider(this);
		}

		return serialBiphaseConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.SerialChecksumConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SerialChecksumConstantItemProvider serialChecksumConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.SerialChecksumConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSerialChecksumConstantAdapter() {
		if (serialChecksumConstantItemProvider == null) {
			serialChecksumConstantItemProvider = new SerialChecksumConstantItemProvider(this);
		}

		return serialChecksumConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.SerialChannelConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SerialChannelConstantItemProvider serialChannelConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.SerialChannelConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSerialChannelConstantAdapter() {
		if (serialChannelConstantItemProvider == null) {
			serialChannelConstantItemProvider = new SerialChannelConstantItemProvider(this);
		}

		return serialChannelConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.SerialCommConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SerialCommConstantItemProvider serialCommConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.SerialCommConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSerialCommConstantAdapter() {
		if (serialCommConstantItemProvider == null) {
			serialCommConstantItemProvider = new SerialCommConstantItemProvider(this);
		}

		return serialCommConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.SerialPacketConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SerialPacketConstantItemProvider serialPacketConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.SerialPacketConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSerialPacketConstantAdapter() {
		if (serialPacketConstantItemProvider == null) {
			serialPacketConstantItemProvider = new SerialPacketConstantItemProvider(this);
		}

		return serialPacketConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.SoundConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoundConstantItemProvider soundConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.SoundConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoundConstantAdapter() {
		if (soundConstantItemProvider == null) {
			soundConstantItemProvider = new SoundConstantItemProvider(this);
		}

		return soundConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.StartStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartStatementItemProvider startStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.StartStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartStatementAdapter() {
		if (startStatementItemProvider == null) {
			startStatementItemProvider = new StartStatementItemProvider(this);
		}

		return startStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.StopStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StopStatementItemProvider stopStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.StopStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStopStatementAdapter() {
		if (stopStatementItemProvider == null) {
			stopStatementItemProvider = new StopStatementItemProvider(this);
		}

		return stopStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.Subroutine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubroutineItemProvider subroutineItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.Subroutine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubroutineAdapter() {
		if (subroutineItemProvider == null) {
			subroutineItemProvider = new SubroutineItemProvider(this);
		}

		return subroutineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.SubroutineCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubroutineCallItemProvider subroutineCallItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.SubroutineCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubroutineCallAdapter() {
		if (subroutineCallItemProvider == null) {
			subroutineCallItemProvider = new SubroutineCallItemProvider(this);
		}

		return subroutineCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.SwitchStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SwitchStatementItemProvider switchStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.SwitchStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwitchStatementAdapter() {
		if (switchStatementItemProvider == null) {
			switchStatementItemProvider = new SwitchStatementItemProvider(this);
		}

		return switchStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.TernaryBuiltInFunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TernaryBuiltInFunctionCallItemProvider ternaryBuiltInFunctionCallItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.TernaryBuiltInFunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTernaryBuiltInFunctionCallAdapter() {
		if (ternaryBuiltInFunctionCallItemProvider == null) {
			ternaryBuiltInFunctionCallItemProvider = new TernaryBuiltInFunctionCallItemProvider(this);
		}

		return ternaryBuiltInFunctionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.TernaryExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TernaryExpressionItemProvider ternaryExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.TernaryExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTernaryExpressionAdapter() {
		if (ternaryExpressionItemProvider == null) {
			ternaryExpressionItemProvider = new TernaryExpressionItemProvider(this);
		}

		return ternaryExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.TxPowerConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TxPowerConstantItemProvider txPowerConstantItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.TxPowerConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTxPowerConstantAdapter() {
		if (txPowerConstantItemProvider == null) {
			txPowerConstantItemProvider = new TxPowerConstantItemProvider(this);
		}

		return txPowerConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.UnaryBuiltInFunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryBuiltInFunctionCallItemProvider unaryBuiltInFunctionCallItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.UnaryBuiltInFunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryBuiltInFunctionCallAdapter() {
		if (unaryBuiltInFunctionCallItemProvider == null) {
			unaryBuiltInFunctionCallItemProvider = new UnaryBuiltInFunctionCallItemProvider(this);
		}

		return unaryBuiltInFunctionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.UnaryBuiltInValueFunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryBuiltInValueFunctionCallItemProvider unaryBuiltInValueFunctionCallItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.UnaryBuiltInValueFunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryBuiltInValueFunctionCallAdapter() {
		if (unaryBuiltInValueFunctionCallItemProvider == null) {
			unaryBuiltInValueFunctionCallItemProvider = new UnaryBuiltInValueFunctionCallItemProvider(this);
		}

		return unaryBuiltInValueFunctionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.UnaryExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryExpressionItemProvider unaryExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.UnaryExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryExpressionAdapter() {
		if (unaryExpressionItemProvider == null) {
			unaryExpressionItemProvider = new UnaryExpressionItemProvider(this);
		}

		return unaryExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.UntilStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UntilStatementItemProvider untilStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.UntilStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUntilStatementAdapter() {
		if (untilStatementItemProvider == null) {
			untilStatementItemProvider = new UntilStatementItemProvider(this);
		}

		return untilStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.VariableExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableExpressionItemProvider variableExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.VariableExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableExpressionAdapter() {
		if (variableExpressionItemProvider == null) {
			variableExpressionItemProvider = new VariableExpressionItemProvider(this);
		}

		return variableExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nqc.WhileStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhileStatementItemProvider whileStatementItemProvider;

	/**
	 * This creates an adapter for a {@link nqc.WhileStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhileStatementAdapter() {
		if (whileStatementItemProvider == null) {
			whileStatementItemProvider = new WhileStatementItemProvider(this);
		}

		return whileStatementItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (acquireConstantItemProvider != null) acquireConstantItemProvider.dispose();
		if (acquireStatementItemProvider != null) acquireStatementItemProvider.dispose();
		if (arrayExpressionItemProvider != null) arrayExpressionItemProvider.dispose();
		if (assignmentStatementItemProvider != null) assignmentStatementItemProvider.dispose();
		if (binaryExpressionItemProvider != null) binaryExpressionItemProvider.dispose();
		if (binaryBuiltInFunctionCallItemProvider != null) binaryBuiltInFunctionCallItemProvider.dispose();
		if (binaryBuiltInValueFunctionCallItemProvider != null) binaryBuiltInValueFunctionCallItemProvider.dispose();
		if (blockStatementItemProvider != null) blockStatementItemProvider.dispose();
		if (booleanConstantItemProvider != null) booleanConstantItemProvider.dispose();
		if (breakStatementItemProvider != null) breakStatementItemProvider.dispose();
		if (caseItemProvider != null) caseItemProvider.dispose();
		if (continueStatementItemProvider != null) continueStatementItemProvider.dispose();
		if (directionConstantItemProvider != null) directionConstantItemProvider.dispose();
		if (displayModeConstantItemProvider != null) displayModeConstantItemProvider.dispose();
		if (doWhileStatementItemProvider != null) doWhileStatementItemProvider.dispose();
		if (emptyStatementItemProvider != null) emptyStatementItemProvider.dispose();
		if (eventTypeConstantItemProvider != null) eventTypeConstantItemProvider.dispose();
		if (functionItemProvider != null) functionItemProvider.dispose();
		if (functionCallItemProvider != null) functionCallItemProvider.dispose();
		if (forStatementItemProvider != null) forStatementItemProvider.dispose();
		if (goToStatementItemProvider != null) goToStatementItemProvider.dispose();
		if (ifStatementItemProvider != null) ifStatementItemProvider.dispose();
		if (integerConstantItemProvider != null) integerConstantItemProvider.dispose();
		if (labelItemProvider != null) labelItemProvider.dispose();
		if (monitorHandlerItemProvider != null) monitorHandlerItemProvider.dispose();
		if (monitorStatementItemProvider != null) monitorStatementItemProvider.dispose();
		if (nullaryBuiltInFunctionCallItemProvider != null) nullaryBuiltInFunctionCallItemProvider.dispose();
		if (nullaryBuiltInValueFunctionCallItemProvider != null) nullaryBuiltInValueFunctionCallItemProvider.dispose();
		if (outputModeConstantItemProvider != null) outputModeConstantItemProvider.dispose();
		if (outputPortNameConstantItemProvider != null) outputPortNameConstantItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (programItemProvider != null) programItemProvider.dispose();
		if (programsItemProvider != null) programsItemProvider.dispose();
		if (quaternaryBuiltInFunctionCallItemProvider != null) quaternaryBuiltInFunctionCallItemProvider.dispose();
		if (repeatStatementItemProvider != null) repeatStatementItemProvider.dispose();
		if (returnStatementItemProvider != null) returnStatementItemProvider.dispose();
		if (senaryBuiltInFunctionCallItemProvider != null) senaryBuiltInFunctionCallItemProvider.dispose();
		if (sensorConfigConstantItemProvider != null) sensorConfigConstantItemProvider.dispose();
		if (sensorModeConstantItemProvider != null) sensorModeConstantItemProvider.dispose();
		if (sensorNameConstantItemProvider != null) sensorNameConstantItemProvider.dispose();
		if (sensorTypeConstantItemProvider != null) sensorTypeConstantItemProvider.dispose();
		if (serialBaudConstantItemProvider != null) serialBaudConstantItemProvider.dispose();
		if (serialBiphaseConstantItemProvider != null) serialBiphaseConstantItemProvider.dispose();
		if (serialChecksumConstantItemProvider != null) serialChecksumConstantItemProvider.dispose();
		if (serialChannelConstantItemProvider != null) serialChannelConstantItemProvider.dispose();
		if (serialCommConstantItemProvider != null) serialCommConstantItemProvider.dispose();
		if (serialPacketConstantItemProvider != null) serialPacketConstantItemProvider.dispose();
		if (soundConstantItemProvider != null) soundConstantItemProvider.dispose();
		if (startStatementItemProvider != null) startStatementItemProvider.dispose();
		if (stopStatementItemProvider != null) stopStatementItemProvider.dispose();
		if (subroutineItemProvider != null) subroutineItemProvider.dispose();
		if (subroutineCallItemProvider != null) subroutineCallItemProvider.dispose();
		if (switchStatementItemProvider != null) switchStatementItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (ternaryBuiltInFunctionCallItemProvider != null) ternaryBuiltInFunctionCallItemProvider.dispose();
		if (ternaryExpressionItemProvider != null) ternaryExpressionItemProvider.dispose();
		if (txPowerConstantItemProvider != null) txPowerConstantItemProvider.dispose();
		if (unaryBuiltInFunctionCallItemProvider != null) unaryBuiltInFunctionCallItemProvider.dispose();
		if (unaryBuiltInValueFunctionCallItemProvider != null) unaryBuiltInValueFunctionCallItemProvider.dispose();
		if (unaryExpressionItemProvider != null) unaryExpressionItemProvider.dispose();
		if (untilStatementItemProvider != null) untilStatementItemProvider.dispose();
		if (variableItemProvider != null) variableItemProvider.dispose();
		if (variableExpressionItemProvider != null) variableExpressionItemProvider.dispose();
		if (whileStatementItemProvider != null) whileStatementItemProvider.dispose();
	}

}
