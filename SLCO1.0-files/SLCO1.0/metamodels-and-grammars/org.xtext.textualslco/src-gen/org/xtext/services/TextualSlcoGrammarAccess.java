/*
* generated by Xtext
*/
package org.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TextualSlcoGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cClassesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cClassesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cClassesClassParserRuleCall_3_1_0 = (RuleCall)cClassesAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cObjectsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cObjectsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cObjectsObjectParserRuleCall_4_1_0 = (RuleCall)cObjectsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cChannelsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cChannelsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cChannelsChannelParserRuleCall_5_1_0 = (RuleCall)cChannelsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Model:
		//	"model" name=ID "{" ("classes" classes+=Class*)? ("objects" objects+=Object*)? ("channels" channels+=Channel*)? "}";
		public ParserRule getRule() { return rule; }

		//"model" name=ID "{" ("classes" classes+=Class*)? ("objects" objects+=Object*)? ("channels" channels+=Channel*)? "}"
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("classes" classes+=Class*)?
		public Group getGroup_3() { return cGroup_3; }

		//"classes"
		public Keyword getClassesKeyword_3_0() { return cClassesKeyword_3_0; }

		//classes+=Class*
		public Assignment getClassesAssignment_3_1() { return cClassesAssignment_3_1; }

		//Class
		public RuleCall getClassesClassParserRuleCall_3_1_0() { return cClassesClassParserRuleCall_3_1_0; }

		//("objects" objects+=Object*)?
		public Group getGroup_4() { return cGroup_4; }

		//"objects"
		public Keyword getObjectsKeyword_4_0() { return cObjectsKeyword_4_0; }

		//objects+=Object*
		public Assignment getObjectsAssignment_4_1() { return cObjectsAssignment_4_1; }

		//Object
		public RuleCall getObjectsObjectParserRuleCall_4_1_0() { return cObjectsObjectParserRuleCall_4_1_0; }

		//("channels" channels+=Channel*)?
		public Group getGroup_5() { return cGroup_5; }

		//"channels"
		public Keyword getChannelsKeyword_5_0() { return cChannelsKeyword_5_0; }

		//channels+=Channel*
		public Assignment getChannelsAssignment_5_1() { return cChannelsAssignment_5_1; }

		//Channel
		public RuleCall getChannelsChannelParserRuleCall_5_1_0() { return cChannelsChannelParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVariablesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPortsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPortsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_3_1_0 = (RuleCall)cPortsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStateMachinesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cStateMachinesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStateMachinesStateMachineParserRuleCall_4_1_0 = (RuleCall)cStateMachinesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Class:
		//	name=ID "{" ("variables" variables+=Variable*)? ("ports" ports+=Port*)? ("state machines"
		//	stateMachines+=StateMachine*)? "}";
		public ParserRule getRule() { return rule; }

		//name=ID "{" ("variables" variables+=Variable*)? ("ports" ports+=Port*)? ("state machines" stateMachines+=StateMachine*)?
		//"}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("variables" variables+=Variable*)?
		public Group getGroup_2() { return cGroup_2; }

		//"variables"
		public Keyword getVariablesKeyword_2_0() { return cVariablesKeyword_2_0; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_1_0() { return cVariablesVariableParserRuleCall_2_1_0; }

		//("ports" ports+=Port*)?
		public Group getGroup_3() { return cGroup_3; }

		//"ports"
		public Keyword getPortsKeyword_3_0() { return cPortsKeyword_3_0; }

		//ports+=Port*
		public Assignment getPortsAssignment_3_1() { return cPortsAssignment_3_1; }

		//Port
		public RuleCall getPortsPortParserRuleCall_3_1_0() { return cPortsPortParserRuleCall_3_1_0; }

		//("state machines" stateMachines+=StateMachine*)?
		public Group getGroup_4() { return cGroup_4; }

		//"state machines"
		public Keyword getStateMachinesKeyword_4_0() { return cStateMachinesKeyword_4_0; }

		//stateMachines+=StateMachine*
		public Assignment getStateMachinesAssignment_4_1() { return cStateMachinesAssignment_4_1; }

		//StateMachine
		public RuleCall getStateMachinesStateMachineParserRuleCall_4_1_0() { return cStateMachinesStateMachineParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVariablesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInitialKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVerticesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVerticesInitialParserRuleCall_3_1_0 = (RuleCall)cVerticesAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStateKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVerticesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVerticesStateParserRuleCall_4_1_0 = (RuleCall)cVerticesAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFinalKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVerticesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVerticesFinalParserRuleCall_5_1_0 = (RuleCall)cVerticesAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cTransitionsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTransitionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_6_1_0 = (RuleCall)cTransitionsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//StateMachine:
		//	name=ID "{" ("variables" variables+=Variable*)? ("initial" vertices+=Initial*)? ("state" vertices+=State*)? ("final"
		//	vertices+=Final*)? ("transitions" transitions+=Transition*)? "}";
		public ParserRule getRule() { return rule; }

		//name=ID "{" ("variables" variables+=Variable*)? ("initial" vertices+=Initial*)? ("state" vertices+=State*)? ("final"
		//vertices+=Final*)? ("transitions" transitions+=Transition*)? "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("variables" variables+=Variable*)?
		public Group getGroup_2() { return cGroup_2; }

		//"variables"
		public Keyword getVariablesKeyword_2_0() { return cVariablesKeyword_2_0; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_1_0() { return cVariablesVariableParserRuleCall_2_1_0; }

		//("initial" vertices+=Initial*)?
		public Group getGroup_3() { return cGroup_3; }

		//"initial"
		public Keyword getInitialKeyword_3_0() { return cInitialKeyword_3_0; }

		//vertices+=Initial*
		public Assignment getVerticesAssignment_3_1() { return cVerticesAssignment_3_1; }

		//Initial
		public RuleCall getVerticesInitialParserRuleCall_3_1_0() { return cVerticesInitialParserRuleCall_3_1_0; }

		//("state" vertices+=State*)?
		public Group getGroup_4() { return cGroup_4; }

		//"state"
		public Keyword getStateKeyword_4_0() { return cStateKeyword_4_0; }

		//vertices+=State*
		public Assignment getVerticesAssignment_4_1() { return cVerticesAssignment_4_1; }

		//State
		public RuleCall getVerticesStateParserRuleCall_4_1_0() { return cVerticesStateParserRuleCall_4_1_0; }

		//("final" vertices+=Final*)?
		public Group getGroup_5() { return cGroup_5; }

		//"final"
		public Keyword getFinalKeyword_5_0() { return cFinalKeyword_5_0; }

		//vertices+=Final*
		public Assignment getVerticesAssignment_5_1() { return cVerticesAssignment_5_1; }

		//Final
		public RuleCall getVerticesFinalParserRuleCall_5_1_0() { return cVerticesFinalParserRuleCall_5_1_0; }

		//("transitions" transitions+=Transition*)?
		public Group getGroup_6() { return cGroup_6; }

		//"transitions"
		public Keyword getTransitionsKeyword_6_0() { return cTransitionsKeyword_6_0; }

		//transitions+=Transition*
		public Assignment getTransitionsAssignment_6_1() { return cTransitionsAssignment_6_1; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_6_1_0() { return cTransitionsTransitionParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class VertexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vertex");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInitialParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFinalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Vertex:
		//	Initial | State | Final;
		public ParserRule getRule() { return rule; }

		//Initial | State | Final
		public Alternatives getAlternatives() { return cAlternatives; }

		//Initial
		public RuleCall getInitialParserRuleCall_0() { return cInitialParserRuleCall_0; }

		//State
		public RuleCall getStateParserRuleCall_1() { return cStateParserRuleCall_1; }

		//Final
		public RuleCall getFinalParserRuleCall_2() { return cFinalParserRuleCall_2; }
	}

	public class InitialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Initial");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Initial:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//State:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class FinalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Final");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Final:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class VertexReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VertexReference");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VertexReference:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceVertexReferenceParserRuleCall_2_0 = (RuleCall)cSourceAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTargetVertexReferenceParserRuleCall_4_0 = (RuleCall)cTargetAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cStatementsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_6_0_0 = (RuleCall)cStatementsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cSemicolonKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cStatementsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_6_1_1_0 = (RuleCall)cStatementsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Transition:
		//	name=ID "from" source=VertexReference "to" target=VertexReference "{" (statements+=Statement (";"
		//	statements+=Statement)*)? "}";
		public ParserRule getRule() { return rule; }

		//name=ID "from" source=VertexReference "to" target=VertexReference "{" (statements+=Statement (";"
		//statements+=Statement)*)? "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"from"
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }

		//source=VertexReference
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//VertexReference
		public RuleCall getSourceVertexReferenceParserRuleCall_2_0() { return cSourceVertexReferenceParserRuleCall_2_0; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//target=VertexReference
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//VertexReference
		public RuleCall getTargetVertexReferenceParserRuleCall_4_0() { return cTargetVertexReferenceParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//(statements+=Statement (";" statements+=Statement)*)?
		public Group getGroup_6() { return cGroup_6; }

		//statements+=Statement
		public Assignment getStatementsAssignment_6_0() { return cStatementsAssignment_6_0; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_0_0() { return cStatementsStatementParserRuleCall_6_0_0; }

		//(";" statements+=Statement)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//";"
		public Keyword getSemicolonKeyword_6_1_0() { return cSemicolonKeyword_6_1_0; }

		//statements+=Statement
		public Assignment getStatementsAssignment_6_1_1() { return cStatementsAssignment_6_1_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_1_1_0() { return cStatementsStatementParserRuleCall_6_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSendSignalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDelayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSignalReceptionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Statement:
		//	Assignment | SendSignal | Delay | SignalReception | Expression;
		public ParserRule getRule() { return rule; }

		//Assignment | SendSignal | Delay | SignalReception | Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }

		//SendSignal
		public RuleCall getSendSignalParserRuleCall_1() { return cSendSignalParserRuleCall_1; }

		//Delay
		public RuleCall getDelayParserRuleCall_2() { return cDelayParserRuleCall_2; }

		//SignalReception
		public RuleCall getSignalReceptionParserRuleCall_3() { return cSignalReceptionParserRuleCall_3; }

		//Expression
		public RuleCall getExpressionParserRuleCall_4() { return cExpressionParserRuleCall_4; }
	}

	public class DelayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Delay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAfterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cMsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Delay:
		//	"after" value=INT "ms";
		public ParserRule getRule() { return rule; }

		//"after" value=INT "ms"
		public Group getGroup() { return cGroup; }

		//"after"
		public Keyword getAfterKeyword_0() { return cAfterKeyword_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }

		//"ms"
		public Keyword getMsKeyword_2() { return cMsKeyword_2; }
	}

	public class PortReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PortReference");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PortReference:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class SignalReceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalReception");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReceiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignalNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignalNameIDTerminalRuleCall_1_0 = (RuleCall)cSignalNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsSignalArgumentParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsSignalArgumentParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConditionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_4_1_0 = (RuleCall)cConditionAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cFromKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPortAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPortPortReferenceParserRuleCall_7_0 = (RuleCall)cPortAssignment_7.eContents().get(0);
		
		//SignalReception:
		//	"receive" signalName=ID "(" (arguments+=SignalArgument ("," arguments+=SignalArgument)*)? ("|" condition=Expression)?
		//	")" "from" port=PortReference;
		public ParserRule getRule() { return rule; }

		//"receive" signalName=ID "(" (arguments+=SignalArgument ("," arguments+=SignalArgument)*)? ("|" condition=Expression)?
		//")" "from" port=PortReference
		public Group getGroup() { return cGroup; }

		//"receive"
		public Keyword getReceiveKeyword_0() { return cReceiveKeyword_0; }

		//signalName=ID
		public Assignment getSignalNameAssignment_1() { return cSignalNameAssignment_1; }

		//ID
		public RuleCall getSignalNameIDTerminalRuleCall_1_0() { return cSignalNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(arguments+=SignalArgument ("," arguments+=SignalArgument)*)?
		public Group getGroup_3() { return cGroup_3; }

		//arguments+=SignalArgument
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }

		//SignalArgument
		public RuleCall getArgumentsSignalArgumentParserRuleCall_3_0_0() { return cArgumentsSignalArgumentParserRuleCall_3_0_0; }

		//("," arguments+=SignalArgument)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//arguments+=SignalArgument
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }

		//SignalArgument
		public RuleCall getArgumentsSignalArgumentParserRuleCall_3_1_1_0() { return cArgumentsSignalArgumentParserRuleCall_3_1_1_0; }

		//("|" condition=Expression)?
		public Group getGroup_4() { return cGroup_4; }

		//"|"
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }

		//condition=Expression
		public Assignment getConditionAssignment_4_1() { return cConditionAssignment_4_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_4_1_0() { return cConditionExpressionParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"from"
		public Keyword getFromKeyword_6() { return cFromKeyword_6; }

		//port=PortReference
		public Assignment getPortAssignment_7() { return cPortAssignment_7; }

		//PortReference
		public RuleCall getPortPortReferenceParserRuleCall_7_0() { return cPortPortReferenceParserRuleCall_7_0; }
	}

	public class SignalArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignalArgumentVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignalArgumentExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SignalArgument:
		//	SignalArgumentVariable | SignalArgumentExpression;
		public ParserRule getRule() { return rule; }

		//SignalArgumentVariable | SignalArgumentExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//SignalArgumentVariable
		public RuleCall getSignalArgumentVariableParserRuleCall_0() { return cSignalArgumentVariableParserRuleCall_0; }

		//SignalArgumentExpression
		public RuleCall getSignalArgumentExpressionParserRuleCall_1() { return cSignalArgumentExpressionParserRuleCall_1; }
	}

	public class SignalArgumentVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalArgumentVariable");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVariableVariableReferenceParserRuleCall_0 = (RuleCall)cVariableAssignment.eContents().get(0);
		
		//SignalArgumentVariable:
		//	variable=VariableReference;
		public ParserRule getRule() { return rule; }

		//variable=VariableReference
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//VariableReference
		public RuleCall getVariableVariableReferenceParserRuleCall_0() { return cVariableVariableReferenceParserRuleCall_0; }
	}

	public class SignalArgumentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalArgumentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SignalArgumentExpression:
		//	"[[" expression=Expression "]]";
		public ParserRule getRule() { return rule; }

		//"[[" expression=Expression "]]"
		public Group getGroup() { return cGroup; }

		//"[["
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_0() { return cLeftSquareBracketLeftSquareBracketKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//"]]"
		public Keyword getRightSquareBracketRightSquareBracketKeyword_2() { return cRightSquareBracketRightSquareBracketKeyword_2; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableReferenceParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Assignment:
		//	variable=VariableReference ":=" expression=Expression;
		public ParserRule getRule() { return rule; }

		//variable=VariableReference ":=" expression=Expression
		public Group getGroup() { return cGroup; }

		//variable=VariableReference
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//VariableReference
		public RuleCall getVariableVariableReferenceParserRuleCall_0_0() { return cVariableVariableReferenceParserRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class SendSignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SendSignal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignalNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignalNameIDTerminalRuleCall_1_0 = (RuleCall)cSignalNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPortAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPortPortReferenceParserRuleCall_6_0 = (RuleCall)cPortAssignment_6.eContents().get(0);
		
		//SendSignal:
		//	"send" signalName=ID "(" (arguments+=Expression ("," arguments+=Expression)*)? ")" "to" port=PortReference;
		public ParserRule getRule() { return rule; }

		//"send" signalName=ID "(" (arguments+=Expression ("," arguments+=Expression)*)? ")" "to" port=PortReference
		public Group getGroup() { return cGroup; }

		//"send"
		public Keyword getSendKeyword_0() { return cSendKeyword_0; }

		//signalName=ID
		public Assignment getSignalNameAssignment_1() { return cSignalNameAssignment_1; }

		//ID
		public RuleCall getSignalNameIDTerminalRuleCall_1_0() { return cSignalNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_3_0_0() { return cArgumentsExpressionParserRuleCall_3_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_3_1_1_0() { return cArgumentsExpressionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"to"
		public Keyword getToKeyword_5() { return cToKeyword_5; }

		//port=PortReference
		public Assignment getPortAssignment_6() { return cPortAssignment_6; }

		//PortReference
		public RuleCall getPortPortReferenceParserRuleCall_6_0() { return cPortPortReferenceParserRuleCall_6_0; }
	}

	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cClassClassCrossReference_2_0 = (CrossReference)cClassAssignment_2.eContents().get(0);
		private final RuleCall cClassClassIDTerminalRuleCall_2_0_1 = (RuleCall)cClassClassCrossReference_2_0.eContents().get(1);
		
		//Object:
		//	name=ID ":" class=[Class];
		public ParserRule getRule() { return rule; }

		//name=ID ":" class=[Class]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//class=[Class]
		public Assignment getClassAssignment_2() { return cClassAssignment_2; }

		//[Class]
		public CrossReference getClassClassCrossReference_2_0() { return cClassClassCrossReference_2_0; }

		//ID
		public RuleCall getClassClassIDTerminalRuleCall_2_0_1() { return cClassClassIDTerminalRuleCall_2_0_1; }
	}

	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Port");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Port:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ChannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Channel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnidirectionalChannelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBidirectionalChannelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Channel:
		//	UnidirectionalChannel | BidirectionalChannel;
		public ParserRule getRule() { return rule; }

		//UnidirectionalChannel | BidirectionalChannel
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnidirectionalChannel
		public RuleCall getUnidirectionalChannelParserRuleCall_0() { return cUnidirectionalChannelParserRuleCall_0; }

		//BidirectionalChannel
		public RuleCall getBidirectionalChannelParserRuleCall_1() { return cBidirectionalChannelParserRuleCall_1; }
	}

	public class UnidirectionalChannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnidirectionalChannel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentTypesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentTypesArgumentTypeParserRuleCall_2_0_0 = (RuleCall)cArgumentTypesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentTypesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentTypesArgumentTypeParserRuleCall_2_1_1_0 = (RuleCall)cArgumentTypesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cChannelTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChannelTypeChannelTypeEnumRuleCall_4_0 = (RuleCall)cChannelTypeAssignment_4.eContents().get(0);
		private final Keyword cFromKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSourceObjectAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSourceObjectObjectCrossReference_6_0 = (CrossReference)cSourceObjectAssignment_6.eContents().get(0);
		private final RuleCall cSourceObjectObjectIDTerminalRuleCall_6_0_1 = (RuleCall)cSourceObjectObjectCrossReference_6_0.eContents().get(1);
		private final Keyword cFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSourcePortAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSourcePortPortReferenceParserRuleCall_8_0 = (RuleCall)cSourcePortAssignment_8.eContents().get(0);
		private final Keyword cToKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTargetObjectAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cTargetObjectObjectCrossReference_10_0 = (CrossReference)cTargetObjectAssignment_10.eContents().get(0);
		private final RuleCall cTargetObjectObjectIDTerminalRuleCall_10_0_1 = (RuleCall)cTargetObjectObjectCrossReference_10_0.eContents().get(1);
		private final Keyword cFullStopKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cTargetPortAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cTargetPortPortReferenceParserRuleCall_12_0 = (RuleCall)cTargetPortAssignment_12.eContents().get(0);
		
		//UnidirectionalChannel:
		//	name=ID "(" (argumentTypes+=ArgumentType ("," argumentTypes+=ArgumentType)*)? ")" channelType=ChannelType "from"
		//	sourceObject=[Object] "." sourcePort=PortReference "to" targetObject=[Object] "." targetPort=PortReference;
		public ParserRule getRule() { return rule; }

		//name=ID "(" (argumentTypes+=ArgumentType ("," argumentTypes+=ArgumentType)*)? ")" channelType=ChannelType "from"
		//sourceObject=[Object] "." sourcePort=PortReference "to" targetObject=[Object] "." targetPort=PortReference
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(argumentTypes+=ArgumentType ("," argumentTypes+=ArgumentType)*)?
		public Group getGroup_2() { return cGroup_2; }

		//argumentTypes+=ArgumentType
		public Assignment getArgumentTypesAssignment_2_0() { return cArgumentTypesAssignment_2_0; }

		//ArgumentType
		public RuleCall getArgumentTypesArgumentTypeParserRuleCall_2_0_0() { return cArgumentTypesArgumentTypeParserRuleCall_2_0_0; }

		//("," argumentTypes+=ArgumentType)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//argumentTypes+=ArgumentType
		public Assignment getArgumentTypesAssignment_2_1_1() { return cArgumentTypesAssignment_2_1_1; }

		//ArgumentType
		public RuleCall getArgumentTypesArgumentTypeParserRuleCall_2_1_1_0() { return cArgumentTypesArgumentTypeParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//channelType=ChannelType
		public Assignment getChannelTypeAssignment_4() { return cChannelTypeAssignment_4; }

		//ChannelType
		public RuleCall getChannelTypeChannelTypeEnumRuleCall_4_0() { return cChannelTypeChannelTypeEnumRuleCall_4_0; }

		//"from"
		public Keyword getFromKeyword_5() { return cFromKeyword_5; }

		//sourceObject=[Object]
		public Assignment getSourceObjectAssignment_6() { return cSourceObjectAssignment_6; }

		//[Object]
		public CrossReference getSourceObjectObjectCrossReference_6_0() { return cSourceObjectObjectCrossReference_6_0; }

		//ID
		public RuleCall getSourceObjectObjectIDTerminalRuleCall_6_0_1() { return cSourceObjectObjectIDTerminalRuleCall_6_0_1; }

		//"."
		public Keyword getFullStopKeyword_7() { return cFullStopKeyword_7; }

		//sourcePort=PortReference
		public Assignment getSourcePortAssignment_8() { return cSourcePortAssignment_8; }

		//PortReference
		public RuleCall getSourcePortPortReferenceParserRuleCall_8_0() { return cSourcePortPortReferenceParserRuleCall_8_0; }

		//"to"
		public Keyword getToKeyword_9() { return cToKeyword_9; }

		//targetObject=[Object]
		public Assignment getTargetObjectAssignment_10() { return cTargetObjectAssignment_10; }

		//[Object]
		public CrossReference getTargetObjectObjectCrossReference_10_0() { return cTargetObjectObjectCrossReference_10_0; }

		//ID
		public RuleCall getTargetObjectObjectIDTerminalRuleCall_10_0_1() { return cTargetObjectObjectIDTerminalRuleCall_10_0_1; }

		//"."
		public Keyword getFullStopKeyword_11() { return cFullStopKeyword_11; }

		//targetPort=PortReference
		public Assignment getTargetPortAssignment_12() { return cTargetPortAssignment_12; }

		//PortReference
		public RuleCall getTargetPortPortReferenceParserRuleCall_12_0() { return cTargetPortPortReferenceParserRuleCall_12_0; }
	}

	public class BidirectionalChannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BidirectionalChannel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentTypesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentTypesArgumentTypeParserRuleCall_2_0_0 = (RuleCall)cArgumentTypesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentTypesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentTypesArgumentTypeParserRuleCall_2_1_1_0 = (RuleCall)cArgumentTypesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cChannelTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChannelTypeChannelTypeEnumRuleCall_4_0 = (RuleCall)cChannelTypeAssignment_4.eContents().get(0);
		private final Keyword cBetweenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cObject1Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cObject1ObjectCrossReference_6_0 = (CrossReference)cObject1Assignment_6.eContents().get(0);
		private final RuleCall cObject1ObjectIDTerminalRuleCall_6_0_1 = (RuleCall)cObject1ObjectCrossReference_6_0.eContents().get(1);
		private final Keyword cFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cPort1Assignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPort1PortReferenceParserRuleCall_8_0 = (RuleCall)cPort1Assignment_8.eContents().get(0);
		private final Keyword cAndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cObject2Assignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cObject2ObjectCrossReference_10_0 = (CrossReference)cObject2Assignment_10.eContents().get(0);
		private final RuleCall cObject2ObjectIDTerminalRuleCall_10_0_1 = (RuleCall)cObject2ObjectCrossReference_10_0.eContents().get(1);
		private final Keyword cFullStopKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cPort2Assignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cPort2PortReferenceParserRuleCall_12_0 = (RuleCall)cPort2Assignment_12.eContents().get(0);
		
		//BidirectionalChannel:
		//	name=ID "(" (argumentTypes+=ArgumentType ("," argumentTypes+=ArgumentType)*)? ")" channelType=ChannelType "between"
		//	object1=[Object] "." port1=PortReference "and" object2=[Object] "." port2=PortReference;
		public ParserRule getRule() { return rule; }

		//name=ID "(" (argumentTypes+=ArgumentType ("," argumentTypes+=ArgumentType)*)? ")" channelType=ChannelType "between"
		//object1=[Object] "." port1=PortReference "and" object2=[Object] "." port2=PortReference
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(argumentTypes+=ArgumentType ("," argumentTypes+=ArgumentType)*)?
		public Group getGroup_2() { return cGroup_2; }

		//argumentTypes+=ArgumentType
		public Assignment getArgumentTypesAssignment_2_0() { return cArgumentTypesAssignment_2_0; }

		//ArgumentType
		public RuleCall getArgumentTypesArgumentTypeParserRuleCall_2_0_0() { return cArgumentTypesArgumentTypeParserRuleCall_2_0_0; }

		//("," argumentTypes+=ArgumentType)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//argumentTypes+=ArgumentType
		public Assignment getArgumentTypesAssignment_2_1_1() { return cArgumentTypesAssignment_2_1_1; }

		//ArgumentType
		public RuleCall getArgumentTypesArgumentTypeParserRuleCall_2_1_1_0() { return cArgumentTypesArgumentTypeParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//channelType=ChannelType
		public Assignment getChannelTypeAssignment_4() { return cChannelTypeAssignment_4; }

		//ChannelType
		public RuleCall getChannelTypeChannelTypeEnumRuleCall_4_0() { return cChannelTypeChannelTypeEnumRuleCall_4_0; }

		//"between"
		public Keyword getBetweenKeyword_5() { return cBetweenKeyword_5; }

		//object1=[Object]
		public Assignment getObject1Assignment_6() { return cObject1Assignment_6; }

		//[Object]
		public CrossReference getObject1ObjectCrossReference_6_0() { return cObject1ObjectCrossReference_6_0; }

		//ID
		public RuleCall getObject1ObjectIDTerminalRuleCall_6_0_1() { return cObject1ObjectIDTerminalRuleCall_6_0_1; }

		//"."
		public Keyword getFullStopKeyword_7() { return cFullStopKeyword_7; }

		//port1=PortReference
		public Assignment getPort1Assignment_8() { return cPort1Assignment_8; }

		//PortReference
		public RuleCall getPort1PortReferenceParserRuleCall_8_0() { return cPort1PortReferenceParserRuleCall_8_0; }

		//"and"
		public Keyword getAndKeyword_9() { return cAndKeyword_9; }

		//object2=[Object]
		public Assignment getObject2Assignment_10() { return cObject2Assignment_10; }

		//[Object]
		public CrossReference getObject2ObjectCrossReference_10_0() { return cObject2ObjectCrossReference_10_0; }

		//ID
		public RuleCall getObject2ObjectIDTerminalRuleCall_10_0_1() { return cObject2ObjectIDTerminalRuleCall_10_0_1; }

		//"."
		public Keyword getFullStopKeyword_11() { return cFullStopKeyword_11; }

		//port2=PortReference
		public Assignment getPort2Assignment_12() { return cPort2Assignment_12; }

		//PortReference
		public RuleCall getPort2PortReferenceParserRuleCall_12_0() { return cPort2PortReferenceParserRuleCall_12_0; }
	}

	public class ArgumentTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypePrimitiveTypeEnumRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//ArgumentType:
		//	type=PrimitiveType;
		public ParserRule getRule() { return rule; }

		//type=PrimitiveType
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//PrimitiveType
		public RuleCall getTypePrimitiveTypeEnumRuleCall_0() { return cTypePrimitiveTypeEnumRuleCall_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypePrimitiveTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIntialValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIntialValueExpressionParserRuleCall_2_1_0 = (RuleCall)cIntialValueAssignment_2_1.eContents().get(0);
		
		//Variable:
		//	type=PrimitiveType name=ID ("=" intialValue=Expression)?;
		public ParserRule getRule() { return rule; }

		//type=PrimitiveType name=ID ("=" intialValue=Expression)?
		public Group getGroup() { return cGroup; }

		//type=PrimitiveType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//PrimitiveType
		public RuleCall getTypePrimitiveTypeEnumRuleCall_0_0() { return cTypePrimitiveTypeEnumRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("=" intialValue=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//intialValue=Expression
		public Assignment getIntialValueAssignment_2_1() { return cIntialValueAssignment_2_1; }

		//Expression
		public RuleCall getIntialValueExpressionParserRuleCall_2_1_0() { return cIntialValueExpressionParserRuleCall_2_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2ExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//Expression:
		//	TerminalExpression ({BinaryOperatorExpression.operand1=current} operator=Operator operand2=Expression)?;
		public ParserRule getRule() { return rule; }

		//TerminalExpression ({BinaryOperatorExpression.operand1=current} operator=Operator operand2=Expression)?
		public Group getGroup() { return cGroup; }

		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }

		//({BinaryOperatorExpression.operand1=current} operator=Operator operand2=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryOperatorExpression.operand1=current}
		public Action getBinaryOperatorExpressionOperand1Action_1_0() { return cBinaryOperatorExpressionOperand1Action_1_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_1_0() { return cOperatorOperatorEnumRuleCall_1_1_0; }

		//operand2=Expression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }

		//Expression
		public RuleCall getOperand2ExpressionParserRuleCall_1_2_0() { return cOperand2ExpressionParserRuleCall_1_2_0; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanConstantExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerConstantExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringConstantExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBracketExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//TerminalExpression returns Expression:
		//	BooleanConstantExpression | IntegerConstantExpression | StringConstantExpression | VariableExpression |
		//	BracketExpression;
		public ParserRule getRule() { return rule; }

		//BooleanConstantExpression | IntegerConstantExpression | StringConstantExpression | VariableExpression |
		//BracketExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanConstantExpression
		public RuleCall getBooleanConstantExpressionParserRuleCall_0() { return cBooleanConstantExpressionParserRuleCall_0; }

		//IntegerConstantExpression
		public RuleCall getIntegerConstantExpressionParserRuleCall_1() { return cIntegerConstantExpressionParserRuleCall_1; }

		//StringConstantExpression
		public RuleCall getStringConstantExpressionParserRuleCall_2() { return cStringConstantExpressionParserRuleCall_2; }

		//VariableExpression
		public RuleCall getVariableExpressionParserRuleCall_3() { return cVariableExpressionParserRuleCall_3; }

		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_4() { return cBracketExpressionParserRuleCall_4; }
	}

	public class BooleanConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanConstantExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanConstantExpression:
		//	value=BOOLEAN;
		public ParserRule getRule() { return rule; }

		//value=BOOLEAN
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_0() { return cValueBOOLEANTerminalRuleCall_0; }
	}

	public class IntegerConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerConstantExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerConstantExpression:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class StringConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringConstantExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringConstantExpression:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReference");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VariableReference:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class VariableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableExpression");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVariableVariableReferenceParserRuleCall_0 = (RuleCall)cVariableAssignment.eContents().get(0);
		
		//VariableExpression:
		//	variable=VariableReference;
		public ParserRule getRule() { return rule; }

		//variable=VariableReference
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//VariableReference
		public RuleCall getVariableVariableReferenceParserRuleCall_0() { return cVariableVariableReferenceParserRuleCall_0; }
	}

	public class BracketExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BracketExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BracketExpression returns Expression:
		//	"(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	
	public class PrimitiveTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntegerIntegerKeyword_0_0 = (Keyword)cIntegerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStringStringKeyword_1_0 = (Keyword)cStringEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBooleanBooleanKeyword_2_0 = (Keyword)cBooleanEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PrimitiveType:
		//	Integer | String | Boolean;
		public EnumRule getRule() { return rule; }

		//Integer | String | Boolean
		public Alternatives getAlternatives() { return cAlternatives; }

		//Integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_0() { return cIntegerEnumLiteralDeclaration_0; }

		//"Integer"
		public Keyword getIntegerIntegerKeyword_0_0() { return cIntegerIntegerKeyword_0_0; }

		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_1() { return cStringEnumLiteralDeclaration_1; }

		//"String"
		public Keyword getStringStringKeyword_1_0() { return cStringStringKeyword_1_0; }

		//Boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_2() { return cBooleanEnumLiteralDeclaration_2; }

		//"Boolean"
		public Keyword getBooleanBooleanKeyword_2_0() { return cBooleanBooleanKeyword_2_0; }
	}

	public class ChannelTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ChannelType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSynchronousEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSynchronousSyncKeyword_0_0 = (Keyword)cSynchronousEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAsynchronousLosslessEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAsynchronousLosslessAsyncLosslessKeyword_1_0 = (Keyword)cAsynchronousLosslessEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAsynchronousLossyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAsynchronousLossyAsyncLossyKeyword_2_0 = (Keyword)cAsynchronousLossyEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ChannelType:
		//	Synchronous="sync" | AsynchronousLossless="async lossless" | AsynchronousLossy="async lossy";
		public EnumRule getRule() { return rule; }

		//Synchronous="sync" | AsynchronousLossless="async lossless" | AsynchronousLossy="async lossy"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Synchronous="sync"
		public EnumLiteralDeclaration getSynchronousEnumLiteralDeclaration_0() { return cSynchronousEnumLiteralDeclaration_0; }

		//"sync"
		public Keyword getSynchronousSyncKeyword_0_0() { return cSynchronousSyncKeyword_0_0; }

		//AsynchronousLossless="async lossless"
		public EnumLiteralDeclaration getAsynchronousLosslessEnumLiteralDeclaration_1() { return cAsynchronousLosslessEnumLiteralDeclaration_1; }

		//"async lossless"
		public Keyword getAsynchronousLosslessAsyncLosslessKeyword_1_0() { return cAsynchronousLosslessAsyncLosslessKeyword_1_0; }

		//AsynchronousLossy="async lossy"
		public EnumLiteralDeclaration getAsynchronousLossyEnumLiteralDeclaration_2() { return cAsynchronousLossyEnumLiteralDeclaration_2; }

		//"async lossy"
		public Keyword getAsynchronousLossyAsyncLossyKeyword_2_0() { return cAsynchronousLossyAsyncLossyKeyword_2_0; }
	}

	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAtLeastEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAtLeastGreaterThanSignEqualsSignKeyword_0_0 = (Keyword)cAtLeastEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAtMostEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAtMostLessThanSignEqualsSignKeyword_1_0 = (Keyword)cAtMostEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAddPlusSignKeyword_2_0 = (Keyword)cAddEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAndAmpersandAmpersandKeyword_3_0 = (Keyword)cAndEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cOrVerticalLineVerticalLineKeyword_4_0 = (Keyword)cOrEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cEqualsEqualsSignEqualsSignKeyword_5_0 = (Keyword)cEqualsEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDiffersEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDiffersExclamationMarkEqualsSignKeyword_6_0 = (Keyword)cDiffersEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSubtractEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSubtractHyphenMinusKeyword_7_0 = (Keyword)cSubtractEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum Operator:
		//	atLeast=">=" | atMost="<=" | add="+" | and="&&" | or="||" | equals="==" | differs="!=" | subtract="-";
		public EnumRule getRule() { return rule; }

		//atLeast=">=" | atMost="<=" | add="+" | and="&&" | or="||" | equals="==" | differs="!=" | subtract="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//atLeast=">="
		public EnumLiteralDeclaration getAtLeastEnumLiteralDeclaration_0() { return cAtLeastEnumLiteralDeclaration_0; }

		//">="
		public Keyword getAtLeastGreaterThanSignEqualsSignKeyword_0_0() { return cAtLeastGreaterThanSignEqualsSignKeyword_0_0; }

		//atMost="<="
		public EnumLiteralDeclaration getAtMostEnumLiteralDeclaration_1() { return cAtMostEnumLiteralDeclaration_1; }

		//"<="
		public Keyword getAtMostLessThanSignEqualsSignKeyword_1_0() { return cAtMostLessThanSignEqualsSignKeyword_1_0; }

		//add="+"
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_2() { return cAddEnumLiteralDeclaration_2; }

		//"+"
		public Keyword getAddPlusSignKeyword_2_0() { return cAddPlusSignKeyword_2_0; }

		//and="&&"
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_3() { return cAndEnumLiteralDeclaration_3; }

		//"&&"
		public Keyword getAndAmpersandAmpersandKeyword_3_0() { return cAndAmpersandAmpersandKeyword_3_0; }

		//or="||"
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_4() { return cOrEnumLiteralDeclaration_4; }

		//"||"
		public Keyword getOrVerticalLineVerticalLineKeyword_4_0() { return cOrVerticalLineVerticalLineKeyword_4_0; }

		//equals="=="
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_5() { return cEqualsEnumLiteralDeclaration_5; }

		//"=="
		public Keyword getEqualsEqualsSignEqualsSignKeyword_5_0() { return cEqualsEqualsSignEqualsSignKeyword_5_0; }

		//differs="!="
		public EnumLiteralDeclaration getDiffersEnumLiteralDeclaration_6() { return cDiffersEnumLiteralDeclaration_6; }

		//"!="
		public Keyword getDiffersExclamationMarkEqualsSignKeyword_6_0() { return cDiffersExclamationMarkEqualsSignKeyword_6_0; }

		//subtract="-"
		public EnumLiteralDeclaration getSubtractEnumLiteralDeclaration_7() { return cSubtractEnumLiteralDeclaration_7; }

		//"-"
		public Keyword getSubtractHyphenMinusKeyword_7_0() { return cSubtractHyphenMinusKeyword_7_0; }
	}
	
	private ModelElements pModel;
	private ClassElements pClass;
	private StateMachineElements pStateMachine;
	private VertexElements pVertex;
	private InitialElements pInitial;
	private StateElements pState;
	private FinalElements pFinal;
	private VertexReferenceElements pVertexReference;
	private TransitionElements pTransition;
	private StatementElements pStatement;
	private DelayElements pDelay;
	private PortReferenceElements pPortReference;
	private SignalReceptionElements pSignalReception;
	private SignalArgumentElements pSignalArgument;
	private SignalArgumentVariableElements pSignalArgumentVariable;
	private SignalArgumentExpressionElements pSignalArgumentExpression;
	private AssignmentElements pAssignment;
	private SendSignalElements pSendSignal;
	private ObjectElements pObject;
	private PortElements pPort;
	private ChannelElements pChannel;
	private UnidirectionalChannelElements pUnidirectionalChannel;
	private BidirectionalChannelElements pBidirectionalChannel;
	private ArgumentTypeElements pArgumentType;
	private VariableElements pVariable;
	private PrimitiveTypeElements unknownRulePrimitiveType;
	private ChannelTypeElements unknownRuleChannelType;
	private ExpressionElements pExpression;
	private TerminalExpressionElements pTerminalExpression;
	private OperatorElements unknownRuleOperator;
	private BooleanConstantExpressionElements pBooleanConstantExpression;
	private IntegerConstantExpressionElements pIntegerConstantExpression;
	private StringConstantExpressionElements pStringConstantExpression;
	private VariableReferenceElements pVariableReference;
	private VariableExpressionElements pVariableExpression;
	private BracketExpressionElements pBracketExpression;
	private TerminalRule tBOOLEAN;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public TextualSlcoGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.TextualSlco".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"model" name=ID "{" ("classes" classes+=Class*)? ("objects" objects+=Object*)? ("channels" channels+=Channel*)? "}";
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Class:
	//	name=ID "{" ("variables" variables+=Variable*)? ("ports" ports+=Port*)? ("state machines"
	//	stateMachines+=StateMachine*)? "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//StateMachine:
	//	name=ID "{" ("variables" variables+=Variable*)? ("initial" vertices+=Initial*)? ("state" vertices+=State*)? ("final"
	//	vertices+=Final*)? ("transitions" transitions+=Transition*)? "}";
	public StateMachineElements getStateMachineAccess() {
		return (pStateMachine != null) ? pStateMachine : (pStateMachine = new StateMachineElements());
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}

	//Vertex:
	//	Initial | State | Final;
	public VertexElements getVertexAccess() {
		return (pVertex != null) ? pVertex : (pVertex = new VertexElements());
	}
	
	public ParserRule getVertexRule() {
		return getVertexAccess().getRule();
	}

	//Initial:
	//	name=ID;
	public InitialElements getInitialAccess() {
		return (pInitial != null) ? pInitial : (pInitial = new InitialElements());
	}
	
	public ParserRule getInitialRule() {
		return getInitialAccess().getRule();
	}

	//State:
	//	name=ID;
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Final:
	//	name=ID;
	public FinalElements getFinalAccess() {
		return (pFinal != null) ? pFinal : (pFinal = new FinalElements());
	}
	
	public ParserRule getFinalRule() {
		return getFinalAccess().getRule();
	}

	//VertexReference:
	//	name=ID;
	public VertexReferenceElements getVertexReferenceAccess() {
		return (pVertexReference != null) ? pVertexReference : (pVertexReference = new VertexReferenceElements());
	}
	
	public ParserRule getVertexReferenceRule() {
		return getVertexReferenceAccess().getRule();
	}

	//Transition:
	//	name=ID "from" source=VertexReference "to" target=VertexReference "{" (statements+=Statement (";"
	//	statements+=Statement)*)? "}";
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//Statement:
	//	Assignment | SendSignal | Delay | SignalReception | Expression;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Delay:
	//	"after" value=INT "ms";
	public DelayElements getDelayAccess() {
		return (pDelay != null) ? pDelay : (pDelay = new DelayElements());
	}
	
	public ParserRule getDelayRule() {
		return getDelayAccess().getRule();
	}

	//PortReference:
	//	name=ID;
	public PortReferenceElements getPortReferenceAccess() {
		return (pPortReference != null) ? pPortReference : (pPortReference = new PortReferenceElements());
	}
	
	public ParserRule getPortReferenceRule() {
		return getPortReferenceAccess().getRule();
	}

	//SignalReception:
	//	"receive" signalName=ID "(" (arguments+=SignalArgument ("," arguments+=SignalArgument)*)? ("|" condition=Expression)?
	//	")" "from" port=PortReference;
	public SignalReceptionElements getSignalReceptionAccess() {
		return (pSignalReception != null) ? pSignalReception : (pSignalReception = new SignalReceptionElements());
	}
	
	public ParserRule getSignalReceptionRule() {
		return getSignalReceptionAccess().getRule();
	}

	//SignalArgument:
	//	SignalArgumentVariable | SignalArgumentExpression;
	public SignalArgumentElements getSignalArgumentAccess() {
		return (pSignalArgument != null) ? pSignalArgument : (pSignalArgument = new SignalArgumentElements());
	}
	
	public ParserRule getSignalArgumentRule() {
		return getSignalArgumentAccess().getRule();
	}

	//SignalArgumentVariable:
	//	variable=VariableReference;
	public SignalArgumentVariableElements getSignalArgumentVariableAccess() {
		return (pSignalArgumentVariable != null) ? pSignalArgumentVariable : (pSignalArgumentVariable = new SignalArgumentVariableElements());
	}
	
	public ParserRule getSignalArgumentVariableRule() {
		return getSignalArgumentVariableAccess().getRule();
	}

	//SignalArgumentExpression:
	//	"[[" expression=Expression "]]";
	public SignalArgumentExpressionElements getSignalArgumentExpressionAccess() {
		return (pSignalArgumentExpression != null) ? pSignalArgumentExpression : (pSignalArgumentExpression = new SignalArgumentExpressionElements());
	}
	
	public ParserRule getSignalArgumentExpressionRule() {
		return getSignalArgumentExpressionAccess().getRule();
	}

	//Assignment:
	//	variable=VariableReference ":=" expression=Expression;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//SendSignal:
	//	"send" signalName=ID "(" (arguments+=Expression ("," arguments+=Expression)*)? ")" "to" port=PortReference;
	public SendSignalElements getSendSignalAccess() {
		return (pSendSignal != null) ? pSendSignal : (pSendSignal = new SendSignalElements());
	}
	
	public ParserRule getSendSignalRule() {
		return getSendSignalAccess().getRule();
	}

	//Object:
	//	name=ID ":" class=[Class];
	public ObjectElements getObjectAccess() {
		return (pObject != null) ? pObject : (pObject = new ObjectElements());
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}

	//Port:
	//	name=ID;
	public PortElements getPortAccess() {
		return (pPort != null) ? pPort : (pPort = new PortElements());
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}

	//Channel:
	//	UnidirectionalChannel | BidirectionalChannel;
	public ChannelElements getChannelAccess() {
		return (pChannel != null) ? pChannel : (pChannel = new ChannelElements());
	}
	
	public ParserRule getChannelRule() {
		return getChannelAccess().getRule();
	}

	//UnidirectionalChannel:
	//	name=ID "(" (argumentTypes+=ArgumentType ("," argumentTypes+=ArgumentType)*)? ")" channelType=ChannelType "from"
	//	sourceObject=[Object] "." sourcePort=PortReference "to" targetObject=[Object] "." targetPort=PortReference;
	public UnidirectionalChannelElements getUnidirectionalChannelAccess() {
		return (pUnidirectionalChannel != null) ? pUnidirectionalChannel : (pUnidirectionalChannel = new UnidirectionalChannelElements());
	}
	
	public ParserRule getUnidirectionalChannelRule() {
		return getUnidirectionalChannelAccess().getRule();
	}

	//BidirectionalChannel:
	//	name=ID "(" (argumentTypes+=ArgumentType ("," argumentTypes+=ArgumentType)*)? ")" channelType=ChannelType "between"
	//	object1=[Object] "." port1=PortReference "and" object2=[Object] "." port2=PortReference;
	public BidirectionalChannelElements getBidirectionalChannelAccess() {
		return (pBidirectionalChannel != null) ? pBidirectionalChannel : (pBidirectionalChannel = new BidirectionalChannelElements());
	}
	
	public ParserRule getBidirectionalChannelRule() {
		return getBidirectionalChannelAccess().getRule();
	}

	//ArgumentType:
	//	type=PrimitiveType;
	public ArgumentTypeElements getArgumentTypeAccess() {
		return (pArgumentType != null) ? pArgumentType : (pArgumentType = new ArgumentTypeElements());
	}
	
	public ParserRule getArgumentTypeRule() {
		return getArgumentTypeAccess().getRule();
	}

	//Variable:
	//	type=PrimitiveType name=ID ("=" intialValue=Expression)?;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//enum PrimitiveType:
	//	Integer | String | Boolean;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return (unknownRulePrimitiveType != null) ? unknownRulePrimitiveType : (unknownRulePrimitiveType = new PrimitiveTypeElements());
	}
	
	public EnumRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//enum ChannelType:
	//	Synchronous="sync" | AsynchronousLossless="async lossless" | AsynchronousLossy="async lossy";
	public ChannelTypeElements getChannelTypeAccess() {
		return (unknownRuleChannelType != null) ? unknownRuleChannelType : (unknownRuleChannelType = new ChannelTypeElements());
	}
	
	public EnumRule getChannelTypeRule() {
		return getChannelTypeAccess().getRule();
	}

	//Expression:
	//	TerminalExpression ({BinaryOperatorExpression.operand1=current} operator=Operator operand2=Expression)?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//TerminalExpression returns Expression:
	//	BooleanConstantExpression | IntegerConstantExpression | StringConstantExpression | VariableExpression |
	//	BracketExpression;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//enum Operator:
	//	atLeast=">=" | atMost="<=" | add="+" | and="&&" | or="||" | equals="==" | differs="!=" | subtract="-";
	public OperatorElements getOperatorAccess() {
		return (unknownRuleOperator != null) ? unknownRuleOperator : (unknownRuleOperator = new OperatorElements());
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//BooleanConstantExpression:
	//	value=BOOLEAN;
	public BooleanConstantExpressionElements getBooleanConstantExpressionAccess() {
		return (pBooleanConstantExpression != null) ? pBooleanConstantExpression : (pBooleanConstantExpression = new BooleanConstantExpressionElements());
	}
	
	public ParserRule getBooleanConstantExpressionRule() {
		return getBooleanConstantExpressionAccess().getRule();
	}

	//IntegerConstantExpression:
	//	value=INT;
	public IntegerConstantExpressionElements getIntegerConstantExpressionAccess() {
		return (pIntegerConstantExpression != null) ? pIntegerConstantExpression : (pIntegerConstantExpression = new IntegerConstantExpressionElements());
	}
	
	public ParserRule getIntegerConstantExpressionRule() {
		return getIntegerConstantExpressionAccess().getRule();
	}

	//StringConstantExpression:
	//	value=STRING;
	public StringConstantExpressionElements getStringConstantExpressionAccess() {
		return (pStringConstantExpression != null) ? pStringConstantExpression : (pStringConstantExpression = new StringConstantExpressionElements());
	}
	
	public ParserRule getStringConstantExpressionRule() {
		return getStringConstantExpressionAccess().getRule();
	}

	//VariableReference:
	//	name=ID;
	public VariableReferenceElements getVariableReferenceAccess() {
		return (pVariableReference != null) ? pVariableReference : (pVariableReference = new VariableReferenceElements());
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//VariableExpression:
	//	variable=VariableReference;
	public VariableExpressionElements getVariableExpressionAccess() {
		return (pVariableExpression != null) ? pVariableExpression : (pVariableExpression = new VariableExpressionElements());
	}
	
	public ParserRule getVariableExpressionRule() {
		return getVariableExpressionAccess().getRule();
	}

	//BracketExpression returns Expression:
	//	"(" Expression ")";
	public BracketExpressionElements getBracketExpressionAccess() {
		return (pBracketExpression != null) ? pBracketExpression : (pBracketExpression = new BracketExpressionElements());
	}
	
	public ParserRule getBracketExpressionRule() {
		return getBracketExpressionAccess().getRule();
	}

	//terminal BOOLEAN:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return (tBOOLEAN != null) ? tBOOLEAN : (tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
