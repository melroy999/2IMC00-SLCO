drawing
system

instances

process of class 'Single_as' in 0@0 to 50@50 name 'Right_as' at 5@5
connectors
  'Middle' at 0@0 name at 0@0
  'Sensor' at 0@0 name at 0@0
  'Motor' at 0@0 name at 0@0
scenarios
'normal'

process of class 'Single_as' in 0@0 to 50@50 name 'Left_as' at 5@5
connectors
  'Middle' at 0@0 name at 0@0
  'Sensor' at 0@0 name at 0@0
  'Motor' at 0@0 name at 0@0
scenarios
'normal'

process of class 'Middle_as' in 0@0 to 50@50 name 'Middle_as' at 5@5
connectors
  'Left' at 0@0 name at 0@0
  'Right' at 0@0 name at 0@0
  'Sensor' at 0@0 name at 0@0
  'Motor' at 0@0 name at 0@0
scenarios
'normal'

process of class 'Environment' in 0@0 to 50@50 name 'Environment' at 5@5
connectors
  'LeftSensor' at 0@0 name at 0@0
  'LeftMotor' at 0@0 name at 0@0
  'MiddleSensor' at 0@0 name at 0@0
  'MiddleMotor' at 0@0 name at 0@0
  'RightSensor' at 0@0 name at 0@0
  'RightMotor' at 0@0 name at 0@0
scenarios
'normal'

channels

name 'ELeftSensor_to_LSensor_as' at 0@0 message at 0@0 margin 50
nodes

segments
segment
  from socket 'LeftSensor' of instance 'Environment' to socket 'Sensor' of instance 'Left_as'

scenarios
  'normal'

name 'LMotor_to_ELeftMotor_as' at 0@0 message at 0@0 margin 50
nodes

segments
segment
  from socket 'Motor' of instance 'Left_as' to socket 'LeftMotor' of instance 'Environment'

scenarios
  'normal'

name 'ERightSensor_to_RSensor_as' at 0@0 message at 0@0 margin 50
nodes

segments
segment
  from socket 'RightSensor' of instance 'Environment' to socket 'Sensor' of instance 'Right_as'

scenarios
  'normal'

name 'RMotor_to_ERightMotor_as' at 0@0 message at 0@0 margin 50
nodes

segments
segment
  from socket 'Motor' of instance 'Right_as' to socket 'RightMotor' of instance 'Environment'

scenarios
  'normal'

name 'EMiddleSensor_to_MSensor_as' at 0@0 message at 0@0 margin 50
nodes

segments
segment
  from socket 'MiddleSensor' of instance 'Environment' to socket 'Sensor' of instance 'Middle_as'

scenarios
  'normal'

name 'MMotor_to_EMiddleMotor_as' at 0@0 message at 0@0 margin 50
nodes

segments
segment
  from socket 'Motor' of instance 'Middle_as' to socket 'MiddleMotor' of instance 'Environment'

scenarios
  'normal'

name 'RMiddle_to_MRight_as' at 0@0 message at 0@0 margin 50
nodes

segments
segment
  from socket 'Middle' of instance 'Right_as' to socket 'Right' of instance 'Middle_as'

scenarios
  'normal'

name 'LMiddle_to_MLeft_as' at 0@0 message at 0@0 margin 50
nodes

segments
segment
  from socket 'Middle' of instance 'Left_as' to socket 'Left' of instance 'Middle_as'

scenarios
  'normal'

scenarios
'all', 'normal'

poosl specification
'
/*==============*/
/*--------------*/
/* ProcessClass */
/*--------------*/
/*==============*/

process class Environment()
instance variables
  BlockLeft: Boolean,
  BlockRight: Boolean,
  EnvironmentMiddleMotorBlockFellOff: Boolean
communication channels
  LeftSensor,
  LeftMotor,
  MiddleSensor,
  MiddleMotor,
  RightSensor,
  RightMotor
message interface
  LeftMotor?On();
  MiddleMotor?Left();
  RightMotor?On();
  MiddleMotor?Left();
  LeftMotor?Off();
  MiddleSensor!Block();
  MiddleMotor?Off();
  RightMotor?On();
  MiddleMotor?Off();
  MiddleMotor?Right();
  MiddleSensor!BlockPassed();
  LeftMotor?On();
  MiddleSensor!BlockPassed();
  RightSensor!Block();
  LeftMotor?Off();
  MiddleMotor?Left();
  MiddleMotor?Right();
  LeftSensor!BlockPassed();
  RightSensor!BlockPassed();
  LeftMotor?On();
  MiddleMotor?Right();
  MiddleSensor!Block();
  RightMotor?Off();
  RightMotor?Off();
  MiddleMotor?Off();
  RightMotor?On();
  LeftSensor!Block()
initial method call
  Environment_initial()()
instance methods
/* ------ ProcessMethod ------ */
  RightMotor_Start()()
    |  |
    RightMotor?On();
    RightMotor_Running()()
  .
/* ------ ProcessMethod ------ */
  MiddleMotor_Off()()
    |  |
    sel
      MiddleMotor?Right();
      MiddleMotor_Right()()
    or
      MiddleMotor?Off();
      MiddleMotor_Off()()
    or
      MiddleMotor?Left();
      MiddleMotor_Left()()
    les
  .
/* ------ ProcessMethod ------ */
  LeftMotor_Start()()
    |  |
    LeftMotor?On();
    LeftMotor_Running()()
  .
/* ------ ProcessMethod ------ */
  RightMotor_Off()()
    |  |
    sel
      RightMotor?On();
      BlockRight := true;
      RightMotor_Running()()
    or
      RightMotor?Off();
      RightMotor_Off()()
    les
  .
/* ------ ProcessMethod ------ */
  RightMotor_Running()()
    |  |
    sel
      RightMotor?Off();
      RightMotor_Off()()
    or
      RightSensor!Block();
      RightSensor!BlockPassed();
      RightMotor_Running()()
    or
      RightMotor?On();
      RightMotor_Running()()
    les
  .
/* ------ ProcessMethod ------ */
  MiddleMotor_Right()()
    |  |
    sel
      MiddleMotor?Off();
      MiddleMotor_Off()()
    or
      [(BlockRight=true)]skip;
      EnvironmentMiddleMotorBlockFellOff := true;
      BlockRight := false;
      MiddleMotor_Right()()
    or
      MiddleMotor?Right();
      MiddleMotor_Right()()
    or
      MiddleMotor?Left();
      MiddleMotor_Left()()
    or
      [(BlockLeft=true)]skip;
      MiddleSensor!Block();
      MiddleSensor!BlockPassed();
      BlockLeft := false;
      MiddleMotor_Right()()
    les
  .
/* ------ ProcessMethod ------ */
  MiddleMotor_Left()()
    |  |
    sel
      MiddleMotor?Off();
      MiddleMotor_Off()()
    or
      [(BlockLeft=true)]skip;
      EnvironmentMiddleMotorBlockFellOff := true;
      BlockLeft := false;
      MiddleMotor_Left()()
    or
      MiddleMotor?Left();
      MiddleMotor_Left()()
    or
      MiddleMotor?Right();
      MiddleMotor_Right()()
    or
      [(BlockRight=true)]skip;
      MiddleSensor!Block();
      MiddleSensor!BlockPassed();
      BlockRight := false;
      MiddleMotor_Left()()
    les
  .
/* ------ ProcessMethod ------ */
  LeftMotor_Off()()
    |  |
    sel
      LeftMotor?On();
      BlockLeft := true;
      LeftMotor_Running()()
    or
      LeftMotor?Off();
      LeftMotor_Off()()
    les
  .
/* ------ ProcessMethod ------ */
  LeftMotor_Running()()
    |  |
    sel
      LeftMotor?Off();
      LeftMotor_Off()()
    or
      LeftSensor!Block();
      LeftSensor!BlockPassed();
      LeftMotor_Running()()
    or
      LeftMotor?On();
      LeftMotor_Running()()
    les
  .
/* ------ ProcessMethod ------ */
  Environment_initial()()
    |  |
    BlockLeft := false;
    BlockRight := false;
    EnvironmentMiddleMotorBlockFellOff := false;
    par
      RightMotor_Start()()
    and
      MiddleMotor_Off()()
    and
      LeftMotor_Start()()
    rap
  .

/*==============*/
/*--------------*/
/* ProcessClass */
/*--------------*/
/*==============*/

process class Single_as()
instance variables

communication channels
  Middle,
  Sensor,
  Motor
message interface
  Sensor?BlockPassed();
  Middle!Signal(Object);
  Motor!On();
  Middle?Signal(String);
  Motor!Off();
  Motor!On();
  Sensor?Block()
initial method call
  Single_as_initial()()
instance methods
/* ------ ProcessMethod ------ */
  Single_Start()()
    |  |
    Motor!On();
    Single_Running()()
  .
/* ------ ProcessMethod ------ */
  Single_Running()()
    |   var_3: String |
    Sensor?Block();
    Sensor?BlockPassed();
    Motor!Off();
    Middle!Signal("Send_Block");
    Middle?Signal(var_3|(var_3="Acknowledge_Block"));
    Motor!On();
    Single_Running()()
  .
/* ------ ProcessMethod ------ */
  Single_as_initial()()
    |  |
    Single_Start()()
  .

/*==============*/
/*--------------*/
/* ProcessClass */
/*--------------*/
/*==============*/

process class Middle_as()
instance variables

communication channels
  Left,
  Right,
  Sensor,
  Motor
message interface
  Motor!Off();
  Sensor?BlockPassed();
  Left!Signal(Object);
  Right!Signal(Object);
  Right?Signal(String);
  Sensor?Block();
  Motor!Right();
  Motor!Left();
  Left?Signal(String)
initial method call
  Middle_as_initial()()
instance methods
/* ------ ProcessMethod ------ */
  Middle_Idle()()
    |   var_19: String,  var_16: String |
    sel
      Left?Signal(var_19|(var_19="Send_Block"));
      Left!Signal("Acknowledge_Block");
      Motor!Right();
      Middle_Running()()
    or
      Right?Signal(var_16|(var_16="Send_Block"));
      Right!Signal("Acknowledge_Block");
      Motor!Left();
      Middle_Running()()
    les
  .
/* ------ ProcessMethod ------ */
  Middle_Running()()
    |  |
    Sensor?Block();
    Sensor?BlockPassed();
    Motor!Off();
    Middle_Idle()()
  .
/* ------ ProcessMethod ------ */
  Middle_as_initial()()
    |  |
    Middle_Idle()()
  .


cluster class aClass()

communication channels

message interface

behaviour specification
  (
   Right_as: Single_as[
     RMotor_to_ERightMotor_as/Motor,
     RMiddle_to_MRight_as/Middle,
     ERightSensor_to_RSensor_as/Sensor
   ]
  ||
   Left_as: Single_as[
     LMotor_to_ELeftMotor_as/Motor,
     LMiddle_to_MLeft_as/Middle,
     ELeftSensor_to_LSensor_as/Sensor
   ]
  ||
   Middle_as: Middle_as[
     MMotor_to_EMiddleMotor_as/Motor,
     EMiddleSensor_to_MSensor_as/Sensor,
     RMiddle_to_MRight_as/Right,
     LMiddle_to_MLeft_as/Left
   ]
  ||
   Environment: Environment[
     ELeftSensor_to_LSensor_as/LeftSensor,
     ERightSensor_to_RSensor_as/RightSensor,
     EMiddleSensor_to_MSensor_as/MiddleSensor,
     LMotor_to_ELeftMotor_as/LeftMotor,
     RMotor_to_ERightMotor_as/RightMotor,
     MMotor_to_EMiddleMotor_as/MiddleMotor
   ]
  )
  \
  {ELeftSensor_to_LSensor_as, LMotor_to_ELeftMotor_as, ERightSensor_to_RSensor_as, RMotor_to_ERightMotor_as, EMiddleSensor_to_MSensor_as, MMotor_to_EMiddleMotor_as, RMiddle_to_MRight_as, LMiddle_to_MLeft_as}
'
