<?xml version="1.0" encoding="ISO-8859-1"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:promela="promela">
  <promela:spec name="LegoCase_as_arg_uni_ll_time_uni">
    <mtypes name="Block"/>
    <mtypes name="BlockPassed"/>
    <mtypes name="On"/>
    <mtypes name="Off"/>
    <mtypes name="Signal"/>
    <mtypes name="Right"/>
    <mtypes name="Left"/>
    <mtypes name="Message"/>
    <mtypes name="Acknowledge"/>
    <mtypes name="Send_Block"/>
    <mtypes name="Acknowledge_Block"/>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.4">
      <ivars name="Environment_BlockLeft">
        <any_expr_or_ch_init xsi:type="promela:enum_const" const_enum="FALSE"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.4">
      <ivars name="Environment_BlockRight">
        <any_expr_or_ch_init xsi:type="promela:enum_const" const_enum="FALSE"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="ELeftSensor_to_LSensor_as__Environment_2_Left_as">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="LMotor_to_ELeftMotor_as__Left_as_2_Environment">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="ERightSensor_to_RSensor_as__Environment_2_Right_as">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="RMotor_to_ERightMotor_as__Right_as_2_Environment">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="EMiddleSensor_to_MSensor_as__Environment_2_Middle_as">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Right_as_Middle_out_Original_to_Sender__Right_as_2_Right_as_Middle_outABP_Sender">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2 /1"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Right_as_Middle_out_AR_to_Sender__Right_as_Middle_outABP_AR_2_Right_as_Middle_outABP_Sender">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Middle_as_Right_in_Receiver_to_Original__Middle_as_Right_inABP_Receiver_2_Middle_as">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2 /2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Middle_as_Right_in_Receiver_to_AS__Middle_as_Right_inABP_Receiver_2_Middle_as_Right_inABP_AS">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Right_as_Middle_out_Sender_to_Receiver__Right_as_Middle_outABP_Sender_2_Middle_as_Right_inABP_Receiver">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /3 /4"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Right_as_Middle_out_AS_to_AR__Middle_as_Right_inABP_AS_2_Right_as_Middle_outABP_AR">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /5"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Left_as_Middle_out_Original_to_Sender__Left_as_2_Left_as_Middle_outABP_Sender">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2 /6"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Left_as_Middle_out_AR_to_Sender__Left_as_Middle_outABP_AR_2_Left_as_Middle_outABP_Sender">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Middle_as_Left_in_Receiver_to_Original__Middle_as_Left_inABP_Receiver_2_Middle_as">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2 /7"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Middle_as_Left_in_Receiver_to_AS__Middle_as_Left_inABP_Receiver_2_Middle_as_Left_inABP_AS">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Left_as_Middle_out_Sender_to_Receiver__Left_as_Middle_outABP_Sender_2_Middle_as_Left_inABP_Receiver">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /8 /9"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Left_as_Middle_out_AS_to_AR__Middle_as_Left_inABP_AS_2_Left_as_Middle_outABP_AR">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /10"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Middle_as_Right_out_Original_to_Sender__Middle_as_2_Middle_as_Right_outABP_Sender">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2 /11"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Middle_as_Right_out_AR_to_Sender__Middle_as_Right_outABP_AR_2_Middle_as_Right_outABP_Sender">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Right_as_Middle_in_Receiver_to_Original__Right_as_Middle_inABP_Receiver_2_Right_as">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2 /12"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Right_as_Middle_in_Receiver_to_AS__Right_as_Middle_inABP_Receiver_2_Right_as_Middle_inABP_AS">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Middle_as_Right_out_Sender_to_Receiver__Middle_as_Right_outABP_Sender_2_Right_as_Middle_inABP_Receiver">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /13 /14"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Middle_as_Right_out_AS_to_AR__Right_as_Middle_inABP_AS_2_Middle_as_Right_outABP_AR">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /15"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Middle_as_Left_out_Original_to_Sender__Middle_as_2_Middle_as_Left_outABP_Sender">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2 /16"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Middle_as_Left_out_AR_to_Sender__Middle_as_Left_outABP_AR_2_Middle_as_Left_outABP_Sender">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Left_as_Middle_in_Receiver_to_Original__Left_as_Middle_inABP_Receiver_2_Left_as">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2 /17"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Left_as_Middle_in_Receiver_to_AS__Left_as_Middle_inABP_Receiver_2_Left_as_Middle_inABP_AS">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Middle_as_Left_out_Sender_to_Receiver__Middle_as_Left_outABP_Sender_2_Left_as_Middle_inABP_Receiver">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /18 /19"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="Middle_as_Left_out_AS_to_AR__Left_as_Middle_inABP_AS_2_Middle_as_Left_outABP_AR">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /20"/>
      </ivars>
    </one_decls>
    <proctypes active="1" name="Right_as_Single">
      <sequence xsi:type="promela:block_stmnt" label="Label_Start">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="RMotor_to_ERightMotor_as__Right_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.0/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Running">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="ERightSensor_to_RSensor_as__Environment_2_Right_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="ERightSensor_to_RSensor_as__Environment_2_Right_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="RMotor_to_ERightMotor_as__Right_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Right_as_Middle_out_Original_to_Sender__Right_as_2_Right_as_Middle_outABP_Sender"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.9"/>
              </sequence>
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Right_as_Middle_in_Receiver_to_Original__Right_as_Middle_inABP_Receiver_2_Right_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.10"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="RMotor_to_ERightMotor_as__Right_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.0/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Left_as_Single">
      <sequence xsi:type="promela:block_stmnt" label="Label_Start">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="LMotor_to_ELeftMotor_as__Left_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.1/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Running">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="ELeftSensor_to_LSensor_as__Environment_2_Left_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="ELeftSensor_to_LSensor_as__Environment_2_Left_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="LMotor_to_ELeftMotor_as__Left_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Left_as_Middle_out_Original_to_Sender__Left_as_2_Left_as_Middle_outABP_Sender"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.9"/>
              </sequence>
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Left_as_Middle_in_Receiver_to_Original__Left_as_Middle_inABP_Receiver_2_Left_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.10"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="LMotor_to_ELeftMotor_as__Left_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.1/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Middle_as_Middle">
      <sequence xsi:type="promela:block_stmnt" label="Label_Idle">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Middle_as_Left_in_Receiver_to_Original__Middle_as_Left_inABP_Receiver_2_Middle_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.9"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Middle_as_Left_out_Original_to_Sender__Middle_as_2_Middle_as_Left_outABP_Sender"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.10"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.5"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.2/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Middle_as_Right_in_Receiver_to_Original__Middle_as_Right_inABP_Receiver_2_Middle_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.9"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Middle_as_Right_out_Original_to_Sender__Middle_as_2_Middle_as_Right_outABP_Sender"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.10"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.6"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.2/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Running">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="EMiddleSensor_to_MSensor_as__Environment_2_Middle_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="EMiddleSensor_to_MSensor_as__Environment_2_Middle_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.2/@sequence.0"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Environment_RightMotor">
      <sequence xsi:type="promela:block_stmnt" label="Label_Start">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="RMotor_to_ERightMotor_as__Right_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Off">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="RMotor_to_ERightMotor_as__Right_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Environment_BlockRight"/>
                <any_expr xsi:type="promela:enum_const"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="RMotor_to_ERightMotor_as__Right_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Running">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="RMotor_to_ERightMotor_as__Right_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="ERightSensor_to_RSensor_as__Environment_2_Right_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="ERightSensor_to_RSensor_as__Environment_2_Right_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="RMotor_to_ERightMotor_as__Right_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Environment_MiddleMotor">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.4">
        <ivars name="Environment_BlockFellOff">
          <any_expr_or_ch_init xsi:type="promela:enum_const" const_enum="FALSE"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Off">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.5"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.6"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Right">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="Environment_BlockRight"/>
                <operand2 xsi:type="promela:enum_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Environment_BlockFellOff"/>
                <any_expr xsi:type="promela:enum_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Environment_BlockRight"/>
                <any_expr xsi:type="promela:enum_const" const_enum="FALSE"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.5"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.6"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.3"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="Environment_BlockLeft"/>
                <operand2 xsi:type="promela:enum_const"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="EMiddleSensor_to_MSensor_as__Environment_2_Middle_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="EMiddleSensor_to_MSensor_as__Environment_2_Middle_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Environment_BlockLeft"/>
                <any_expr xsi:type="promela:enum_const" const_enum="FALSE"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Left">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="Environment_BlockLeft"/>
                <operand2 xsi:type="promela:enum_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Environment_BlockFellOff"/>
                <any_expr xsi:type="promela:enum_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Environment_BlockLeft"/>
                <any_expr xsi:type="promela:enum_const" const_enum="FALSE"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.3"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.6"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.3"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.5"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="Environment_BlockRight"/>
                <operand2 xsi:type="promela:enum_const"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="EMiddleSensor_to_MSensor_as__Environment_2_Middle_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="EMiddleSensor_to_MSensor_as__Environment_2_Middle_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Environment_BlockRight"/>
                <any_expr xsi:type="promela:enum_const" const_enum="FALSE"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Environment_LeftMotor">
      <sequence xsi:type="promela:block_stmnt" label="Label_Start">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="LMotor_to_ELeftMotor_as__Left_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Off">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="LMotor_to_ELeftMotor_as__Left_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Environment_BlockLeft"/>
                <any_expr xsi:type="promela:enum_const"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="LMotor_to_ELeftMotor_as__Left_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Running">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="LMotor_to_ELeftMotor_as__Left_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="ELeftSensor_to_LSensor_as__Environment_2_Left_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="ELeftSensor_to_LSensor_as__Environment_2_Left_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="LMotor_to_ELeftMotor_as__Left_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Right_as_Middle_outABP_Sender_Sender">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="Right_as_Middle_outABP_Sender_s">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.2">
        <ivars name="Right_as_Middle_outABP_Sender_d"/>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Right_as_Middle_out_Original_to_Sender__Right_as_2_Right_as_Middle_outABP_Sender"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="Right_as_Middle_outABP_Sender_d"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.6/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_One">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Right_as_Middle_out_AR_to_Sender__Right_as_Middle_outABP_AR_2_Right_as_Middle_outABP_Sender"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Right_as_Middle_outABP_Sender_s"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="Right_as_Middle_outABP_Sender_s"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.6/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:enum_const" const_enum="SKIP"/>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Right_as_Middle_out_Sender_to_Receiver__Right_as_Middle_outABP_Sender_2_Middle_as_Right_inABP_Receiver"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.7"/>
                <send_args xsi:type="promela:varref" var_name="Right_as_Middle_outABP_Sender_d"/>
                <send_args xsi:type="promela:varref" var_name="Right_as_Middle_outABP_Sender_s"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.6/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Right_as_Middle_outABP_AR_AR">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="Right_as_Middle_outABP_AR_b">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Right_as_Middle_out_AS_to_AR__Middle_as_Right_inABP_AS_2_Right_as_Middle_outABP_AR"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:varref" var_name="Right_as_Middle_outABP_AR_b"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Right_as_Middle_out_AR_to_Sender__Right_as_Middle_outABP_AR_2_Right_as_Middle_outABP_Sender"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Right_as_Middle_outABP_AR_b"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="Right_as_Middle_outABP_AR_b"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.7/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Right_as_Middle_out_AS_to_AR__Middle_as_Right_inABP_AS_2_Right_as_Middle_outABP_AR"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:bin_expr" operator="MINUS">
                    <operand1 xsi:type="promela:num_const" number="1"/>
                    <operand2 xsi:type="promela:varref" var_name="Right_as_Middle_outABP_AR_b"/>
                  </expr>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.7/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Middle_as_Right_inABP_Receiver_Receiver">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="Middle_as_Right_inABP_Receiver_r">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.2">
        <ivars name="Middle_as_Right_inABP_Receiver_d"/>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Right_as_Middle_out_Sender_to_Receiver__Right_as_Middle_outABP_Sender_2_Middle_as_Right_inABP_Receiver"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.7"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="Middle_as_Right_inABP_Receiver_d"/>
                </recv_args>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:varref" var_name="Middle_as_Right_inABP_Receiver_r"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Middle_as_Right_in_Receiver_to_Original__Middle_as_Right_inABP_Receiver_2_Middle_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <send_args xsi:type="promela:varref" var_name="Middle_as_Right_inABP_Receiver_d"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Middle_as_Right_in_Receiver_to_AS__Middle_as_Right_inABP_Receiver_2_Middle_as_Right_inABP_AS"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Middle_as_Right_inABP_Receiver_r"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="Middle_as_Right_inABP_Receiver_r"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.8/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Right_as_Middle_out_Sender_to_Receiver__Right_as_Middle_outABP_Sender_2_Middle_as_Right_inABP_Receiver"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.7"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="Middle_as_Right_inABP_Receiver_d"/>
                </recv_args>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:bin_expr" operator="MINUS">
                    <operand1 xsi:type="promela:num_const" number="1"/>
                    <operand2 xsi:type="promela:varref" var_name="Middle_as_Right_inABP_Receiver_r"/>
                  </expr>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.8/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Middle_as_Right_inABP_AS_AS">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="Middle_as_Right_inABP_AS_b">
          <any_expr_or_ch_init xsi:type="promela:num_const" number="1"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Middle_as_Right_in_Receiver_to_AS__Middle_as_Right_inABP_Receiver_2_Middle_as_Right_inABP_AS"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Middle_as_Right_inABP_AS_b"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="Middle_as_Right_inABP_AS_b"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.9/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:enum_const" const_enum="SKIP"/>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Right_as_Middle_out_AS_to_AR__Middle_as_Right_inABP_AS_2_Right_as_Middle_outABP_AR"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
                <send_args xsi:type="promela:varref" var_name="Middle_as_Right_inABP_AS_b"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.9/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Left_as_Middle_outABP_Sender_Sender">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="Left_as_Middle_outABP_Sender_s">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.2">
        <ivars name="Left_as_Middle_outABP_Sender_d"/>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Left_as_Middle_out_Original_to_Sender__Left_as_2_Left_as_Middle_outABP_Sender"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="Left_as_Middle_outABP_Sender_d"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.10/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_One">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Left_as_Middle_out_AR_to_Sender__Left_as_Middle_outABP_AR_2_Left_as_Middle_outABP_Sender"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Left_as_Middle_outABP_Sender_s"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="Left_as_Middle_outABP_Sender_s"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.10/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:enum_const" const_enum="SKIP"/>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Left_as_Middle_out_Sender_to_Receiver__Left_as_Middle_outABP_Sender_2_Middle_as_Left_inABP_Receiver"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.7"/>
                <send_args xsi:type="promela:varref" var_name="Left_as_Middle_outABP_Sender_d"/>
                <send_args xsi:type="promela:varref" var_name="Left_as_Middle_outABP_Sender_s"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.10/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Left_as_Middle_outABP_AR_AR">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="Left_as_Middle_outABP_AR_b">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Left_as_Middle_out_AS_to_AR__Middle_as_Left_inABP_AS_2_Left_as_Middle_outABP_AR"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:varref" var_name="Left_as_Middle_outABP_AR_b"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Left_as_Middle_out_AR_to_Sender__Left_as_Middle_outABP_AR_2_Left_as_Middle_outABP_Sender"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Left_as_Middle_outABP_AR_b"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="Left_as_Middle_outABP_AR_b"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.11/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Left_as_Middle_out_AS_to_AR__Middle_as_Left_inABP_AS_2_Left_as_Middle_outABP_AR"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:bin_expr" operator="MINUS">
                    <operand1 xsi:type="promela:num_const" number="1"/>
                    <operand2 xsi:type="promela:varref" var_name="Left_as_Middle_outABP_AR_b"/>
                  </expr>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.11/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Middle_as_Left_inABP_Receiver_Receiver">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="Middle_as_Left_inABP_Receiver_r">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.2">
        <ivars name="Middle_as_Left_inABP_Receiver_d"/>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Left_as_Middle_out_Sender_to_Receiver__Left_as_Middle_outABP_Sender_2_Middle_as_Left_inABP_Receiver"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.7"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="Middle_as_Left_inABP_Receiver_d"/>
                </recv_args>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:varref" var_name="Middle_as_Left_inABP_Receiver_r"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Middle_as_Left_in_Receiver_to_Original__Middle_as_Left_inABP_Receiver_2_Middle_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <send_args xsi:type="promela:varref" var_name="Middle_as_Left_inABP_Receiver_d"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Middle_as_Left_in_Receiver_to_AS__Middle_as_Left_inABP_Receiver_2_Middle_as_Left_inABP_AS"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Middle_as_Left_inABP_Receiver_r"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="Middle_as_Left_inABP_Receiver_r"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.12/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Left_as_Middle_out_Sender_to_Receiver__Left_as_Middle_outABP_Sender_2_Middle_as_Left_inABP_Receiver"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.7"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="Middle_as_Left_inABP_Receiver_d"/>
                </recv_args>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:bin_expr" operator="MINUS">
                    <operand1 xsi:type="promela:num_const" number="1"/>
                    <operand2 xsi:type="promela:varref" var_name="Middle_as_Left_inABP_Receiver_r"/>
                  </expr>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.12/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Middle_as_Left_inABP_AS_AS">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="Middle_as_Left_inABP_AS_b">
          <any_expr_or_ch_init xsi:type="promela:num_const" number="1"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Middle_as_Left_in_Receiver_to_AS__Middle_as_Left_inABP_Receiver_2_Middle_as_Left_inABP_AS"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Middle_as_Left_inABP_AS_b"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="Middle_as_Left_inABP_AS_b"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.13/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:enum_const" const_enum="SKIP"/>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Left_as_Middle_out_AS_to_AR__Middle_as_Left_inABP_AS_2_Left_as_Middle_outABP_AR"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
                <send_args xsi:type="promela:varref" var_name="Middle_as_Left_inABP_AS_b"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.13/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Middle_as_Right_outABP_Sender_Sender">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="Middle_as_Right_outABP_Sender_s">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.2">
        <ivars name="Middle_as_Right_outABP_Sender_d"/>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Middle_as_Right_out_Original_to_Sender__Middle_as_2_Middle_as_Right_outABP_Sender"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="Middle_as_Right_outABP_Sender_d"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.14/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_One">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Middle_as_Right_out_AR_to_Sender__Middle_as_Right_outABP_AR_2_Middle_as_Right_outABP_Sender"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Middle_as_Right_outABP_Sender_s"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="Middle_as_Right_outABP_Sender_s"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.14/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:enum_const" const_enum="SKIP"/>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Middle_as_Right_out_Sender_to_Receiver__Middle_as_Right_outABP_Sender_2_Right_as_Middle_inABP_Receiver"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.7"/>
                <send_args xsi:type="promela:varref" var_name="Middle_as_Right_outABP_Sender_d"/>
                <send_args xsi:type="promela:varref" var_name="Middle_as_Right_outABP_Sender_s"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.14/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Middle_as_Right_outABP_AR_AR">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="Middle_as_Right_outABP_AR_b">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Middle_as_Right_out_AS_to_AR__Right_as_Middle_inABP_AS_2_Middle_as_Right_outABP_AR"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:varref" var_name="Middle_as_Right_outABP_AR_b"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Middle_as_Right_out_AR_to_Sender__Middle_as_Right_outABP_AR_2_Middle_as_Right_outABP_Sender"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Middle_as_Right_outABP_AR_b"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="Middle_as_Right_outABP_AR_b"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.15/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Middle_as_Right_out_AS_to_AR__Right_as_Middle_inABP_AS_2_Middle_as_Right_outABP_AR"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:bin_expr" operator="MINUS">
                    <operand1 xsi:type="promela:num_const" number="1"/>
                    <operand2 xsi:type="promela:varref" var_name="Middle_as_Right_outABP_AR_b"/>
                  </expr>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.15/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Right_as_Middle_inABP_Receiver_Receiver">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="Right_as_Middle_inABP_Receiver_r">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.2">
        <ivars name="Right_as_Middle_inABP_Receiver_d"/>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Middle_as_Right_out_Sender_to_Receiver__Middle_as_Right_outABP_Sender_2_Right_as_Middle_inABP_Receiver"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.7"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="Right_as_Middle_inABP_Receiver_d"/>
                </recv_args>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:varref" var_name="Right_as_Middle_inABP_Receiver_r"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Right_as_Middle_in_Receiver_to_Original__Right_as_Middle_inABP_Receiver_2_Right_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <send_args xsi:type="promela:varref" var_name="Right_as_Middle_inABP_Receiver_d"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Right_as_Middle_in_Receiver_to_AS__Right_as_Middle_inABP_Receiver_2_Right_as_Middle_inABP_AS"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Right_as_Middle_inABP_Receiver_r"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="Right_as_Middle_inABP_Receiver_r"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.16/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Middle_as_Right_out_Sender_to_Receiver__Middle_as_Right_outABP_Sender_2_Right_as_Middle_inABP_Receiver"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.7"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="Right_as_Middle_inABP_Receiver_d"/>
                </recv_args>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:bin_expr" operator="MINUS">
                    <operand1 xsi:type="promela:num_const" number="1"/>
                    <operand2 xsi:type="promela:varref" var_name="Right_as_Middle_inABP_Receiver_r"/>
                  </expr>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.16/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Right_as_Middle_inABP_AS_AS">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="Right_as_Middle_inABP_AS_b">
          <any_expr_or_ch_init xsi:type="promela:num_const" number="1"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Right_as_Middle_in_Receiver_to_AS__Right_as_Middle_inABP_Receiver_2_Right_as_Middle_inABP_AS"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Right_as_Middle_inABP_AS_b"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="Right_as_Middle_inABP_AS_b"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.17/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:enum_const" const_enum="SKIP"/>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Middle_as_Right_out_AS_to_AR__Right_as_Middle_inABP_AS_2_Middle_as_Right_outABP_AR"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
                <send_args xsi:type="promela:varref" var_name="Right_as_Middle_inABP_AS_b"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.17/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Middle_as_Left_outABP_Sender_Sender">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="Middle_as_Left_outABP_Sender_s">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.2">
        <ivars name="Middle_as_Left_outABP_Sender_d"/>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Middle_as_Left_out_Original_to_Sender__Middle_as_2_Middle_as_Left_outABP_Sender"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="Middle_as_Left_outABP_Sender_d"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.18/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_One">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Middle_as_Left_out_AR_to_Sender__Middle_as_Left_outABP_AR_2_Middle_as_Left_outABP_Sender"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Middle_as_Left_outABP_Sender_s"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="Middle_as_Left_outABP_Sender_s"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.18/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:enum_const" const_enum="SKIP"/>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Middle_as_Left_out_Sender_to_Receiver__Middle_as_Left_outABP_Sender_2_Left_as_Middle_inABP_Receiver"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.7"/>
                <send_args xsi:type="promela:varref" var_name="Middle_as_Left_outABP_Sender_d"/>
                <send_args xsi:type="promela:varref" var_name="Middle_as_Left_outABP_Sender_s"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.18/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Middle_as_Left_outABP_AR_AR">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="Middle_as_Left_outABP_AR_b">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Middle_as_Left_out_AS_to_AR__Left_as_Middle_inABP_AS_2_Middle_as_Left_outABP_AR"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:varref" var_name="Middle_as_Left_outABP_AR_b"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Middle_as_Left_out_AR_to_Sender__Middle_as_Left_outABP_AR_2_Middle_as_Left_outABP_Sender"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Middle_as_Left_outABP_AR_b"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="Middle_as_Left_outABP_AR_b"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.19/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Middle_as_Left_out_AS_to_AR__Left_as_Middle_inABP_AS_2_Middle_as_Left_outABP_AR"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:bin_expr" operator="MINUS">
                    <operand1 xsi:type="promela:num_const" number="1"/>
                    <operand2 xsi:type="promela:varref" var_name="Middle_as_Left_outABP_AR_b"/>
                  </expr>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.19/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Left_as_Middle_inABP_Receiver_Receiver">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="Left_as_Middle_inABP_Receiver_r">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.2">
        <ivars name="Left_as_Middle_inABP_Receiver_d"/>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Middle_as_Left_out_Sender_to_Receiver__Middle_as_Left_outABP_Sender_2_Left_as_Middle_inABP_Receiver"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.7"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="Left_as_Middle_inABP_Receiver_d"/>
                </recv_args>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:varref" var_name="Left_as_Middle_inABP_Receiver_r"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Left_as_Middle_in_Receiver_to_Original__Left_as_Middle_inABP_Receiver_2_Left_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <send_args xsi:type="promela:varref" var_name="Left_as_Middle_inABP_Receiver_d"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Left_as_Middle_in_Receiver_to_AS__Left_as_Middle_inABP_Receiver_2_Left_as_Middle_inABP_AS"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Left_as_Middle_inABP_Receiver_r"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="Left_as_Middle_inABP_Receiver_r"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.20/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Middle_as_Left_out_Sender_to_Receiver__Middle_as_Left_outABP_Sender_2_Left_as_Middle_inABP_Receiver"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.7"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="Left_as_Middle_inABP_Receiver_d"/>
                </recv_args>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:bin_expr" operator="MINUS">
                    <operand1 xsi:type="promela:num_const" number="1"/>
                    <operand2 xsi:type="promela:varref" var_name="Left_as_Middle_inABP_Receiver_r"/>
                  </expr>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.20/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Left_as_Middle_inABP_AS_AS">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="Left_as_Middle_inABP_AS_b">
          <any_expr_or_ch_init xsi:type="promela:num_const" number="1"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="Left_as_Middle_in_Receiver_to_AS__Left_as_Middle_inABP_Receiver_2_Left_as_Middle_inABP_AS"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Left_as_Middle_inABP_AS_b"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="Left_as_Middle_inABP_AS_b"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.21/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:enum_const" const_enum="SKIP"/>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="Middle_as_Left_out_AS_to_AR__Left_as_Middle_inABP_AS_2_Middle_as_Left_outABP_AR"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
                <send_args xsi:type="promela:varref" var_name="Left_as_Middle_inABP_AS_b"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.21/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <primitivetypes primitivetype="CHAN"/>
    <primitivetypes primitivetype="BYTE"/>
    <primitivetypes primitivetype="MTYPE"/>
    <primitivetypes primitivetype="INT"/>
    <primitivetypes primitivetype="BOOL"/>
  </promela:spec>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="INT"/>
  <promela:primitivetype primitivetype="INT"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="INT"/>
  <promela:primitivetype primitivetype="INT"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="INT"/>
  <promela:primitivetype primitivetype="INT"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="INT"/>
  <promela:primitivetype primitivetype="INT"/>
</xmi:XMI>
