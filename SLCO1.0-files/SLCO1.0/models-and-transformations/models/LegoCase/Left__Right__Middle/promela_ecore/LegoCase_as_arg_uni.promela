<?xml version="1.0" encoding="ISO-8859-1"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:promela="promela">
  <promela:spec name="LegoCase_as_arg_uni">
    <mtypes name="Block"/>
    <mtypes name="BlockPassed"/>
    <mtypes name="On"/>
    <mtypes name="Off"/>
    <mtypes name="Signal"/>
    <mtypes name="Right"/>
    <mtypes name="Left"/>
    <mtypes name="Send_Block"/>
    <mtypes name="Acknowledge_Block"/>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.4">
      <ivars name="Environment_BlockLeft">
        <any_expr_or_ch_init xsi:type="promela:enum_const" const_enum="FALSE"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.4">
      <ivars name="Environment_BlockRight">
        <any_expr_or_ch_init xsi:type="promela:enum_const" const_enum="FALSE"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="ELeftSensor_to_LSensor_as__Environment_2_Left_as">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="LMotor_to_ELeftMotor_as__Left_as_2_Environment">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="ERightSensor_to_RSensor_as__Environment_2_Right_as">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="RMotor_to_ERightMotor_as__Right_as_2_Environment">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="EMiddleSensor_to_MSensor_as__Environment_2_Middle_as">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="RMiddle_to_MRight_as_1_to_2__Right_as_2_Middle_as">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /1"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="LMiddle_to_MLeft_as_1_to_2__Left_as_2_Middle_as">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="RMiddle_to_MRight_as_2_to_1__Middle_as_2_Right_as">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /3"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="LMiddle_to_MLeft_as_2_to_1__Middle_as_2_Left_as">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /4"/>
      </ivars>
    </one_decls>
    <proctypes active="1" name="Right_as_Single">
      <sequence xsi:type="promela:block_stmnt" label="Label_Start">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="RMotor_to_ERightMotor_as__Right_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.0/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Running">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="ERightSensor_to_RSensor_as__Environment_2_Right_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="ERightSensor_to_RSensor_as__Environment_2_Right_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="RMotor_to_ERightMotor_as__Right_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="RMiddle_to_MRight_as_1_to_2__Right_as_2_Middle_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.7"/>
              </sequence>
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="RMiddle_to_MRight_as_2_to_1__Middle_as_2_Right_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="RMotor_to_ERightMotor_as__Right_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.0/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Left_as_Single">
      <sequence xsi:type="promela:block_stmnt" label="Label_Start">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="LMotor_to_ELeftMotor_as__Left_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.1/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Running">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="ELeftSensor_to_LSensor_as__Environment_2_Left_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="ELeftSensor_to_LSensor_as__Environment_2_Left_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="LMotor_to_ELeftMotor_as__Left_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="LMiddle_to_MLeft_as_1_to_2__Left_as_2_Middle_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.7"/>
              </sequence>
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="LMiddle_to_MLeft_as_2_to_1__Middle_as_2_Left_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="LMotor_to_ELeftMotor_as__Left_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.1/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Middle_as_Middle">
      <sequence xsi:type="promela:block_stmnt" label="Label_Idle">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="LMiddle_to_MLeft_as_1_to_2__Left_as_2_Middle_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.7"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="LMiddle_to_MLeft_as_2_to_1__Middle_as_2_Left_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.5"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.2/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="RMiddle_to_MRight_as_1_to_2__Right_as_2_Middle_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.7"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="RMiddle_to_MRight_as_2_to_1__Middle_as_2_Right_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.8"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.6"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.2/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Running">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="EMiddleSensor_to_MSensor_as__Environment_2_Middle_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="EMiddleSensor_to_MSensor_as__Environment_2_Middle_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.2/@sequence.0"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Environment_RightMotor">
      <sequence xsi:type="promela:block_stmnt" label="Label_Start">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="RMotor_to_ERightMotor_as__Right_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Off">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="RMotor_to_ERightMotor_as__Right_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Environment_BlockRight"/>
                <any_expr xsi:type="promela:enum_const"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="RMotor_to_ERightMotor_as__Right_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Running">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="RMotor_to_ERightMotor_as__Right_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="ERightSensor_to_RSensor_as__Environment_2_Right_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="ERightSensor_to_RSensor_as__Environment_2_Right_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="RMotor_to_ERightMotor_as__Right_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Environment_MiddleMotor">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.4">
        <ivars name="Environment_BlockFellOff">
          <any_expr_or_ch_init xsi:type="promela:enum_const" const_enum="FALSE"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Off">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.5"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.6"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Right">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="Environment_BlockRight"/>
                <operand2 xsi:type="promela:enum_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Environment_BlockFellOff"/>
                <any_expr xsi:type="promela:enum_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Environment_BlockRight"/>
                <any_expr xsi:type="promela:enum_const" const_enum="FALSE"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.5"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.6"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.3"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="Environment_BlockLeft"/>
                <operand2 xsi:type="promela:enum_const"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="EMiddleSensor_to_MSensor_as__Environment_2_Middle_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="EMiddleSensor_to_MSensor_as__Environment_2_Middle_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Environment_BlockLeft"/>
                <any_expr xsi:type="promela:enum_const" const_enum="FALSE"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Left">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="Environment_BlockLeft"/>
                <operand2 xsi:type="promela:enum_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Environment_BlockFellOff"/>
                <any_expr xsi:type="promela:enum_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Environment_BlockLeft"/>
                <any_expr xsi:type="promela:enum_const" const_enum="FALSE"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.3"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.6"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.3"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="MMotor_to_EMiddleMotor_as__Middle_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.5"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="Environment_BlockRight"/>
                <operand2 xsi:type="promela:enum_const"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="EMiddleSensor_to_MSensor_as__Environment_2_Middle_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="EMiddleSensor_to_MSensor_as__Environment_2_Middle_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Environment_BlockRight"/>
                <any_expr xsi:type="promela:enum_const" const_enum="FALSE"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="Environment_LeftMotor">
      <sequence xsi:type="promela:block_stmnt" label="Label_Start">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="LMotor_to_ELeftMotor_as__Left_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Off">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="LMotor_to_ELeftMotor_as__Left_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="Environment_BlockLeft"/>
                <any_expr xsi:type="promela:enum_const"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="LMotor_to_ELeftMotor_as__Left_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Running">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="LMotor_to_ELeftMotor_as__Left_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="ELeftSensor_to_LSensor_as__Environment_2_Left_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="ELeftSensor_to_LSensor_as__Environment_2_Left_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="LMotor_to_ELeftMotor_as__Left_as_2_Environment"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <primitivetypes primitivetype="CHAN"/>
    <primitivetypes primitivetype="BYTE"/>
    <primitivetypes primitivetype="MTYPE"/>
    <primitivetypes primitivetype="INT"/>
    <primitivetypes primitivetype="BOOL"/>
  </promela:spec>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="MTYPE"/>
</xmi:XMI>
