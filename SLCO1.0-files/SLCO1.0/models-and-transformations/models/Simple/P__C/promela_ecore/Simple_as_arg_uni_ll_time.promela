<?xml version="1.0" encoding="ISO-8859-1"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:promela="promela">
  <promela:spec name="Simple_as_arg_uni_ll_time">
    <mtypes name="Signal"/>
    <mtypes name="Message"/>
    <mtypes name="Acknowledge"/>
    <mtypes name="Send_Bericht"/>
    <mtypes name="Acknowledge_Bericht"/>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="P_as_C_out_Original_to_Sender__P_as_2_P_as_C_outABP_Sender">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2 /1"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="P_as_C_out_AR_to_Sender__P_as_C_outABP_AR_2_P_as_C_outABP_Sender">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="C_as_P_in_Receiver_to_Original__C_as_P_inABP_Receiver_2_C_as">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2 /2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="C_as_P_in_Receiver_to_AS__C_as_P_inABP_Receiver_2_C_as_P_inABP_AS">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="P_as_C_out_Sender_to_Receiver__P_as_C_outABP_Sender_2_C_as_P_inABP_Receiver">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /3 /4"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="P_as_C_out_AS_to_AR__C_as_P_inABP_AS_2_P_as_C_outABP_AR">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /5"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="C_as_P_out_Original_to_Sender__C_as_2_C_as_P_outABP_Sender">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2 /6"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="C_as_P_out_AR_to_Sender__C_as_P_outABP_AR_2_C_as_P_outABP_Sender">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="P_as_C_in_Receiver_to_Original__P_as_C_inABP_Receiver_2_P_as">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2 /7"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="P_as_C_in_Receiver_to_AS__P_as_C_inABP_Receiver_2_P_as_C_inABP_AS">
        <any_expr_or_ch_init xsi:type="promela:ch_init" typenames="/0/@primitivetypes.2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="C_as_P_out_Sender_to_Receiver__C_as_P_outABP_Sender_2_P_as_C_inABP_Receiver">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /8 /9"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="C_as_P_out_AS_to_AR__P_as_C_inABP_AS_2_C_as_P_outABP_AR">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /10"/>
      </ivars>
    </one_decls>
    <proctypes active="1" name="P_as_Producer">
      <sequence xsi:type="promela:block_stmnt" label="Label_State">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="P_as_C_out_Original_to_Sender__P_as_2_P_as_C_outABP_Sender"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="P_as_C_in_Receiver_to_Original__P_as_C_inABP_Receiver_2_P_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.0/@sequence.0"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="C_as_Consumer">
      <sequence xsi:type="promela:block_stmnt" label="Label_State">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="C_as_P_in_Receiver_to_Original__C_as_P_inABP_Receiver_2_C_as"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="C_as_P_out_Original_to_Sender__C_as_2_C_as_P_outABP_Sender"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.1/@sequence.0"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="P_as_C_outABP_Sender_Sender">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="P_as_C_outABP_Sender_s">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.2">
        <ivars name="P_as_C_outABP_Sender_d"/>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="P_as_C_out_Original_to_Sender__P_as_2_P_as_C_outABP_Sender"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="P_as_C_outABP_Sender_d"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.2/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_One">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="P_as_C_out_AR_to_Sender__P_as_C_outABP_AR_2_P_as_C_outABP_Sender"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_as_C_outABP_Sender_s"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="P_as_C_outABP_Sender_s"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.2/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:enum_const" const_enum="SKIP"/>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="P_as_C_out_Sender_to_Receiver__P_as_C_outABP_Sender_2_C_as_P_inABP_Receiver"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
                <send_args xsi:type="promela:varref" var_name="P_as_C_outABP_Sender_d"/>
                <send_args xsi:type="promela:varref" var_name="P_as_C_outABP_Sender_s"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.2/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="P_as_C_outABP_AR_AR">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="P_as_C_outABP_AR_b">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="P_as_C_out_AS_to_AR__C_as_P_inABP_AS_2_P_as_C_outABP_AR"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:varref" var_name="P_as_C_outABP_AR_b"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="P_as_C_out_AR_to_Sender__P_as_C_outABP_AR_2_P_as_C_outABP_Sender"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_as_C_outABP_AR_b"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="P_as_C_outABP_AR_b"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="P_as_C_out_AS_to_AR__C_as_P_inABP_AS_2_P_as_C_outABP_AR"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:bin_expr" operator="MINUS">
                    <operand1 xsi:type="promela:num_const" number="1"/>
                    <operand2 xsi:type="promela:varref" var_name="P_as_C_outABP_AR_b"/>
                  </expr>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="C_as_P_inABP_Receiver_Receiver">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="C_as_P_inABP_Receiver_r">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.2">
        <ivars name="C_as_P_inABP_Receiver_d"/>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="P_as_C_out_Sender_to_Receiver__P_as_C_outABP_Sender_2_C_as_P_inABP_Receiver"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="C_as_P_inABP_Receiver_d"/>
                </recv_args>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:varref" var_name="C_as_P_inABP_Receiver_r"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="C_as_P_in_Receiver_to_Original__C_as_P_inABP_Receiver_2_C_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                <send_args xsi:type="promela:varref" var_name="C_as_P_inABP_Receiver_d"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="C_as_P_in_Receiver_to_AS__C_as_P_inABP_Receiver_2_C_as_P_inABP_AS"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_as_P_inABP_Receiver_r"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="C_as_P_inABP_Receiver_r"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="P_as_C_out_Sender_to_Receiver__P_as_C_outABP_Sender_2_C_as_P_inABP_Receiver"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="C_as_P_inABP_Receiver_d"/>
                </recv_args>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:bin_expr" operator="MINUS">
                    <operand1 xsi:type="promela:num_const" number="1"/>
                    <operand2 xsi:type="promela:varref" var_name="C_as_P_inABP_Receiver_r"/>
                  </expr>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="C_as_P_inABP_AS_AS">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="C_as_P_inABP_AS_b">
          <any_expr_or_ch_init xsi:type="promela:num_const" number="1"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="C_as_P_in_Receiver_to_AS__C_as_P_inABP_Receiver_2_C_as_P_inABP_AS"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_as_P_inABP_AS_b"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="C_as_P_inABP_AS_b"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:enum_const" const_enum="SKIP"/>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="P_as_C_out_AS_to_AR__C_as_P_inABP_AS_2_P_as_C_outABP_AR"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
                <send_args xsi:type="promela:varref" var_name="C_as_P_inABP_AS_b"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="C_as_P_outABP_Sender_Sender">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="C_as_P_outABP_Sender_s">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.2">
        <ivars name="C_as_P_outABP_Sender_d"/>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="C_as_P_out_Original_to_Sender__C_as_2_C_as_P_outABP_Sender"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="C_as_P_outABP_Sender_d"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.6/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_One">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="C_as_P_out_AR_to_Sender__C_as_P_outABP_AR_2_C_as_P_outABP_Sender"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_as_P_outABP_Sender_s"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="C_as_P_outABP_Sender_s"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.6/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:enum_const" const_enum="SKIP"/>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="C_as_P_out_Sender_to_Receiver__C_as_P_outABP_Sender_2_P_as_C_inABP_Receiver"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
                <send_args xsi:type="promela:varref" var_name="C_as_P_outABP_Sender_d"/>
                <send_args xsi:type="promela:varref" var_name="C_as_P_outABP_Sender_s"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.6/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="C_as_P_outABP_AR_AR">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="C_as_P_outABP_AR_b">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="C_as_P_out_AS_to_AR__P_as_C_inABP_AS_2_C_as_P_outABP_AR"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:varref" var_name="C_as_P_outABP_AR_b"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="C_as_P_out_AR_to_Sender__C_as_P_outABP_AR_2_C_as_P_outABP_Sender"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_as_P_outABP_AR_b"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="C_as_P_outABP_AR_b"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.7/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="C_as_P_out_AS_to_AR__P_as_C_inABP_AS_2_C_as_P_outABP_AR"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:bin_expr" operator="MINUS">
                    <operand1 xsi:type="promela:num_const" number="1"/>
                    <operand2 xsi:type="promela:varref" var_name="C_as_P_outABP_AR_b"/>
                  </expr>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.7/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="P_as_C_inABP_Receiver_Receiver">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="P_as_C_inABP_Receiver_r">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.2">
        <ivars name="P_as_C_inABP_Receiver_d"/>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="C_as_P_out_Sender_to_Receiver__C_as_P_outABP_Sender_2_P_as_C_inABP_Receiver"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="P_as_C_inABP_Receiver_d"/>
                </recv_args>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:varref" var_name="P_as_C_inABP_Receiver_r"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="P_as_C_in_Receiver_to_Original__P_as_C_inABP_Receiver_2_P_as"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                <send_args xsi:type="promela:varref" var_name="P_as_C_inABP_Receiver_d"/>
              </sequence>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="P_as_C_in_Receiver_to_AS__P_as_C_inABP_Receiver_2_P_as_C_inABP_AS"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_as_C_inABP_Receiver_r"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="P_as_C_inABP_Receiver_r"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.8/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="C_as_P_out_Sender_to_Receiver__C_as_P_outABP_Sender_2_P_as_C_inABP_Receiver"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="P_as_C_inABP_Receiver_d"/>
                </recv_args>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:bin_expr" operator="MINUS">
                    <operand1 xsi:type="promela:num_const" number="1"/>
                    <operand2 xsi:type="promela:varref" var_name="P_as_C_inABP_Receiver_r"/>
                  </expr>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.8/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="P_as_C_inABP_AS_AS">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="P_as_C_inABP_AS_b">
          <any_expr_or_ch_init xsi:type="promela:num_const" number="1"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="P_as_C_in_Receiver_to_AS__P_as_C_inABP_Receiver_2_P_as_C_inABP_AS"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_as_C_inABP_AS_b"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="P_as_C_inABP_AS_b"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.9/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:enum_const" const_enum="SKIP"/>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="C_as_P_out_AS_to_AR__P_as_C_inABP_AS_2_C_as_P_outABP_AR"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
                <send_args xsi:type="promela:varref" var_name="P_as_C_inABP_AS_b"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.9/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <primitivetypes primitivetype="CHAN"/>
    <primitivetypes primitivetype="BYTE"/>
    <primitivetypes primitivetype="MTYPE"/>
    <primitivetypes primitivetype="INT"/>
    <primitivetypes primitivetype="BOOL"/>
  </promela:spec>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="INT"/>
  <promela:primitivetype primitivetype="INT"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="INT"/>
  <promela:primitivetype primitivetype="INT"/>
</xmi:XMI>
