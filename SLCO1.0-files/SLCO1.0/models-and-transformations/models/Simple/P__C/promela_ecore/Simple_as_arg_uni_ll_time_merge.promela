<?xml version="1.0" encoding="ISO-8859-1"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:promela="promela">
  <promela:spec name="Simple_as_arg_uni_ll_time_merge">
    <mtypes name="Acknowledge"/>
    <mtypes name="Message"/>
    <mtypes name="Signal"/>
    <mtypes name="Send_Bericht"/>
    <mtypes name="Acknowledge_Bericht"/>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.3">
      <ivars name="C_C_C_C_C_C_as_P_out_Original_to_Sender_abl">
        <any_expr_or_ch_init xsi:type="promela:num_const"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.2">
      <ivars name="C_C_C_C_C_C_as_P_out_Original_to_Sender_name"/>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.2">
      <ivars name="C_C_C_C_C_C_as_P_out_Original_to_Sender_arg_0"/>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.3">
      <ivars name="C_C_C_C_C_C_as_P_in_Receiver_to_Original_abl">
        <any_expr_or_ch_init xsi:type="promela:num_const"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.2">
      <ivars name="C_C_C_C_C_C_as_P_in_Receiver_to_Original_name"/>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.2">
      <ivars name="C_C_C_C_C_C_as_P_in_Receiver_to_Original_arg_0"/>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.3">
      <ivars name="C_C_C_C_C_C_as_P_in_Receiver_to_AS_abl">
        <any_expr_or_ch_init xsi:type="promela:num_const"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.2">
      <ivars name="C_C_C_C_C_C_as_P_in_Receiver_to_AS_name"/>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.3">
      <ivars name="C_C_C_C_C_C_as_P_out_AR_to_Sender_abl">
        <any_expr_or_ch_init xsi:type="promela:num_const"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.2">
      <ivars name="C_C_C_C_C_C_as_P_out_AR_to_Sender_name"/>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.3">
      <ivars name="P_P_P_P_P_P_as_C_out_Original_to_Sender_abl">
        <any_expr_or_ch_init xsi:type="promela:num_const"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.2">
      <ivars name="P_P_P_P_P_P_as_C_out_Original_to_Sender_name"/>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.2">
      <ivars name="P_P_P_P_P_P_as_C_out_Original_to_Sender_arg_0"/>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.3">
      <ivars name="P_P_P_P_P_P_as_C_out_AR_to_Sender_abl">
        <any_expr_or_ch_init xsi:type="promela:num_const"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.2">
      <ivars name="P_P_P_P_P_P_as_C_out_AR_to_Sender_name"/>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.3">
      <ivars name="P_P_P_P_P_P_as_C_in_Receiver_to_Original_abl">
        <any_expr_or_ch_init xsi:type="promela:num_const"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.2">
      <ivars name="P_P_P_P_P_P_as_C_in_Receiver_to_Original_name"/>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.2">
      <ivars name="P_P_P_P_P_P_as_C_in_Receiver_to_Original_arg_0"/>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.3">
      <ivars name="P_P_P_P_P_P_as_C_in_Receiver_to_AS_abl">
        <any_expr_or_ch_init xsi:type="promela:num_const"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.2">
      <ivars name="P_P_P_P_P_P_as_C_in_Receiver_to_AS_name"/>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="P_as_C_out_Sender_to_Receiver__P_P_P_P_P_2_C_C_C_C_C">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /1 /2"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="P_as_C_out_AS_to_AR__C_C_C_C_C_2_P_P_P_P_P">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /3"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="C_as_P_out_Sender_to_Receiver__C_C_C_C_C_2_P_P_P_P_P">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /4 /5"/>
      </ivars>
    </one_decls>
    <one_decls visible="SHOW" typename="/0/@primitivetypes.0">
      <ivars name="C_as_P_out_AS_to_AR__P_P_P_P_P_2_C_C_C_C_C">
        <any_expr_or_ch_init xsi:type="promela:ch_init" constant="1" typenames="/0/@primitivetypes.2 /6"/>
      </ivars>
    </one_decls>
    <proctypes active="1" name="C_C_C_C_C_C_as_Consumer">
      <sequence xsi:type="promela:block_stmnt" label="Label_State">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="AND">
                <operand1 xsi:type="promela:bin_expr" operator="AND">
                  <operand1 xsi:type="promela:bin_expr" operator="EQUALS">
                    <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_in_Receiver_to_Original_abl"/>
                    <operand2 xsi:type="promela:num_const" number="1"/>
                  </operand1>
                  <operand2 xsi:type="promela:bin_expr" operator="EQUALS">
                    <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_in_Receiver_to_Original_name"/>
                    <operand2 xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
                  </operand2>
                </operand1>
                <operand2 xsi:type="promela:bin_expr" operator="EQUALS">
                  <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_in_Receiver_to_Original_arg_0"/>
                  <operand2 xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
                </operand2>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_in_Receiver_to_Original_abl"/>
                <any_expr xsi:type="promela:num_const" number="2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.0/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_State_r_Signal_rbl_StateToState">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_in_Receiver_to_Original_abl"/>
                <operand2 xsi:type="promela:num_const" number="3"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_in_Receiver_to_Original_abl"/>
                <any_expr xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_out_Original_to_Sender_name"/>
                <any_expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_out_Original_to_Sender_arg_0"/>
                <any_expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_out_Original_to_Sender_abl"/>
                <any_expr xsi:type="promela:num_const" number="1"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.0/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_in_Receiver_to_Original_abl"/>
                <operand2 xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.0/@sequence.0"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_State_r_Signal_rbl_StateToState_s_Signal_abl_State_r_Signal_rbl_StateToState_to_State">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_out_Original_to_Sender_abl"/>
                <operand2 xsi:type="promela:num_const" number="2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_out_Original_to_Sender_abl"/>
                <any_expr xsi:type="promela:num_const" number="3"/>
              </sequence>
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_out_Original_to_Sender_abl"/>
                <operand2 xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.0/@sequence.0"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="C_C_C_C_C_C_as_P_inABP_Receiver_Receiver">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="C_C_C_C_C_r">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.2">
        <ivars name="C_C_C_C_C_d"/>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="P_as_C_out_Sender_to_Receiver__P_P_P_P_P_2_C_C_C_C_C"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="C_C_C_C_C_d"/>
                </recv_args>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:varref" var_name="C_C_C_C_C_r"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_in_Receiver_to_Original_name"/>
                <any_expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_in_Receiver_to_Original_arg_0"/>
                <any_expr xsi:type="promela:varref" var_name="C_C_C_C_C_d"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_in_Receiver_to_Original_abl"/>
                <any_expr xsi:type="promela:num_const" number="1"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.1/@sequence.3"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="P_as_C_out_Sender_to_Receiver__P_P_P_P_P_2_C_C_C_C_C"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="C_C_C_C_C_d"/>
                </recv_args>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:bin_expr" operator="MINUS">
                    <operand1 xsi:type="promela:num_const" number="1"/>
                    <operand2 xsi:type="promela:varref" var_name="C_C_C_C_C_r"/>
                  </expr>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.1/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero_s_Signal_abl_ZeroToZeroAck">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_in_Receiver_to_Original_abl"/>
                <operand2 xsi:type="promela:num_const" number="2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_in_Receiver_to_Original_abl"/>
                <any_expr xsi:type="promela:num_const" number="3"/>
              </sequence>
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_in_Receiver_to_Original_abl"/>
                <operand2 xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_in_Receiver_to_AS_name"/>
                <any_expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_in_Receiver_to_AS_abl"/>
                <any_expr xsi:type="promela:num_const" number="1"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.1/@sequence.4"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero_s_Signal_abl_ZeroToZeroAck_s_Acknowledge_abl_Zero_s_Signal_abl_ZeroToZeroAck_to_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_in_Receiver_to_AS_abl"/>
                <operand2 xsi:type="promela:num_const" number="2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_in_Receiver_to_AS_abl"/>
                <any_expr xsi:type="promela:num_const" number="3"/>
              </sequence>
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_in_Receiver_to_AS_abl"/>
                <operand2 xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_r"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="C_C_C_C_C_r"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.1/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="C_C_C_C_C_C_as_P_inABP_AS_AS">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="C_C_C_C_C_b">
          <any_expr_or_ch_init xsi:type="promela:num_const" number="1"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:enum_const" const_enum="SKIP"/>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="P_as_C_out_AS_to_AR__C_C_C_C_C_2_P_P_P_P_P"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                <send_args xsi:type="promela:varref" var_name="C_C_C_C_C_b"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.2/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="AND">
                <operand1 xsi:type="promela:bin_expr" operator="EQUALS">
                  <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_in_Receiver_to_AS_abl"/>
                  <operand2 xsi:type="promela:num_const" number="1"/>
                </operand1>
                <operand2 xsi:type="promela:bin_expr" operator="EQUALS">
                  <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_in_Receiver_to_AS_name"/>
                  <operand2 xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                </operand2>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_in_Receiver_to_AS_abl"/>
                <any_expr xsi:type="promela:num_const" number="2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.2/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero_r_Acknowledge_rbl_ZeroToZeroAck">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_in_Receiver_to_AS_abl"/>
                <operand2 xsi:type="promela:num_const" number="3"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_in_Receiver_to_AS_abl"/>
                <any_expr xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_b"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="C_C_C_C_C_b"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.2/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_in_Receiver_to_AS_abl"/>
                <operand2 xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.2/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="C_C_C_C_C_C_as_P_outABP_Sender_Sender">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="C_C_C_C_C_s">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.2">
        <ivars name="C_C_C_C_C_d"/>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="AND">
                <operand1 xsi:type="promela:bin_expr" operator="EQUALS">
                  <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_out_Original_to_Sender_abl"/>
                  <operand2 xsi:type="promela:num_const" number="1"/>
                </operand1>
                <operand2 xsi:type="promela:bin_expr" operator="EQUALS">
                  <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_out_Original_to_Sender_name"/>
                  <operand2 xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
                </operand2>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_out_Original_to_Sender_abl"/>
                <any_expr xsi:type="promela:num_const" number="2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.4"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_One">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:enum_const" const_enum="SKIP"/>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="C_as_P_out_Sender_to_Receiver__C_C_C_C_C_2_P_P_P_P_P"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
                <send_args xsi:type="promela:varref" var_name="C_C_C_C_C_d"/>
                <send_args xsi:type="promela:varref" var_name="C_C_C_C_C_s"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.3"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="AND">
                <operand1 xsi:type="promela:bin_expr" operator="EQUALS">
                  <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_out_AR_to_Sender_abl"/>
                  <operand2 xsi:type="promela:num_const" number="1"/>
                </operand1>
                <operand2 xsi:type="promela:bin_expr" operator="EQUALS">
                  <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_out_AR_to_Sender_name"/>
                  <operand2 xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                </operand2>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_out_AR_to_Sender_abl"/>
                <any_expr xsi:type="promela:num_const" number="2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.5"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero_r_Signal_rbl_ZeroToOne">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_out_Original_to_Sender_abl"/>
                <operand2 xsi:type="promela:num_const" number="3"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_d"/>
                <any_expr xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_out_Original_to_Sender_arg_0"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_out_Original_to_Sender_abl"/>
                <any_expr xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.3"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_out_Original_to_Sender_abl"/>
                <operand2 xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_One_r_Acknowledge_rbl_OneToZero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_out_AR_to_Sender_abl"/>
                <operand2 xsi:type="promela:num_const" number="3"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_out_AR_to_Sender_abl"/>
                <any_expr xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_s"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="C_C_C_C_C_s"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_out_AR_to_Sender_abl"/>
                <operand2 xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.3/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="C_C_C_C_C_C_as_P_outABP_AR_AR">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="C_C_C_C_C_b">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="C_as_P_out_AS_to_AR__P_P_P_P_P_2_C_C_C_C_C"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:varref" var_name="C_C_C_C_C_b"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_out_AR_to_Sender_name"/>
                <any_expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_out_AR_to_Sender_abl"/>
                <any_expr xsi:type="promela:num_const" number="1"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="C_as_P_out_AS_to_AR__P_P_P_P_P_2_C_C_C_C_C"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:bin_expr" operator="MINUS">
                    <operand1 xsi:type="promela:num_const" number="1"/>
                    <operand2 xsi:type="promela:varref" var_name="C_C_C_C_C_b"/>
                  </expr>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero_s_Acknowledge_abl_ZeroToZeroAck">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_out_AR_to_Sender_abl"/>
                <operand2 xsi:type="promela:num_const" number="2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_C_as_P_out_AR_to_Sender_abl"/>
                <any_expr xsi:type="promela:num_const" number="3"/>
              </sequence>
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="C_C_C_C_C_C_as_P_out_AR_to_Sender_abl"/>
                <operand2 xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="C_C_C_C_C_b"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="C_C_C_C_C_b"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.4/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="P_P_P_P_P_P_as_Producer">
      <sequence xsi:type="promela:block_stmnt" label="Label_State">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_out_Original_to_Sender_name"/>
                <any_expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_out_Original_to_Sender_arg_0"/>
                <any_expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.3"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_out_Original_to_Sender_abl"/>
                <any_expr xsi:type="promela:num_const" number="1"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_State_s_Signal_abl_StateToState">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="AND">
                <operand1 xsi:type="promela:bin_expr" operator="AND">
                  <operand1 xsi:type="promela:bin_expr" operator="EQUALS">
                    <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_in_Receiver_to_Original_abl"/>
                    <operand2 xsi:type="promela:num_const" number="1"/>
                  </operand1>
                  <operand2 xsi:type="promela:bin_expr" operator="EQUALS">
                    <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_in_Receiver_to_Original_name"/>
                    <operand2 xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
                  </operand2>
                </operand1>
                <operand2 xsi:type="promela:bin_expr" operator="EQUALS">
                  <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_in_Receiver_to_Original_arg_0"/>
                  <operand2 xsi:type="promela:mtype_const" mtype="/0/@mtypes.4"/>
                </operand2>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_in_Receiver_to_Original_abl"/>
                <any_expr xsi:type="promela:num_const" number="2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_State_s_Signal_abl_StateToState_r_Signal_rbl_State_s_Signal_abl_StateToState_to_State">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_in_Receiver_to_Original_abl"/>
                <operand2 xsi:type="promela:num_const" number="3"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_in_Receiver_to_Original_abl"/>
                <any_expr xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_out_Original_to_Sender_abl"/>
                <operand2 xsi:type="promela:num_const" number="2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_out_Original_to_Sender_abl"/>
                <any_expr xsi:type="promela:num_const" number="3"/>
              </sequence>
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_out_Original_to_Sender_abl"/>
                <operand2 xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.0"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_in_Receiver_to_Original_abl"/>
                <operand2 xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.5/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="P_P_P_P_P_P_as_C_outABP_Sender_Sender">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="P_P_P_P_P_s">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.2">
        <ivars name="P_P_P_P_P_d"/>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="AND">
                <operand1 xsi:type="promela:bin_expr" operator="EQUALS">
                  <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_out_Original_to_Sender_abl"/>
                  <operand2 xsi:type="promela:num_const" number="1"/>
                </operand1>
                <operand2 xsi:type="promela:bin_expr" operator="EQUALS">
                  <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_out_Original_to_Sender_name"/>
                  <operand2 xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
                </operand2>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_out_Original_to_Sender_abl"/>
                <any_expr xsi:type="promela:num_const" number="2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.6/@sequence.4"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_One">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:enum_const" const_enum="SKIP"/>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="P_as_C_out_Sender_to_Receiver__P_P_P_P_P_2_C_C_C_C_C"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
                <send_args xsi:type="promela:varref" var_name="P_P_P_P_P_d"/>
                <send_args xsi:type="promela:varref" var_name="P_P_P_P_P_s"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.6/@sequence.3"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="AND">
                <operand1 xsi:type="promela:bin_expr" operator="EQUALS">
                  <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_out_AR_to_Sender_abl"/>
                  <operand2 xsi:type="promela:num_const" number="1"/>
                </operand1>
                <operand2 xsi:type="promela:bin_expr" operator="EQUALS">
                  <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_out_AR_to_Sender_name"/>
                  <operand2 xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                </operand2>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_out_AR_to_Sender_abl"/>
                <any_expr xsi:type="promela:num_const" number="2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.6/@sequence.5"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero_r_Signal_rbl_ZeroToOne">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_out_Original_to_Sender_abl"/>
                <operand2 xsi:type="promela:num_const" number="3"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_d"/>
                <any_expr xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_out_Original_to_Sender_arg_0"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_out_Original_to_Sender_abl"/>
                <any_expr xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.6/@sequence.3"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_out_Original_to_Sender_abl"/>
                <operand2 xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.6/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_One_r_Acknowledge_rbl_OneToZero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_out_AR_to_Sender_abl"/>
                <operand2 xsi:type="promela:num_const" number="3"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_out_AR_to_Sender_abl"/>
                <any_expr xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_s"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="P_P_P_P_P_s"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.6/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_out_AR_to_Sender_abl"/>
                <operand2 xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.6/@sequence.3"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="P_P_P_P_P_P_as_C_outABP_AR_AR">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="P_P_P_P_P_b">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="P_as_C_out_AS_to_AR__C_C_C_C_C_2_P_P_P_P_P"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:varref" var_name="P_P_P_P_P_b"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_out_AR_to_Sender_name"/>
                <any_expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_out_AR_to_Sender_abl"/>
                <any_expr xsi:type="promela:num_const" number="1"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.7/@sequence.2"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="P_as_C_out_AS_to_AR__C_C_C_C_C_2_P_P_P_P_P"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:bin_expr" operator="MINUS">
                    <operand1 xsi:type="promela:num_const" number="1"/>
                    <operand2 xsi:type="promela:varref" var_name="P_P_P_P_P_b"/>
                  </expr>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.7/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero_s_Acknowledge_abl_ZeroToZeroAck">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_out_AR_to_Sender_abl"/>
                <operand2 xsi:type="promela:num_const" number="2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_out_AR_to_Sender_abl"/>
                <any_expr xsi:type="promela:num_const" number="3"/>
              </sequence>
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_out_AR_to_Sender_abl"/>
                <operand2 xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_b"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="P_P_P_P_P_b"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.7/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="P_P_P_P_P_P_as_C_inABP_Receiver_Receiver">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="P_P_P_P_P_r">
          <any_expr_or_ch_init xsi:type="promela:num_const"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.2">
        <ivars name="P_P_P_P_P_d"/>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="C_as_P_out_Sender_to_Receiver__C_C_C_C_C_2_P_P_P_P_P"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="P_P_P_P_P_d"/>
                </recv_args>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:varref" var_name="P_P_P_P_P_r"/>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_in_Receiver_to_Original_name"/>
                <any_expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_in_Receiver_to_Original_arg_0"/>
                <any_expr xsi:type="promela:varref" var_name="P_P_P_P_P_d"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_in_Receiver_to_Original_abl"/>
                <any_expr xsi:type="promela:num_const" number="1"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.8/@sequence.3"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:receive" receivetype="normal">
                <varref var_name="C_as_P_out_Sender_to_Receiver__C_C_C_C_C_2_P_P_P_P_P"/>
                <recv_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.1"/>
                <recv_args xsi:type="promela:recv_arg_varref">
                  <varref var_name="P_P_P_P_P_d"/>
                </recv_args>
                <recv_args xsi:type="promela:recv_arg_eval_expr">
                  <expr xsi:type="promela:bin_expr" operator="MINUS">
                    <operand1 xsi:type="promela:num_const" number="1"/>
                    <operand2 xsi:type="promela:varref" var_name="P_P_P_P_P_r"/>
                  </expr>
                </recv_args>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.8/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero_s_Signal_abl_ZeroToZeroAck">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_in_Receiver_to_Original_abl"/>
                <operand2 xsi:type="promela:num_const" number="2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_in_Receiver_to_Original_abl"/>
                <any_expr xsi:type="promela:num_const" number="3"/>
              </sequence>
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_in_Receiver_to_Original_abl"/>
                <operand2 xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_in_Receiver_to_AS_name"/>
                <any_expr xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_in_Receiver_to_AS_abl"/>
                <any_expr xsi:type="promela:num_const" number="1"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.8/@sequence.4"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero_s_Signal_abl_ZeroToZeroAck_s_Acknowledge_abl_Zero_s_Signal_abl_ZeroToZeroAck_to_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_in_Receiver_to_AS_abl"/>
                <operand2 xsi:type="promela:num_const" number="2"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_in_Receiver_to_AS_abl"/>
                <any_expr xsi:type="promela:num_const" number="3"/>
              </sequence>
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_in_Receiver_to_AS_abl"/>
                <operand2 xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_r"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="P_P_P_P_P_r"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.8/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <proctypes active="1" name="P_P_P_P_P_P_as_C_inABP_AS_AS">
      <sequence xsi:type="promela:one_decl" visible="SHOW" typename="/0/@primitivetypes.3">
        <ivars name="P_P_P_P_P_b">
          <any_expr_or_ch_init xsi:type="promela:num_const" number="1"/>
        </ivars>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:enum_const" const_enum="SKIP"/>
              <sequence xsi:type="promela:send" sendtype="normal_fifo">
                <varref var_name="C_as_P_out_AS_to_AR__P_P_P_P_P_2_C_C_C_C_C"/>
                <send_args xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                <send_args xsi:type="promela:varref" var_name="P_P_P_P_P_b"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.9/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="AND">
                <operand1 xsi:type="promela:bin_expr" operator="EQUALS">
                  <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_in_Receiver_to_AS_abl"/>
                  <operand2 xsi:type="promela:num_const" number="1"/>
                </operand1>
                <operand2 xsi:type="promela:bin_expr" operator="EQUALS">
                  <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_in_Receiver_to_AS_name"/>
                  <operand2 xsi:type="promela:mtype_const" mtype="/0/@mtypes.0"/>
                </operand2>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_in_Receiver_to_AS_abl"/>
                <any_expr xsi:type="promela:num_const" number="2"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.9/@sequence.2"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
      <sequence xsi:type="promela:block_stmnt" label="Label_Zero_r_Acknowledge_rbl_ZeroToZeroAck">
        <sequence xsi:type="promela:if_stmnt">
          <options>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_in_Receiver_to_AS_abl"/>
                <operand2 xsi:type="promela:num_const" number="3"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_P_as_C_in_Receiver_to_AS_abl"/>
                <any_expr xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:assign_std">
                <varref var_name="P_P_P_P_P_b"/>
                <any_expr xsi:type="promela:bin_expr" operator="MINUS">
                  <operand1 xsi:type="promela:num_const" number="1"/>
                  <operand2 xsi:type="promela:varref" var_name="P_P_P_P_P_b"/>
                </any_expr>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.9/@sequence.1"/>
            </sequence>
            <sequence xsi:type="promela:block_stmnt">
              <sequence xsi:type="promela:bin_expr" operator="EQUALS">
                <operand1 xsi:type="promela:varref" var_name="P_P_P_P_P_P_as_C_in_Receiver_to_AS_abl"/>
                <operand2 xsi:type="promela:num_const"/>
              </sequence>
              <sequence xsi:type="promela:goto_stmnt" stmnt="/0/@proctypes.9/@sequence.1"/>
            </sequence>
          </options>
        </sequence>
      </sequence>
    </proctypes>
    <primitivetypes primitivetype="CHAN"/>
    <primitivetypes primitivetype="BYTE"/>
    <primitivetypes primitivetype="MTYPE"/>
    <primitivetypes primitivetype="INT"/>
    <primitivetypes primitivetype="BOOL"/>
  </promela:spec>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="INT"/>
  <promela:primitivetype primitivetype="INT"/>
  <promela:primitivetype primitivetype="MTYPE"/>
  <promela:primitivetype primitivetype="INT"/>
  <promela:primitivetype primitivetype="INT"/>
</xmi:XMI>
