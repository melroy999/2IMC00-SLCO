// type of global memory elements used
{% if vectorsize < 31 %}
#define inttype uint32_t
{% else %}
#define inttype uint64_t
{% endif %}
// type of shared memory elements used
#define shared_inttype uint32_t
// type for shared memory cache indices
#define shared_indextype uint16_t
// type of automaton state
{% if max_statesize <= 8 %}
#define statetype uint8_t
{% elif max_statesize <= 16 %}
#define statetype uint16_t
{% elif max_statesize <= 32 %}
#define statetype uint32_t
{% else %}
#define statetype uint64_t
{% endif %}
// types of data elements
#define elem_inttype int32_t
#define elem_chartype int8_t
#define elem_booltype bool
// type for array and channel buffer indexing
{% if max_arrayindexsize <= 8 %}
#define array_indextype int8_t
{% elif max_arrayindexsize <= 16 %}
#define array_indextype int16_t
{% else %}
#define array_indextype int32_t
{% endif %}
// type for indexing in variable buffers
{% if max_buffer_allocs <= 8 %}
#define buffer_indextype int8_t
{% elif max_buffer_allocs <= 16 %}
#define buffer_indextype int16_t
{% else %}
#define buffer_indextype int32_t
{% endif %}

// Constant representing empty array index entry.
#define EMPTY_INDEX -1
// Constant used to initialise state variables.
#define NO_STATE {{no_state_constant}}

// State vector size.
inttype sv_nints = {{vectorsize}};

// Structure of state vector:
// {{vectorstructure_string}}

{% if vectorsize > 62 %}
// Function to traverse one step in state vector tree (stored in shared memory).
inline __device__ shared_indextype sv_step(shared_inttype *d_z, shared_indextype node_index, bool goleft) {
	shared_indextype index = 0;
	shared_inttype tmp = d_z[node_index+2];
	if (goleft) {
		asm("{\n\t"
			" .reg .u32 t1;\n\t"
			" bfe.u32 t1, %1, 15, 15;\n\t"
			" cvt.u16.u32 %0, t1;\n\t"
			"}" : "=l"(index) : "l"(tmp));
	}
	else {
		asm("{\n\t"
			" .reg .u32 t1;\n\t"
			" bfe.u32 t1, %1, 0, 15;\n\t"
			"}" : "=l"(index) : "l"(tmp));
	}
	return index;
}
{% endif %}

// Retrieval functions for vector parts.
inline __device__ inttype get_vectorpart(inttype *d_z, shared_indextype node_index, inttype i) {
	switch (i) {
	  {% for i in range(0,vectorstructure|length) %}
	  case {{i}}:
	  	return get_vectorpart_{{i}}(d_z, node_index);
	  {% endfor %}
	  default:
	  	return 0;
	}
}
{% for i in range(0,vectorstructure|length) %}

inline __device__ inttype get_vectorpart_{{i}}(inttype *d_z, shared_indextype node_index) {
	{% if vectorsize < 63 %}
	return d_z[node_index];
	{% else %}
	shared_indextype index = node_index;
	{% for b in i|get_vector_tree_navigation %}
	index = sv_step(d_z, index, {% if b %}true{% else %}false{% endif %});
	{% endfor %}
	inttype part;
	asm("{\n\t"
		" mov.b64 %0,{ %1, %2 };\n\t"
		"}" : "=r"(part) : "r"(d_z[index]) : "r"(d_z[index+1]));
	return part;
	{% endif %}
}
{% endfor %}

// Data retrieval functions. Retrieve particular state info from the given state vector part(s).
// Precondition: the given parts indeed contain the requested info.
{% for s in vectorelem_in_structure_map.keys() %}
{% set size = vectorelem_in_structure_map[s][0] %}
inline __device__ void get_{{s|replace("[","_")|replace("]","")|replace("'","_")}}({% if s|is_state %}elem_statetype{% elif size < 32 %}elem_chartype{% else %}elem_inttype{% endif %} b, inttype part1, inttype part2) {
	asm("{\n\t"
{% if size < 32 %}
		" .reg .u32 t1;\n\t"
{% if vectorelem_in_structure_map[s]|length == 2 %}
		" bfe.u32 t1, %1, {{vectorelem_in_structure_map[s][1][1]}}, {{vectorelem_in_structure_map[s][1][2]}};\n\t"
{% else %}
		" bfe.u32 t1, %2, {{vectorelem_in_structure_map[s][2][1]}}, {{vectorelem_in_structure_map[s][2][2]}};\n\t"
		" bfi.b32 t1, %1, t1, {{vectorelem_in_structure_map[s][2][2]}}, {{vectorelem_in_structure_map[s][1][2]}};\n\t"
{% endif %}
		" cvt.s8.u32 %0, t1;\n\t"
	    "}" : "=r"(b) : "l"(part1) : "l"(part2));
{% else %}
{% if vectorelem_in_structure_map[s]|length == 2 %}
		" bfe.s32 %0, %1, {{vectorelem_in_structure_map[s][1][1]}}, {{vectorelem_in_structure_map[s][1][2]}};\n\t"
	    "}" : "=r"(b) : "l"(part1) : "l"(part2));
{% else %}
		" bfe.s32 %0, %2, {{vectorelem_in_structure_map[s][2][1]}}, {{vectorelem_in_structure_map[s][2][2]}};\n\t"
		" bfi.b32 %0, %1, %0, {{vectorelem_in_structure_map[s][2][2]}}, {{vectorelem_in_structure_map[s][1][2]}};\n\t"
	    "}" : "+r"(b) : "l"(part1) : "l"(part2));
{% endif %}
{% endif %}
}

{% endfor %}
{% if arraynames|length > 0 %}
// Data retrieval functions, including the fetching of required vector parts, for array elements with dynamic indexing, and channel buffer elements.
{% for vname, t, size in arraynames %}
inline __device__ void get_{{vname|replace("[","_")|replace("]","")}}(inttype *d_z, shared_indextype node_index, {% if t|gettypesize < 32 %}elem_chartype{% else %}elem_inttype{% endif %} b, array_indextype index) {
	inttype part1, part2;
	switch (index) {
		{% for i in range(0, size) %}
		case {{i}}:
			// Retrieve correct vector part(s).
			{% set PIDs = vectorelem_in_structure_map[vname + "[" + i|string + "]"] %}
			part1 = get_vectorpart_{{PIDs[1][0]}}(d_z, node_index);
			{% if PIDs|length > 2 %}
			part2 = get_vectorpart_{{PIDs[2][0]}}(d_z, node_index);
			{% endif %}
			// Get the data.
			get_{{vname|replace("[","_")|replace("]","") + "_" + i|string}}(b, part1, part2);
			break;
		{% endfor %}
		default:
			break;
	}
}

{% endfor %}
{% endif %}
// Retrieval of current state of automaton at position i in state vector.
inline __device__ void get_current_state(statetype b, inttype *d_z, shared_indextype node_index, elem_chartype i) {
	inttype part1, part2;
	switch (i) {
		{% for i in range(0,smnames|length) %}
		case {{i}}:
			{% set vinfo = vectorelem_in_structure_map[state_order[i]] %}
			part1 = get_vectorpart_{{vinfo[1][0]}}(d_z, node_index);
			{% if vinfo|length > 2 %}
			part2 = get_vectorpart_{{vinfo[2][0]}}(d_z, node_index);
			{% endif %}
			get_{{state_order[i]}}(b, part1, part2);
		{% endfor %}
		default:
			break;
	}
}

// Data update functions. Update particular state info in the given state vector part(s).
// Precondition: the given parts indeed need to contain the updated info.
{% for s in vectorelem_in_structure_map.keys() %}
{% set size = vectorelem_in_structure_map[s][0] %}
inline __device__ void set_{{s|replace("[","_")|replace("]","")|replace("'","_")}}(inttype part1, inttype part2, {% if size < 32 %}elem_chartype{% else %}elem_inttype{% endif %} x) {
	asm("{\n\t"
		" .reg .u64 t1;\n\t"
{% if size < 32 %}
		" cvt.u64.u8 t1, %0\n\t"
{% else %}
		" cvt.u64.u32 t1, %0\n\t"
{% endif %}
{% if vectorelem_in_structure_map[s]|length == 2 %}
		" bfi.b64 %1, t1, %1, {{vectorelem_in_structure_map[s][1][1]}}, {{vectorelem_in_structure_map[s][1][2]}};\n\t"
{% else %}
		" bfi.b64 %2, t1, %2, {{vectorelem_in_structure_map[s][2][1]}}, {{vectorelem_in_structure_map[s][2][2]}};\n\t"
		" shr.b64 t1, t1, {{vectorelem_in_structure_map[s][2][2]}};\n\t"
		" bfi.b64 %1, t1, %1, {{vectorelem_in_structure_map[s][1][1]}}, {{vectorelem_in_structure_map[s][1][2]}};\n\t"
{% endif %}
		"}" + "r"(x) : "+l"(part1) : "+l"(part2));
}

{% endfor %}
// Auxiliary functions to check for and obtain offset for given array index in the appropriate buffer. The given array of indices is scanned to retrieve the offset.
// Check for presence of offset. If not present, store the index, and return position. if present, return -1.
// This function is used for the retrieval of array elements.
inline __device__ buffer_indextype add_idx(array_indextype *indices, array_indextype index) {
	for (buffer_indextype i;; i++) {
		if (indices[i] == index) {
			return -1;
		}
		elif (indices[i] == EMPTY_INDEX) {
			indices[i] = index;
			return i;
		}
	}
	return -1;
}

// Check for index and return position in indices array. This function is used for processing statements.
// Precondition: provided array contains the requested element.
inline __device__ buffer_indextype idx(array_indextype *indices, array_indextype index) {
	for (buffer_indextype i;; i++) {
		if (indices[i] == index) {
			return i;
		}
		elif (indices[i] == EMPTY_INDEX) {
			return i;
		}
	}
	return -1;
}

{% for c in model.classes %}
{% set cloop = loop %}
{% for sm in c.statemachines %}
{% set smloop = loop %}
{% for a in alphabet[sm] if a in syncactions %}
{% if cloop.first and smloop.first and loop.first %}
// Action execution functions. For each state machine and action requiring synchronisation, there is a function returning for a given
// source state a target state that can be reached by performing the action. In case of non-determinism, repeated calls of the function
// will produce each of the different reachable states.
{% endif %}
inline __device__ statetype get_target_{{sm.name}}_{{a}}(statetype src, statetype prev_tgt) {
	switch (src) {
		{% set atrans = actiontargets[sm][a] %}
		{% for src, tgts in atrans|dictsort %}
		case {{src}}:
			switch (prev_tgt) {
				{% for j in range(0, tgts|length+1) %}
				{% if j == 0 %}
				case -1:
				{% else %}
				case {{tgts[j-1]}}:
				{% endif %}
					{% if j == tgts|length %}
					return -1;
					{% else %}
					return {{tgts[j]}};
					{% endif %}
				{% endfor %}
				default:
					return -1;
			}
		{% endfor %}
		default:
			return -1;
	}
}

{% endfor %}
{% endfor %}
{% endfor %}
{% for ch in model.channels if ch.synctype == 'sync' %}
{% set chloop = loop %}
{% for (o2,sm2,signal) in ch|get_all_syncrecs %}
{% if chloop.first and loop.first %}
// Synchronous message receive functions. For each (object, statemachine) pair, synchronous channel, and message signal, there is a
// function returning for a given source state a target state that can be reached by receiving a message with that signal over that
// channel. in case of non-determinism, repeated calls of the function will produce each of the different reachable states.
{% endif %}
inline __device__ statetype get_target_{{o2.name}}_{{sm2.name}}_{{signal}}(statetype src, statetype prev_tgt) {
	switch (src) {
		{% set trans = o2|get_reccomm_trans(sm2,ch,signal) %}
		{% for s2 in trans.keys()|sort %}
		case {{s2}}:
			switch (prev_tgt) {
				{% set strans = trans[s2] %}
				{% for j in range(0, strans|length) %}
				{% if j == 0 %}
				case -1:
				{% else %}
				case {{strans[j-1]}}:
				{% endif %}
					{% if j == strans|length %}
					return -1;
					{% else %}
					return {{strans[j]}};
					{% endif %}
				{% endfor %}
				default:
					return -1;
			}
		{% endfor %}
		default:
			return -1;
	}
}

{% endfor %}
{% endfor %}
// Successor function. Given a state vector, construct its successor state vectors, and store them in d_z.
// Vgtid is the identity of the thread calling the function (id of thread inside vector group).
inline __device__ void successor(inttype *d_z, shared_indextype node_index, uint8_t vgtid) {
	// explore the outgoing transitions of the current state of the automaton assigned to vgtid.
	switch (vgtid) {
		{% for i in range(0,smnames|length) %}
		case {{i}}:
			explore_{{state_order[i]|replace("'","_")}}(d_z, node_index);
			break;
		{% endfor %}
		default:
			break;
	}
}

// Exploration functions to traverse outgoing transitions of the various states.
{% for i in range(0,smnames|length) %}
inline __device__ void explore_{{state_order[i]|replace("'","_")}}(inttype *d_z, shared_indextype node_index) {
	// fetch the current state of the state machine.
	statetype current = get_current_state(d_z, node_index, {{i}});
	statetype target = NO_STATE;
	inttype part1, part2;
	switch (current) {
		{% for s in smname_to_object[state_order[i]][1].states %}
		{% set o = smname_to_object[state_order[i]][0] %}
		{% set sm = smname_to_object[state_order[i]][1] %}
		case {{state_id[(sm,s)]}}:
			{% set indent = "" %}
			{% set allocs = s|get_buffer_allocs(o) %}
			{% if allocs[0] + allocs[1] + allocs[2] + allocs[3] > 0 %}
			// Allocate register memory to process transition(s).
			{% endif %}
			{% if allocs[0] > 0 %}
			elem_inttype buf32[{{allocs[0]}}];
			{% endif %}
			{% if allocs[1] > 0 %}
			uint16_t buf16[{{allocs[1]}}];
			{% endif %}
			{% if allocs[2] > 0 %}
			elem_chartype buf8[{{allocs[2]}}];
			{% endif %}
			{% if allocs[3] > 0 %}
			bool buf1[{{allocs[3]}}];
			{% endif %}
			{% set allocs = s|get_buffer_arrayindex_allocs(o) %}
			{% if allocs|length > 0 %}
			// Allocate register memory for dynamic array indexing.
			{% for v in allocs.keys() %}
			array_indextype idx_{{v.name}}[{{allocs[v]}}];
			{% endfor %}
			{% endif %}
			{% set ns = namespace(lastprio=100, prio_nestings=0) %}
			{% for t in s|outgoingtrans(sm.transitions) %}
			{% if t|must_be_processed_by(i,o) %}
			{% if t.priority > ns.lastprio %}
			if (target == NO_STATE) {
			{% set ns.prio_nestings = ns.prio_nestings + 1 %}
			{% set indent = indent + "\t" %}
			{% endif %}
			{% set ns.lastprio = t.priority %}
			{% set st = t.statements[0] %}
			{{indent}}// {{s.name}} --{ {{st|getlabel}} }--> {{t.target.name}}
			{% set M = t|map_variables_on_buffer(o) %}
			{% set fetched = [-1,-1] %}
			{% if st.__class__.__name__ == 'ReceiveSignal' %}
			{% if st|cudarecsizeguard(M,o) != "" %}
			{{indent}}// Fetch buffer size value.
			{% set ch = connected_channel[(o, st.target)] %}
			{% set VP = [(ch,"_size")]|get_vectorparts(o) %}
			{% set fetched = VP %}
			{{indent}}part1 = get_vectorpart(d_z, node_index, {{VP[0]}});
			{% if VP|length > 1 %}
			{{indent}}part2 = get_vectorpart(d_z, node_index, {{VP[1]}});
			{% endif %}
			{{indent}}get_{{ch.name}}_size({{M[(ch,"_size")][0]}}[{{M[(ch,"_size")][1]}}], part1, part2);
			{{indent}}if ({{st|cudarecsizeguard(M,o)}}) {
			{% endif %}
			{% endif %}
			{% for v in st|statement_varrefs(o,sm)|get_vars if v|has_dynamic_indexing(t,o) %}
			{% if loop.first %}
			{{indent}}// Reset storage of array indices.
			{% endif %}
			for (array_indextype i = 0; i < {{allocs[v]}}; i++) {
				idx_{{v.name}}[i] = EMPTY_INDEX;
			}
			{% endfor %}
			{% set VP = t|transition_read_varrefs(o,True)|select("no_dynamic_indexing")|get_vectorparts(o) %}
			{% if VP|length > 0 %}
			{{indent}}// fetch values of unguarded variables.
			{% endif %}
			{% for i in range(0,VP|length) %}
			{% set VPloop = loop %}
			{% if loop.first %}
			{% if VP[i] != fetched[0] and VP[i] != fetched[1] %}
			{% set fetched = [VP[i],fetched[1]] %}
			{{indent}}part1 = get_vectorpart(d_z, node_index, {{VP[i]}});
			{% elif VP[i] == fetched[1] %}
			{% set fetched = [fetched[1],fetched[1]] %}
			{{indent}}part1 = part2;
			{% endif %}
			{% endif %}
			{% for (v,j) in t|transition_read_varrefs(o,False)|select("no_dynamic_indexing") if vectorelem_in_structure_map[v|scopename(j,o)][1][0] == VP[i] and (vectorelem_in_structure_map[v|scopename(j,o)]|length == 2 or vectorelem_in_structure_map[v|scopename(j,o)][vectorelem_in_structure_map[v|scopename(j,o)]|length-1][0] == VP[i+1]) %}
			{% if (not VPloop.first) and loop.first %}
			{{indent}}part1 = part2;
			{% endif %}
			{% if i+1 < VP|length %}
			{% if VP[i+1] != fetched[0] and VP[i+1] != fetched[1] %}
			{% set fetched = [fetched[0],VP[i+1]] %}
			{{indent}}part2 = get_vectorpart(d_z, node_index, {{VP[i+1]}});
			{% elif VP[i+1] == fetched[0] %}
			{% set fetched = [fetched[0],fetched[0]] %}
			{{indent}}part2 = part1;
			{% endif %}
			{% endif %}
			{% if v.__class__.__name__ != "Channel" and v.__class__.__name__ != "StateMachine" %}
			{{indent}}get_{{v|scopename(None,o)|replace("'","_")}}{% if j != None %}_{{j|getinstruction({},{})}}{% endif %}({{M[v][0]}}[{{M[v][1]}}{% if j != None %} + {{j|getinstruction({},{})}}{% endif %}], part1, part2);
			{% else %}
			{{indent}}get_{{v|scopename(j,o)|replace("[","_")|replace("]","")|replace("'","_")}}({{M[(v,j)][0]}}[{{M[(v,j)][1]}}], part1, part2);
			{% endif %}
			{% if v|has_dynamic_indexing(t,o) %}
			{{indent}}// Store array index
			{{indent}}add_idx(idx_{{v.name}}, {{j|getinstruction({},{})}});
			{% endif %}
			{% endfor %}
			{% endfor %}
			{% for (v,j) in t|transition_sorted_dynamic_read_varrefs(o,True) %}
			{% if loop.first %}
			{{indent}}// fetch values of unguarded variables involving dynamic array indexing.
			{% endif %}
			{{indent}}// check for presence of index in buffer indices.
			{{indent}}buffer_indextype i = add_idx(idx_{{v.name}}, {{j|getinstruction(M,{})}});
			{{indent}}if (i != -1) {
			{{indent}}	// fetch value.
			{{indent}}	get_{{v|scopename(None,o)}}(d_z, node_index, buf{{v.type|gettypesize}}[{{M[v][1]}}+i], {{j|getinstruction(M),{}}});
			{{indent}}}
			{% endfor %}
			{{indent}}// statement computation.
			{% if st|cudaguard(M,o) != "" %}
			{{indent}}if ({{st|cudaguard(M,o)}}) {
			{% set indent = indent + "\t" %}
			{% endif %}
			{% if st.__class__.__name__ == "SendSignal" %}
			{% if connected_channel[(o, st.target)].losstype == 'lossy' %}
			{{indent}}// handle lossy case in which message is lost.
			{{indent}}// set target state.
			{{indent}}target = {{state_id[(sm,t.target)]}};
			{% endif %}
			{% endif %}
			{% set VPrem = t|transition_read_varrefs(o,False)|select("no_dynamic_indexing")|get_remaining_vectorparts(o,VPs) %}
			{% for i in range(0,VPrem|length) %}
			{% set VPremloop = loop %}
			{% for (v,j) in t|transition_read_varrefs(o,False)|select("no_dynamic_indexing")|select("vectorparts_not_covered", o, VP) if vectorelem_in_structure_map[v|scopename(j,o)][1][0] == VPrem[i] and (vectorelem_in_structure_map[v|scopename(j,o)]|length == 2 or vectorelem_in_structure_map[v|scopename(j,o)][vectorelem_in_structure_map[v|scopename(j,o)]|length-1][0] == VPrem[i+1]) %}
			{% if VPremloop.first and loop.first %}
			{{indent}}// fetch remaining values of unguarded variables (without dynamic array indexing)
			{% if VPrem[i] != fetched[0] and VPrem[i] != fetched[1] %}
			{% set fetched = [VPrem[i],fetched[1]] %}
			{{indent}}part1 = get_vectorpart(d_z, node_index, {{VPrem[i]}});
			{% elif VPrem[i] == fetched[1] %}
			{% set fetched = [fetched[1],fetched[1]] %}
			{{indent}}part1 = part2;
			{% endif %}
			{% endif %}
			{% if (not VPremloop.first) and loop.first %}
			{{indent}}part1 = part2;
			{% endif %}
			{% if i+1 < VPrem|length %}
			{% if VPrem[i+1] != fetched[0] and VPrem[i+1] != fetched[1] %}
			{% set fetched = [fetched[0],VPrem[i+1]] %}
			{{indent}}part2 = get_vectorpart(d_z, node_index, {{VPrem[i+1]}});
			{% elif VPrem[i+1] == fetched[0] %}
			{% set fetched = [fetched[1],fetched[1]] %}
			{{indent}}part2 = part1;
			{% endif %}
			{% endif %}
			{{indent}}get_{{v|scopename(None,o)}}{% if j != None %}_{{j|getinstruction({},{})}}{% endif %}({{M[v][0]}}[{{M[v][1]}}{% if j != None %} + {{j|getinstruction({},{})}}{% endif %}], part1, part2);
			{% if v|has_dynamic_indexing(t,o) %}
			{{indent}}// Store array index
			{{indent}}add_idx(idx_{{v.name}}, {{j|getinstruction({},{})}});
			{% endif %}
			{% endfor %}
			{% endfor %}
			{% for (v,j) in t|transition_sorted_dynamic_read_varrefs(o,False) %}
			{% if loop.first %}
			{{indent}}// fetch remaining values of unguarded variables involving dynamic array indexing.
			{% endif %}
			{{indent}}// check for presence of index in buffer indices.
			{{indent}}buffer_indextype i = add_idx(idx_{{v.name}}, {{j|getinstruction(M,{})}});
			{{indent}}if (i != -1) {
			{{indent}}	// fetch value.
			{{indent}}	get_{{v|scopename(None,o)}}(d_z, node_index, buf{{v.type|gettypesize}}[{{M[v][1]}}+i], {{j|getinstruction(M,{})}});
			{{indent}}}
			{% endfor %}
			{{indent}}// set target state.
			{{indent}}target = {{state_id[(sm,t.target)]}};
			{% if st|cudastatement(1,o,M) != "" %}
			{{indent}}{{st|cudastatement(indent|length+3,o,M)}}
			{% endif %}
			{% if st|cudaguard(M,o) != "" %}
			{% set indent = indent[:-1] %}
			{{indent}}}
			{% endif %}
			{% if st.__class__.__name__ == "ReceiveSignal" %}
			{% if st|cudarecsizeguard(M,o) != "" %}
			}
			{% endif %}
			{% endif %}
			{% endif %}
			{% for j in range(0, ns.prio_nestings) %}
			{% set indent = indent[:-1] %}
			{{indent}}}
			{% endfor %}
			{% endfor %}
			break;
		{% endfor %}
		default:
			break;
	}
}

{% endfor %}