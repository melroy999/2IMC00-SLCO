import java.util.Random;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Arrays;

// main class
public class {{model.name}} {
  // The threads
  {% for c in model.classes %}
  {% for sm in c.statemachines %}
  {{sm.name}}Thread T_{{sm.name}};
  {% endfor %}
  {% endfor %}

  // Upperbound for transition counter
  public static final long COUNTER_BOUND = 999999999L;

  // Enum type for state machine states
  public enum State {
  {% for s in states %}{{'  ' if loop.first }}{{s}}{{', ' if not loop.last }}{% endfor %}

  }

  // Object to wait-notify on
  Object SyncObject;

  // Global variables
  {% for c in model.classes %}
  {% for v in c.variables %}
  public {{v.type|javatype}} {{v.name}};
  {% endfor %}

	// Lock class to handle locks of global variables
	class Keeper {
    // The locks
		ReentrantLock[] locks;
    // Which locks need to be acquired?
    boolean[] lockneeded;

		// Constructor
		Keeper() {
			locks = new ReentrantLock[{{numberofelemvariables}}];
			lockneeded = new boolean[] { {% for v in lockneeded %}{{v|lower}}{{',' if not loop.last }}{% endfor %} };
			for (int i = 0; i < {{numberofelemvariables}}; i++) {
				locks[i] = new ReentrantLock(true);
			}
		}

		// Lock method
		public void lock(int[] l, int size) {
			for (int i = 0; i < size; i++) {
				if (lockneeded[l[i]]) {
          locks[l[i]].lock();
        }
      }
		}

		// Unlock method
		public void unlock(int[] l, int size) {
		  for (int i = 0; i < size; i++) {
			  if (lockneeded[l[i]]) {
          locks[l[i]].unlock();
        }
      }
		}
	}
	{% endfor %}

	{% for o in model.objects %}
	{% set c = o.type %}
	{% for sm in c.statemachines %}
	class {{sm.name}}Thread extends Thread {
		private Thread t;
		private String threadName = "{{sm.name}}Thread";
		// Current state
		private {{model.name}}.State currentState;
		// Random number generator to handle non-determinism
		private Random randomGenerator;
		// Counter of main while-loop iterations
		long transcounter;
		// Keeper of global variables
		private {{model.name}}.Keeper kp;
		// Array to store IDs of locks to be acquired
		private int[] lockIDs;
		// Thread local variables
		{% for v in sm.variables %}
		private {{v.type|javatype}} {{v.name}};
		{% endfor %}

		// Constructor
		{{sm.name}}Thread ({{model.name}}.Keeper k) {
			randomGenerator = new Random();
			transcounter = 0;
			currentState = {{model.name}}.State.{{sm.initialstate.name}};
      kp = k;
      lockIDs = new int[{{sm|maxnumbervarids}}];
			{% for v in sm.variables %}
			{{v.name}} = {% if v.type.size > 1 %}new {{v|javatype}} {% endif %}{{v|variabledefault}};
			{% endfor %}
		}

		// Execute method
		public void exec() {
			// variable to store non-deterministic choices
			int choice;
			while(transcounter < COUNTER_BOUND) {
				System.out.println(transcounter);
				switch(currentState) {
					{% for s in sm.states|select("hasoutgoingtrans", sm.transitions) %}
					case {{s.name}}:
						System.out.println("{{sm.name}}_{{s.name}} " + transcounter);
						{% set sout = s|outgoingtrans(sm.transitions) %}
						{% if sout|length > 1 %}
						choice = randomGenerator.nextInt({{sout|length}});
						switch(choice) {
							{% for i in range(0,sout|length) %}
							case {{i}}:
								System.out.println("{{sm.name}}_{{s.name}}_{{i}}");
								{% for st in sout[i].statements %}
								{% set stloop = loop %}
								// {{st|getlabel}}
								{% set varids = st|getvarids %}
								{% for id in varids %}
								System.out.println("{{sm.name}}_{{s.name}}_{{loop.index0}}");
							  lockIDs[{{loop.index0}}] = {{id}};
								{% endfor %}
								System.out.println("{{sm.name}}_{{s.name}}_{{i}}_sort");
								Arrays.sort(lockIDs,0,{{varids|length}});
								System.out.println("{{sm.name}}_{{s.name}}_{{i}}_lock");
								kp.lock(lockIDs, {{varids|length}});
								System.out.println("{{sm.name}}_{{s.name}}_{{i}}_stat");
								{{st|javastatement(varids|length,16,True,o)}}
								System.out.println("{{sm.name}}_{{s.name}}_{{i}}_unlock");
								kp.unlock(lockIDs, {{varids|length}});{{'\n                synchronized(SyncObject){SyncObject.notifyAll();}' if st|statement_writestolocked(o) }}
								{% endfor %}
								// Change state
								System.out.println("{{sm.name}}_{{s.name}}_{{i}}_changestate");
								currentState = {{model.name}}.State.{{sout[i].target.name}};
                // Increment counter
								System.out.println("{{sm.name}}_{{s.name}}_{{i}}_increment");
                transcounter++;
								break;
							{% endfor %}
						}
					  {% else %}
						{% for st in sout[0].statements %}
						// {{st|getlabel}}
						{% set varids = st|getvarids %}
						{% for id in varids %}
						lockIDs[{{loop.index0}}] = {{id}};
						{% endfor %}
						Arrays.sort(lockIDs,0,{{varids|length}});
						kp.lock(lockIDs, {{varids|length}});
						{{st|javastatement(varids|length,12,False,o)}}
						kp.unlock(lockIDs, {{varids|length}});{{'\n            synchronized(SyncObject){SyncObject.notifyAll();}' if st|statement_writestolocked(o) }}
						{% endfor %}
						// Change state
						currentState = {{model.name}}.State.{{sout[0].target.name}};
            // Increment counter
            transcounter++;
						{% endif %}
						break;
					{% endfor %}
					default:
						return;
				}
			}
		}

		// Run method
		public void run() {
			exec();
		}

		// Start method
		public void start() {
			if (t == null) {
				t = new Thread(this);
				t.start();
			}
		}
	}
	{% endfor %}

  // Constructor for main class
  {{model.name}}() {
    // Instantiate global variables
    {% for v in c.variables %}
    {{v.name}} = {% if v.type.size > 1 %}new {{v.type|javatype}} {% endif %}{{v|initialvalue(o)}};
    {% endfor %}
	  {{model.name}}.Keeper k = new {{model.name}}.Keeper();
	  {% for sm in c.statemachines %}
		T_{{sm.name}} = new {{model.name}}.{{sm.name}}Thread(k);
	  {% endfor %}
	SyncObject = new Object();
  }

  // Start all threads
  public void startThreads() {
{% for sm in c.statemachines %}
    T_{{sm.name}}.start();
{% endfor %}
  }

  // Join all threads
  public void joinThreads() {
    while (true) {
      try {
    {% for sm in c.statemachines %}
			  T_{{sm.name}}.join();
    {% endfor %}
        break;
			} catch (InterruptedException e) {
        e.printStackTrace();
      }
		}
  }

	// Run application
	public static void main(String args[]) {
    {{model.name}} ap = new {{model.name}}();
    ap.startThreads();
    ap.joinThreads();
	}
	{% endfor %}
}
