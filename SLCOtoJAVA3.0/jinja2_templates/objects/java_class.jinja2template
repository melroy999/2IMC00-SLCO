// Representation of the SLCO class {{ model.name }}
private static class {{ model.name }} implements SLCO_Class {
    {% if model.state_machines | length > 0 %}
    // The threads
    {% for sm in model.state_machines %}
    private final Thread T_{{ sm.name }};
    {% endfor %}

    {% endif %}
    {% if model.variables | length > 0 %}
    // Global variables
    {% for v in model.variables %}
    private volatile {{ v | render_type }} {{ v.name }};
    {% endfor %}

    {% endif %}
    {% for sm in model.state_machines %}
    {{ sm | render_state_machine | indent(4, False) }}

    {% endfor %}
    {{ model.name }}({% for v in model.variables %}{{ v | render_type }} {{ v.name }}{{ ", " if not loop.last }}{% endfor %}) {
        {% if model.variables | length > 0 %}
        // Create a lock manager.
        LockManager lockManager = new LockManager({ model.number_of_locks });

        // Instantiate global variables
        {% for v in model.variables %}
        this.{{ v.name }} = {{ v.name }};
        {% endfor %}

        {% endif %}
        {% if model.state_machines | length > 0 %}
        // Instantiate state machines
        {% for sm in model.state_machines %}
        Thread T_{{ sm.name }} = new {{ sm.name }}(lockManager);
        {% endfor %}
        {% endif %}
    }

    // Start all threads
    public void startThreads() {
        {% for sm in model.state_machines %}
        T_{{ sm.name }}.start();
        {% endfor %}
    }

    // Join all threads
    public void joinThreads() {
        while (true) {
            try {
                {% for sm in model.state_machines %}
                T_{{ sm.name }}.join();
                {% endfor %}
                break;
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}