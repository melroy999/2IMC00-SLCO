// Define the states fot the state machine {{ model_name }}.
interface {{ class_name }}_{{ model_name }}Thread_States {
    enum States {
        {% for s in states %}
        {{ s }}{{ ", " if not loop.last }}
        {% endfor %}
    }
}

// Representation of the SLCO state machine {{ model_name }}.
class {{ class_name }}_{{ model_name }}Thread extends Thread implements {{ class_name }}_{{ model_name }}Thread_States {
    {{ constructor_variable_declarations | indent(4, False) | trim }}

    {% if constructor_contract != "" %}
    {{ constructor_contract | indent(4, False) | trim }}
    {% endif %}
    {{ class_name }}_{{ model_name }}Thread(LockManager lockManagerInstance) {
        {{ constructor_body | indent(8, False) | trim }}
    }

    // Main state machine loop.
    private void exec() {
        while(true) {
            {% if settings.verify_locks %}
            lockManager.check_no_locks();
            {% endif %}
            switch(currentState) {
                {% for s in states %}
                case {{ s }} -> exec_{{ s }}();
                {% endfor %}
            }
        }
    }

    // The thread's run method.
    public void run() {
        try {
            exec();
        } catch(Exception e) {
            lockManager.exception_unlock();
            throw e;
        }
    }
    {% for t in transitions %}

    {{ t | indent(4, False) }}
    {% endfor %}
    {% for decision_structure in decision_structures %}

    {{ decision_structure | indent(4, False) | trim }}
    {% endfor %}
}