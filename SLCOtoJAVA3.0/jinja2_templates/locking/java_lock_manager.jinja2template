// Lock class to handle locks of global variables
private static class LockManager {
    // The locks
    private final ReentrantLock[] locks;

    LockManager(int noVariables) {
        locks = new ReentrantLock[noVariables];
        for(int i = 0; i < locks.length; i++) {
            locks[i] = new ReentrantLock();
        }
    }

    // Lock method
    void acquire_locks(int[] lock_ids, int end) {
        Arrays.sort(lock_ids, 0, end);
        for (int i = 0; i < end; i++) {
            locks[lock_ids[i]].lock();
        }
    }

    {% if verify_locks %}
    // Lock check
    void check_lock(int lock_id) {
        if(!locks[lock_id].isHeldByCurrentThread()) {
            throw new RuntimeException("Atomicity is violated due to not having locked a class variable.");
        }
    }

    {% endif %}
    // Unlock method
    void release_locks(int[] lock_ids, int end) {
        for (int i = 0; i < end; i++) {
            locks[lock_ids[i]].unlock();
        }
    }

    // Unlock method during exceptions
    void exception_unlock() {
        System.err.println("Exception encountered. Releasing all locks currently owned by " + Thread.currentThread().getName() + ".");
        for(ReentrantLock lock: locks) {
            while(lock.isHeldByCurrentThread()) {
                lock.unlock();
            }
        }
    }
}