model Test {
    actions a b

	classes
	P {
        variables Boolean[2] x Integer y
        state machines
        SM1 {
            variables Integer i Integer j Byte k
            initial SMC0 states SMC1
            transitions
            from SMC0 to SMC0 {
                y = 1 - 2 - 3 - 4;
                y = i + -1 * (j + i);
                y = i * -(j * -i);
                y = 5 + 10 * -(((j + i)));
                y = -i + -(((j + k)));
                y = 2 * i - (4 * j + (2 * k - 3 * y));
                y = i + 2 * i - 3 * i + 5 * -i;
                y = 10 * -(-(j + i));
                y = i - i;
                y := (y + 1)**2;
                x[0] and x[1] or False;
                x[0] or x[0] or x[1];
                x[0] or x[1] or False;
                x[0] and x[1];
                x[0] and x[1] and True;
                x[0] and x[1] and 1 < 5;
                x[0] xor x[1];
                x[0] xor x[1] xor True;
                x[0] xor false xor true;
                (x[0] xor false) xor true;
                x[0] xor (false xor true);
                [x[0];];
                (y + 1) + 1 > 2;
                2 * (y + 1) + 1 > 2;
                y := 1 + 2 + 3 + 4;
                y := (1 + 2) + (3 + 4);
                y := ((1 + 2) + 3) + 4;
                [y := 1 - 2 + 3 - 4];
                y := 1 - (2 + (3 - 4));
                y := (1 - 2) + (3 - 4);
                y := 10 * (5 - 10);
                y := (10 - 5) * y;
                y := 2**i;
                y := 2**3**2;
                y := (2**3)**2;
                y := i - 1 - 1;
                y := i - 2 - 1;
                y := i - (2 - 1);
                y := i - 2 - 3;
                y := i - (2 - 3);
                y := 1 - i - 1;
                y := 1 - (i - 1);
                x[y] := True;
                x[y] := not(not(x[y]));
                x[y] := not(not(True));
                x[y] := not(True);
                x[y] := not(x[y]);
                y := -(-1);
                y := -(-(1));
                y := -(-y);
                y := -(-(y));
                y = -i + (j * i);
                y = -i + 8 * (j - i - i);
                y = i + -1 * (j + i);
            }
        }
	}
	objects p: P(x:=[False,True],y:=1)
}
