import java.util.Random;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Arrays;

// main class
public class {{model.name}} {
  // The threads
  {% for c in model.classes %}
  {% for sm in c.statemachines %}
  java_{{sm.name}}Thread java_T_{{sm.name}};
  {% endfor %}
  {% endfor %}

  {% if add_counter %}
  // Upperbound for transition counter
  public static final long java_COUNTER_BOUND = 300000000L;

  {% endif %}
  // Enum type for state machine states
  public enum java_State {
  {% for s in states %}{{'  ' if loop.first }}{{s}}{{', ' if not loop.last }}{% endfor %}

  }

  // Global variables
  {% for c in model.classes %}
  {% for v in c.variables %}
  public {{v.type|javatype}} {{v.name}};
  {% endfor %}
  {% endfor %}

	{% for o in model.objects %}
	{% set c = o.type %}
	{% for sm in c.statemachines %}
	class java_{{sm.name}}Thread extends Thread {
		private Thread java_t;
		private String java_threadName = "{{sm.name}}Thread";
		// Current state
		private {{model.name}}.java_State java_currentState;
		// Random number generator to handle non-determinism
		private Random java_randomGenerator;
		// Volatile variable to create memory fences
		private volatile boolean fence_var;
		{% if add_counter %}
		// Counter of main while-loop iterations
		long java_transcounter;
		{% endif %}
		// Thread local variables
		{% for v in sm.variables %}
		private {{v.type|javatype}} {{v.name}};
		{% endfor %}

		// Constructor
		java_{{sm.name}}Thread () {
			java_randomGenerator = new Random();
			{% if add_counter %}
			java_transcounter = 0;
			{% endif %}
			java_currentState = {{model.name}}.java_State.{{sm.initialstate.name}};
			{% for v in sm.variables %}
			{{v.name}} = {% if v.type.size > 1 %}new {{v|javatype}} {% endif %}{{v|variabledefault}};
			{% endfor %}
		}

		// Execute method
		public void exec() {
			// variable to store non-deterministic choices
			int java_choice;
			{% if add_counter %}
			while(java_transcounter < java_COUNTER_BOUND) {
			{% else %}
			while(true) {
			{% endif %}
			    {% if add_counter %}
				//System.out.println(java_transcounter);
				{% endif %}
				switch(java_currentState) {
					{% for s in sm.states|select("hasoutgoingtrans", sm.transitions) %}
					case {{s.name}}:
						{% if add_counter %}
						//System.out.println("{{sm.name}}_{{s.name}} " + java_transcounter);
						{% endif %}
						{% set sout = s|outgoingtrans(sm.transitions) %}
						{% if sout|length > 1 %}
						java_choice = java_randomGenerator.nextInt({{sout|length}});
						switch(java_choice) {
							{% for i in range(0,sout|length) %}
							case {{i}}:
								//System.out.println("{{sm.name}}_{{s.name}}_{{i}}");
								{% for st in sout[i].statements %}
								{% set stloop = loop %}
								// {{st|getlabel}}
								{% set label = st|getlabel %}
								{%if label[0][0] == '[' %}
									atomic {
								        	{{st|javastatement(16,True,o)}}
										{%for guard in label%}
										{%if guard in ('>', '<','>=','<=','==','!=','&&', '||','!=') %}
										}
										{% break %}
										{%endif%}
										{%endfor%}
									}
								{% else %} 
									{{st|javastatement(16,True,o)}}
								    {%for guard in label%}
									{%if guard in ('>', '<','>=','<=','==','!=','&&', '||','!=') %}
									}
									{% break %}
									{%endif%}
									{%endfor%}
								{% endif %} 
								{% endfor %}
								// Change state
								//System.out.println("{{sm.name}}_{{s.name}}_{{i}}_changestate");
								java_currentState = {{model.name}}.java_State.{{sout[i].target.name}};
								{% if add_counter %}
								// Increment counter
								//System.out.println("{{sm.name}}_{{s.name}}_{{i}}_increment");
								java_transcounter++;
								{% endif %}
								break;
							{% endfor %}
						}
					  {% else %}
						{% for st in sout[0].statements %}
						//System.out.println("{{sm.name}}_{{s.name}}_{{st}}");
						// {{st|getlabel}}
						{% set label = st|getlabel %}
						{% if label[0][0] == '['%} 
						atomic {
							{{st|javastatement(16,True,o)}}
							{%for guard in label%}
								{%if guard in ('>', '<','>=','<=','==','!=','&&', '||','!=') %}
								}
								{% break %}
								{%endif%}
							{%endfor%}
						}
						{% else %} 
						{{st|javastatement(16,True,o)}}
						{%for guard in label%}
							{%if guard in ('>', '<','>=','<=','==','!=','&&', '||','!=') %}
							}
							{% break %}
							{%endif%}
						{%endfor%}
						{% endif %} 
						{% endfor %}
						// Change state
						java_currentState = {{model.name}}.java_State.{{sout[0].target.name}};
						{% if add_counter %}
						// Increment counter
						java_transcounter++;
						{% endif %}
						{% endif %}
						break;
					{% endfor %}
					default:
						return;
				}
			}
		}

		// Run method
		public void run() {
			exec();
		}

		// Start method
		public void start() {
			if (java_t == null) {
				java_t = new Thread(this);
				java_t.start();
			}
		}
	}
	{% endfor %}

	// Constructor for main class
	{{model.name}}() {
		// Instantiate global variables
		{% for v in c.variables %}
		{{v.name}} = {% if v.type.size > 1 %}new {{v.type|javatype}} {% endif %}{{v|initialvalue(o)}};
		{% endfor %}
		{% for sm in c.statemachines %}
		java_T_{{sm.name}} = new {{model.name}}.java_{{sm.name}}Thread();
		{% endfor %}
	}

	// Start all threads
	public void startThreads() {
		{% for sm in c.statemachines %}
		java_T_{{sm.name}}.start();
		{% endfor %}
	}

	// Join all threads
	public void joinThreads() {
		while (true) {
			try {
				{% for sm in c.statemachines %}
				java_T_{{sm.name}}.join();
				{% endfor %}
				break;
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	// Run application
	public static void main(String args[]) {
    {{model.name}} java_ap = new {{model.name}}();
    java_ap.startThreads();
    java_ap.joinThreads();
	}
	{% endfor %}
}
