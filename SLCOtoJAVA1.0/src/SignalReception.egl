package GeneratedCode;

import java.util.ArrayList;
import GenericCode.SharedVariable;
import GenericCode.BooleanExpression;
import GenericCode.Class;
import GenericCode.SignalMessage;
import GenericCode.ReceiveSignal;
import GenericCode.SharedVariableList;


public class ReceiveSignal_[%=transition.name%] extends ReceiveSignal{
	public [%= stateMachine.name%] sm;
	public ReceiveSignal_[%=transition.name%](Class slcoClass, SharedVariableList sharedVariables, [%= stateMachine.name%] sm) {
		super(slcoClass, sharedVariables);
		this.sm = sm;
		// TODO Auto-generated constructor stub
	}
	@Override
	public boolean evaluate() {
		// TODO Auto-generated method stub
		SignalMessage signal = slcoClass.getPortName("port_[%=statement.port.name%]").channel.peek();
	    [%generateConditionMethod(vertex, class, stateMachine, transition, statement);%]
	}	
	[%for(signalExpression in statement.arguments){%]
    [%if(signalExpression.isTypeOf(SignalArgumentVariable)){%]
    @Override
	public void receive() {
		// TODO Auto-generated method stub
		SignalMessage signal = slcoClass.getPortName("port_[%=statement.port.name%]").channel.peek();
        [%generateAssignmentMethod(vertex, class, stateMachine, transition, statement);%]
	[%break;%]
    [%}%]
    [%}%]
	}	
}
[* the body of condition method*]
[%operation generateConditionMethod(vertex : slco::Vertex, class : slco::Class, stateMachine : slco::StateMachine, transition : slco::Transition, statement : slco::Statement){%]
[% var isExpressionAsGuard : Integer = 0;%]
[%var numberOfClassVariables: Integer = 0;%]
[%for (statement in transition.statements){%]
[%if (statement.isTypeOf(SignalReception)){%]
	[%var s : String; var count : Integer = 0;%]
	[%if(statement.arguments.exists(a|a.isTypeOf(SignalArgumentExpression))){%]
	[%for(signalExpression in statement.arguments){%]
	[%if(signalExpression.isTypeOf(SignalArgumentExpression)){%]
	[%if(count > 0){%]
	[%s = s+" && " + "("+"("+ generateExpressionType(signalExpression.expression)+")"+"(signal.args["+ statement.arguments.indexOf(signalExpression)+"])=="+generateExpression(signalExpression.expression, class, stateMachine)+")";%]
	[%}%]
	[%else{%]
	[%s = " && ("+ generateExpressionType(signalExpression.expression)+")"+"signal.args["+ statement.arguments.indexOf(signalExpression)+"]=="+generateExpression(signalExpression.expression, class, stateMachine);%]
	[%}%]
	[%count = count +1;%]
	[%}%]
	[%}%]
	[%}%]
	[%if(statement.condition.isDefined()){%]
	[% var sCondition : String = generateOtherExpression(statement.condition, statement, class, stateMachine);%]
	[%s = s + " && " + sCondition; %]
	[%}%]
		return ((String)signal.name).equals("[%=statement.SignalName%]") && signal.args.length == [%=statement.arguments.size()%][%=s%];
[%}%][%}%][%}%]
[%operation generateOtherExpression(expression : slco::Expression, statement : slco::Statement, class : slco::Class, stateMachine : slco::StateMachine) : String{%]
[%var returnValue : String;%]
[%if(expression.isTypeOf(IntegerConstantExpression) or expression.isTypeOf(BooleanConstantExpression)){%][% returnValue = (expression.value).toString();%][%}%]
[%else if(expression.isTypeOf(StringConstantExpression)){%][%returnValue = ('"'+(expression.value).toString()+'"');%][%}%]
[%else if(expression.isTypeOf(VariableExpression)){%][%returnValue = generateOtherVariableExpression(expression.variable, statement, class, stateMachine);%][%}%]
[%else if(expression.isTypeOf(BinaryOperatorExpression)){returnValue = generateOtherExpression(expression.operand1, statement, class, stateMachine) + " "+ generateOperator(expression) + " " + generateOtherExpression(expression.operand2, statement, class, stateMachine);%][%}%]
[% return returnValue;%]
[%}%]
[%operation generateOtherVariableExpression(variable : slco::Variable, statement : slco::Statement, class : slco::Class, stateMachine : slco::StateMachine) : String{%]
[%var returnValue : String;%]
[%for(signalExpression in statement.arguments){%]
[%if (signalExpression.isTypeOf(SignalArgumentVariable)){%]
[%if (signalExpression.variable.name = variable.name){%]
[*%returnValue = (variable.name+"Temp").toString;%*]
[%returnValue ="("+"("+ generateVariableExpressionType(signalExpression.variable)+")"+"(signal.args["+ statement.arguments.indexOf(signalExpression)+"]))";%]
[% return returnValue;%]
[%}%]
[%}%]
[%}%]
[%if (class.variables.exists(v|v.name = variable.name)){%]
[%returnValue = ("("+generateVariableExpressionType(variable)+")slcoClass.getSharedVariableName(" + '"'+ variable.name +'"'+").getValue()").toString;%]
[%}%]
[%else{%][%returnValue = ("sm."+variable.name).toString;%][%}%]
[% return returnValue;%]
[%}%]
[* Generate the right of "Assignment": BinaryOperatorExpression*]
[%operation generateExpression(expression : slco::Expression, class : slco::Class, stateMachine : slco::StateMachine) : String{%]
[%var returnValue : String;%]
[%if(expression.isTypeOf(IntegerConstantExpression) or expression.isTypeOf(BooleanConstantExpression)){%][% returnValue = (expression.value).toString();%][%}%]
[%else if(expression.isTypeOf(StringConstantExpression)){%][%returnValue = ('"'+(expression.value).toString()+'"');%][%}%]
[%else if(expression.isTypeOf(VariableExpression)){%][%returnValue = generateVariableExpression(expression.variable, class, stateMachine);%][%}%]
[%else if(expression.isTypeOf(BinaryOperatorExpression)){returnValue = "("+generateExpression(expression.operand1, class, stateMachine) + generateOperator(expression) + generateExpression(expression.operand2, class, stateMachine)+")";%][%}%]
[% return returnValue;%]
[%}%]
[* Generate the right of "Assignment": VariableExpression*]
[%operation generateVariableExpression(variable : slco::Variable, class : slco::Class, stateMachine : slco::StateMachine) : String{%]
[%var returnValue : String;%]
[* class variables*]
[%if (class.variables.exists(v|v.name = variable.name)){%]
[%returnValue = ("("+generateVariableExpressionType(variable)+")slcoClass.getSharedVariableName(" + '"'+ variable.name +'"'+").getValue()").toString;%]
[%}%]
[%else{%][%returnValue = ("sm."+variable.name).toString;%][%}%]
[% return returnValue;%]
[%}%]
[%operation generateVariableExpressionType(variable : slco::Variable) : String{%]
[%var returnValue : String;%]
[%if (variable.type = PrimitiveTypeEnum#Integer){%][% returnValue = "Integer";%][%}%]
[%else if (variable.type = PrimitiveTypeEnum#Boolean){%][% returnValue = "boolean";%][%}%]
[%else if (variable.type = PrimitiveTypeEnum#String){%][%returnValue = "String";%][%}%]
[% return returnValue;%]
[%}%]
[* generate Operator*]
[%operation generateOperator(expression : slco::Expression){%]
[%var returnValue : String;%]
[%if (expression.operator = slco::OperatorEnum#atLeast){returnValue= ">=";}%]
[%else if (expression.operator = slco::OperatorEnum#atMost){returnValue= "<=";}%]
[%else if (expression.operator = slco::OperatorEnum#differs){returnValue= "!=";}%]
[%else if (expression.operator = slco::OperatorEnum#equals){returnValue= "==";}%]
[%else if (expression.operator = slco::OperatorEnum#subtract){returnValue= "-";}%]
[%else if (expression.operator = slco::OperatorEnum#add){returnValue= "+";}%]
[%else if (expression.operator = slco::OperatorEnum#`and`){returnValue= "&&";}%]
[%else if (expression.operator = slco::OperatorEnum#`or`){returnValue= "||";}%]
[% return returnValue;%]
[%}%]
[* the body of Assignment method in Reception*]
[%operation generateAssignmentMethod(vertex : slco::Vertex, class : slco::Class, stateMachine : slco::StateMachine, transition : slco::Transition, statement : slco::Statement){%]
[%var returnValue : String = null;%]
[%if(statement.arguments.exists(a|a.isTypeOf(SignalArgumentVariable))){%]
[%for(signalExpression in statement.arguments){%]
[%if(signalExpression.isTypeOf(SignalArgumentVariable)){%]
[%if (class.variables.exists(v|v.name = signalExpression.variable.name)){%]
[%returnValue = "("+generateVariableExpressionType(signalExpression.variable)+")"+"signal.args["+statement.arguments.indexOf(signalExpression)+"]";%]
[%returnValue = (("slcoClass.getSharedVariableName(" + '"'+ signalExpression.variable.name +'"'+").setValue(").toString + returnValue + ");");%]
		[%= returnValue%]
[%}%]
[%else{%][%returnValue = ("sm."+signalExpression.variable.name).toString + "="+"("+generateVariableExpressionType(signalExpression.variable)+")"+"signal.args["+statement.arguments.indexOf(signalExpression)+"];";%]
		[%= returnValue%]
[%}%]
[%}%][%}%][%}%]
[%}%]