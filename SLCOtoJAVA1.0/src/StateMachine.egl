package GeneratedCode;

import java.util.ArrayList;
import java.util.Random;
import GenericCode.Class;
import GenericCode.SignalMessage;
import GenericCode.StateMachine;
import GenericCode.SharedVariable;
import GenericCode.SharedVariableList;


[%var m = Model.allInstances().first();%]
public class [%= stateMachine.name%] extends StateMachine implements Runnable {
    [%generateStateMachineVariableDeclaration(stateMachine);%]

    public [%= stateMachine.name%](Class slcoClass) {
		super(slcoClass);
		[%generateStateMachineVariableInitialization(stateMachine);%]
	}
	
    [* the body of stateMachine class*]
    public void run() {
		[%var currentVertex = stateMachine.vertices.selectOne(v|v.isTypeOf(Initial));%]
		String currentState = "[%=currentVertex.name%]";
 		while(true){
			switch(currentState){
            [% for(vertex in stateMachine.vertices){%]
            [%if (not vertex.isTypeOf(Final)){%]
		 	case "[%=vertex.name%]":
            [%if (vertex.outgoing.size() > 1){%]
			[%var doesDalayStatementExist : Boolean = false;%]
            [%var collectionOfDelayStates : String;%]
            [%var listOfDelayTransitions : Sequence;%]
            [%if (vertex.outgoing.size() > 1){%]
            [% for(transition in vertex.outgoing){%]
            [%if (transition.statements.at(0).isTypeOf(Delay)){%]
            [%doesDalayStatementExist = true;%]
            [% listOfDelayTransitions.add(transition);%]
            [%if (collectionOfDelayStates = ""){%][%collectionOfDelayStates =  "nextTransition.equals("+ '"' + transition.name + '"' + ")";%][%}%]
            [%else {%][%collectionOfDelayStates = collectionOfDelayStates + " || nextTransition.equals("+ '"'+ transition.name + '"' + ")";%][%}%]
            [%}%][%}%]
            [%if (doesDalayStatementExist){%]				long start = System.currentTimeMillis();
            [%}%]
            [%}%]
				boolean isExecutableTransition = false;
				String nextTransition; 
				String[] transitions = {[%for(transition in vertex.outgoing){%]"[%if (transition = vertex.outgoing.last()){%][%= transition.name%]"[%}%][%else {%][%= transition.name%]",[%}%][%}%]};
				while(!isExecutableTransition){
					int idx = new Random().nextInt(transitions.length);
 					nextTransition = transitions[idx];
					[%if (doesDalayStatementExist){%]
					while([%= collectionOfDelayStates%]){
						[%for (transition in listOfDelayTransitions){%]
						if(nextTransition.equals("[%= transition.name%]")){
							if((System.currentTimeMillis() - start) >= [%= transition.statements.at(0).value%]){
								break;
							}
						}
						[%}%]
						idx = new Random().nextInt(transitions.length);
						nextTransition = transitions[idx];
					}
					[%}%]
					switch(nextTransition){
					[%for(transition in vertex.outgoing){%]
					case "[%=transition.name%]":
						[%generateOtherStatement(transition.source, class, stateMachine, transition);%]
                 
                    [%}%]					}
				}        
				break;
            [%}%]
            [%else {%]
            [%generateStatement(vertex, class, stateMachine, vertex.outgoing.at(0));%]
     
            [%}%]
            [%}%]
            [%else {%]
			case "[%=vertex.name%]":
				return;
            [%}%]
            [%}%]
			}
		}
	}
} 
[%operation generateStatement(vertex : slco::Vertex, class : slco::Class, stateMachine : slco::StateMachine, transition : slco::Transition){%]
[*[%if (not vertex.isTypeOf(Final)){%]*]
[%for (statement in transition.statements){%]
[* the type of statement is "Delay"*]
[% if (statement.isTypeOf(Delay)){%]
					try {
						Thread.sleep([%= statement.value%]);
					} catch (InterruptedException e) {
		            // TODO Auto-generated catch block
		                    e.printStackTrace();
					}
	                currentState = "[%=transition.target.name%]";
                    System.out.println("Transition: [%=transition.name%]");
[%}%]
[* the type of statement is "Assignment"*]
[% else if (statement.isTypeOf(Assignment)){%]
[* class variables*]
[%var variableName : OrderedSet;%]
[%var resultvariableName : String = null;%]
[%if (class.variables.exists(v|v.name = statement.variable.name)){%]
[%variableName.add(statement.variable.name);%]
[%}%]						
				SharedVariableList s_[%=transition.name%] = new SharedVariableList();
                [% variableName.addAll(generateAssignmentStatement(statement, class, stateMachine));%]
				[%if (not variableName.isEmpty()){%]
				[%var copyVariableName : OrderedSet;%]
                [%copyVariableName.addAll(variableName.sortBy(l|l.toString()));%]    
			    [%for (v in copyVariableName){%]
				s_[%=transition.name%].add(slcoClass.getSharedVariableName("[%=v%]"));
				[%}%]
				[%}%]
				
				Assignment_[%=transition.name%] assignment_[%=transition.name%] = new Assignment_[%=transition.name%](slcoClass, s_[%=transition.name%], this);
				assignment_[%=transition.name%].lockVAssignUnlockV();
				currentState = "[%=transition.target.name%]";
				System.out.println("Transition: [%=transition.name%]");
[%}%]
[* the type of statement is "SendSignal"*]
[% else if (statement.isTypeOf(SendSignal)){%]
[%var variableName : OrderedSet;%]
[%var resultvariableName : String = null;%]
[%for(expression in statement.arguments){%]
[% variableName.addAll(generateClassVarsExpression(expression, class, stateMachine));%]
[%}%]
				SharedVariableList s_[%=transition.name%] = new SharedVariableList();
                [%if (not variableName.isEmpty()){%]
				[%var copyVariableName : OrderedSet;%]
                [%copyVariableName.addAll(variableName.sortBy(l|l.toString()));%]    
			    [%for (v in copyVariableName){%]
				s_[%=transition.name%].add(slcoClass.getSharedVariableName("[%=v%]"));
				[%}%]
				[%}%]
				slcoClass.getPortName("port_[%=statement.port.name%]").channel.send(new SendSignal_[%=transition.name%](slcoClass, s_[%=transition.name%], this), "[%=transition.name%]", false);
			    currentState = "[%=transition.target.name%]";
[%}%]
[* the type of statement is "Expression"*]
[% else if (statement.isTypeOf(BinaryOperatorExpression)){%]
[%var variableName : OrderedSet;%]
[%var resultvariableName : String = null;%]
[% variableName.addAll(generateClassVarsExpression(statement.operand1, class, stateMachine));%]
[% variableName.addAll(generateClassVarsExpression(statement.operand2, class, stateMachine));%]
                SharedVariableList s_[%=transition.name%] = new SharedVariableList();
                [%if (not variableName.isEmpty()){%]
				[%var copyVariableName : OrderedSet;%]
                [%copyVariableName.addAll(variableName.sortBy(l|l.toString()));%]    
			    [%for (v in copyVariableName){%]
				s_[%=transition.name%].add(slcoClass.getSharedVariableName("[%=v%]"));
				[%}%]
				[%}%]
				BooleanExpression_[%=transition.name%] expression_[%=transition.name%] = new BooleanExpression_[%=transition.name%](slcoClass, s_[%=transition.name%], this);
				expression_[%=transition.name%].lockVEvaluateUnlockV(false);
				currentState = "[%=transition.target.name%]";
				System.out.println("Transition: [%=transition.name%]");
[%}%]
[* the type of statement is "ReceiveSignal"*]
[% else if (statement.isTypeOf(SignalReception)){%]
					[%var variableName : OrderedSet;%]
					[%var resultvariableName : String = null;%]
                    [%for(signalExpression in statement.arguments){%]
                    [%if(signalExpression.isTypeOf(SignalArgumentVariable)){%]
                    [%if (class.variables.exists(v|v.name = signalExpression.variable.name)){%]
 					[% variableName.add(signalExpression.variable.name);%]
                    [%}%]
                    [%}%]
                    [%}%]
                SharedVariableList s_[%=transition.name%] = new SharedVariableList();
                    [%if (not variableName.isEmpty()){%]
				    [%var copyVariableName : OrderedSet;%]
                    [%copyVariableName.addAll(variableName.sortBy(l|l.toString()));%]    
			        [%for (v in copyVariableName){%]
				s_[%=transition.name%].add(slcoClass.getSharedVariableName("[%=v%]"));
				    [%}%]
				    [%}%]
			    SignalMessage signal = slcoClass.getPortName("port_[%=statement.port.name%]").channel.receive(new ReceiveSignal_[%=transition.name%](slcoClass, s_[%=transition.name%], this),"[%=transition.name%]", false);
				currentState = "[%=transition.target.name%]";
[%}%]
[%}%]
				break;[%}%]
[*Generate statements if one state has more than one transitions*]
[%operation generateOtherStatement(vertex : slco::Vertex, class : slco::Class, stateMachine : slco::StateMachine, transition : slco::Transition){%]
[*[%if (not vertex.isTypeOf(Final)){%]*]
[% var isExpressionAsGuard : Integer = 0;%]
[%var numberOfClassVariables: Integer = 0;%]
[%for (statement in transition.statements){%]
[* the type of statement is "Delay"*]
[% if (statement.isTypeOf(Delay)){%]
							isExecutableTransition = true;
							currentState = "[%=transition.target.name%]";
							System.out.println("Transition: [%=transition.name%]");
							break;[%}%]
[* the type of statement is "Assignment"*]
[% else if (statement.isTypeOf(Assignment)){%]
[* class variables*]
[%var variableName : OrderedSet;%]
[%var resultvariableName : String = null;%]
[%if (class.variables.exists(v|v.name = statement.variable.name)){%]
[%variableName.add(statement.variable.name);%]
[%}%]					    [% variableName.addAll(generateAssignmentStatement(statement, class, stateMachine));%]
						    SharedVariableList s_[%=transition.name%] = new SharedVariableList();
                            [%if (not variableName.isEmpty()){%]
				            [%var copyVariableName : OrderedSet;%]
                            [%copyVariableName.addAll(variableName.sortBy(l|l.toString()));%]    
			                [%for (v in copyVariableName){%]
				            s_[%=transition.name%].add(slcoClass.getSharedVariableName("[%=v%]"));
				            [%}%]
				            [%}%]
							
							Assignment_[%=transition.name%] assignment_[%=transition.name%] = new Assignment_[%=transition.name%](slcoClass, s_[%=transition.name%], this);
							assignment_[%=transition.name%].lockVAssignUnlockV();
							isExecutableTransition = true;
							currentState = "[%=transition.target.name%]";
							System.out.println("Transition: [%=transition.name%]");
[%}%]
[* the type of statement is "SendSignal"*]
[% else if (statement.isTypeOf(SendSignal)){%]
[%var variableName : OrderedSet;%]
[%var resultvariableName : String = null;%]
[%for(expression in statement.arguments){%]
[% variableName.addAll(generateClassVarsExpression(expression, class, stateMachine));%]
[%}%]
                			SharedVariableList s_[%=transition.name%] = new SharedVariableList();
                            [%if (not variableName.isEmpty()){%]
				            [%var copyVariableName : OrderedSet;%]
                            [%copyVariableName.addAll(variableName.sortBy(l|l.toString()));%]    
			                [%for (v in copyVariableName){%]
				            s_[%=transition.name%].add(slcoClass.getSharedVariableName("[%=v%]"));
				            [%}%]
				            [%}%]
                            boolean isExecutable_[%=transition.name%] = false;
							isExecutable_[%=transition.name%] =slcoClass.getPortName("port_[%=statement.port.name%]").channel.send(new SendSignal_[%=transition.name%](slcoClass, s_[%=transition.name%], this), "[%=transition.name%]", true);
							if(isExecutable_[%=transition.name%]){
								isExecutableTransition = true;
								currentState = "[%=transition.target.name%]";
									[*System.out.println("[%=transition.name%]");*]
							}
							break;[%}%]
[* the type of statement is "Expression"*]
[% else if (statement.isTypeOf(BinaryOperatorExpression)){%]
[%var variableName : OrderedSet;%]
[%var resultvariableName : String = null;%]
[% variableName.addAll(generateClassVarsExpression(statement.operand1, class, stateMachine));%]
[% variableName.addAll(generateClassVarsExpression(statement.operand2, class, stateMachine));%]
                			SharedVariableList s_[%=transition.name%] = new SharedVariableList();
                            [%if (not variableName.isEmpty()){%]
				            [%var copyVariableName : OrderedSet;%]
                            [%copyVariableName.addAll(variableName.sortBy(l|l.toString()));%]    
			                [%for (v in copyVariableName){%]
				            s_[%=transition.name%].add(slcoClass.getSharedVariableName("[%=v%]"));
				            [%}%]
				            [%}%]
							BooleanExpression_[%=transition.name%] expression_[%=transition.name%] = new BooleanExpression_[%=transition.name%](slcoClass, s_[%=transition.name%], this);
							boolean isExecutable_[%=transition.name%] = expression_[%=transition.name%].lockVEvaluateUnlockV(true);
						    if(isExecutable_[%=transition.name%]){
							    isExecutableTransition = true;
							    currentState = "[%=transition.target.name%]";
							    System.out.println("Transition: [%=transition.name%]");	   
							}     
							break;          [%}%]
[* the type of statement is "ReceiveSignal"*]
[% else if (statement.isTypeOf(SignalReception)){%]
					[%var variableName : OrderedSet;%]
					[%var resultvariableName : String = null;%]
                    [%for(signalExpression in statement.arguments){%]
                    [%if(signalExpression.isTypeOf(SignalArgumentVariable)){%]
                    [%if (class.variables.exists(v|v.name = signalExpression.variable.name)){%]
 					[% variableName.add(signalExpression.variable.name);%]
                    [%}%]
                    [%}%]
                    [%}%]
                    SharedVariableList s_[%=transition.name%] = new SharedVariableList();
                    [%if (not variableName.isEmpty()){%]
				    [%var copyVariableName : OrderedSet;%]
                    [%copyVariableName.addAll(variableName.sortBy(l|l.toString()));%]    
			        [%for (v in copyVariableName){%]
				    s_[%=transition.name%].add(slcoClass.getSharedVariableName("[%=v%]"));
				    [%}%]
				    [%}%]
				    boolean isExecutable_[%=transition.name%] = false;			
					SignalMessage signal = slcoClass.getPortName("port_[%=statement.port.name%]").channel.receive(new ReceiveSignal_[%=transition.name%](slcoClass, s_[%=transition.name%], this), "[%=transition.name%]", true);
					   if(signal != null){
						  isExecutableTransition = true;
                          currentState = "[%=transition.target.name%]";
                          System.out.println("[%=transition.name%]");
                       }
					break;       [%}%][%}%][%}%]
[* Generate the Assignment*]
[%operation generateAssignmentStatement(statement : slco::Statement, class : slco::Class, stateMachine : slco::StateMachine) : OrderedSet{%]
[%var returnValue : OrderedSet;%]
[* the type of expression in "Assignment" is "VariableExpression"*]
[%if(statement.expression.isTypeOf(VariableExpression)){%][% returnValue.addAll(generateClassVarsExpression(statement.expression, class, stateMachine));%]
[%}%]
[* the type of expression in "Assignment" is "BinaryOperatorExpression"*]
[%else if(statement.expression.isTypeOf(BinaryOperatorExpression)){%][%returnValue.addAll(generateClassVarsExpression(statement.expression.operand1, class, stateMachine)); returnValue.addAll(generateClassVarsExpression(statement.expression.operand2, class, stateMachine));%]
[%}%]
[* the type of expression in "Assignment" is "ConstantExpression"*]
[% return returnValue;%]
[%}%]
[* Generate the right of "Assignment": BinaryOperatorExpression*]
[%operation generateClassVarsExpression(expression : slco::Expression, class : slco::Class, stateMachine : slco::StateMachine) : OrderedSet{%]
[%var returnValue : OrderedSet;%]
[%if(expression.isTypeOf(VariableExpression)){%][%returnValue.addAll(generateClassVarExpression(expression.variable, class, stateMachine));%][%}%]
[%else if(expression.isTypeOf(BinaryOperatorExpression)){%][%returnValue.addAll(generateClassVarsExpression(expression.operand1, class, stateMachine)); returnValue.addAll(generateClassVarsExpression(expression.operand2, class, stateMachine));%]
[%}%]
[% return returnValue;%]
[%}%]
[* Generate the right of "Assignment": VariableExpression*]
[%operation generateClassVarExpression(variable : slco::Variable, class : slco::Class, stateMachine : slco::StateMachine) : OrderedSet{%]
[%var returnValue :OrderedSet;%]
[%if (class.variables.exists(v|v.name = variable.name)){%]
[%returnValue.add(variable.name);%]
[%}%]
[% return returnValue;%]
[%}%]
[* Generate the right of "Assignment": BinaryOperatorExpression*]
[%operation generateExpression(expression : slco::Expression, class : slco::Class, stateMachine : slco::StateMachine) : String{%]
[%var returnValue : String;%]
[%if(expression.isTypeOf(IntegerConstantExpression) or expression.isTypeOf(BooleanConstantExpression)){%][% returnValue = (expression.value).toString();%][%}%]
[%else if(expression.isTypeOf(StringConstantExpression)){%][%returnValue = ('"'+(expression.value).toString()+'"');%][%}%]
[%else if(expression.isTypeOf(VariableExpression)){%][%returnValue = generateVariableExpression(expression.variable, class, stateMachine);%][%}%]
[%else if(expression.isTypeOf(BinaryOperatorExpression)){returnValue = "("+generateExpression(expression.operand1, class, stateMachine) + generateOperator(expression) + generateExpression(expression.operand2, class, stateMachine)+")";%][%}%]
[% return returnValue;%]
[%}%]
[* Generate the right of "Assignment": VariableExpression*]
[%operation generateVariableExpression(variable : slco::Variable, class : slco::Class, stateMachine : slco::StateMachine) : String{%]
[%var returnValue : String;%]
[* class variables*]
[%if (class.variables.exists(v|v.name = variable.name)){%]
[%returnValue = ("slcoClass.getSharedVariableName(" + '"'+ variable.name +'"'+").getValue()").toString;%]
[%}%]
[%else{%][%returnValue = (variable.name).toString;%][%}%]
[% return returnValue;%]
[%}%]
[* generate Operator*]
[%operation generateOperator(expression : slco::Expression){%]
[%var returnValue : String;%]
[%if (expression.operator = slco::OperatorEnum#atLeast){returnValue= ">=";}%]
[%else if (expression.operator = slco::OperatorEnum#atMost){returnValue= "<=";}%]
[%else if (expression.operator = slco::OperatorEnum#differs){returnValue= "!=";}%]
[%else if (expression.operator = slco::OperatorEnum#equals){returnValue= "==";}%]
[%else if (expression.operator = slco::OperatorEnum#subtract){returnValue= "-";}%]
[%else if (expression.operator = slco::OperatorEnum#add){returnValue= "+";}%]
[%else if (expression.operator = slco::OperatorEnum#`and`){returnValue= "&&";}%]
[%else if (expression.operator = slco::OperatorEnum#`or`){returnValue= "||";}%]
[% return returnValue;%]
[%}%]
[* generate generateStateMachineVariableDeclaration*]
[%operation generateStateMachineVariableDeclaration(stateMachine : slco::StateMachine){%]
[% for (variable in stateMachine.variables) { %]
[%if (variable.type = PrimitiveTypeEnum#Integer) {%]	protected int [%=variable.name%];
[%}%]
[%else if(variable.type = PrimitiveTypeEnum#Boolean){%]	protected boolean [%=variable.name%];
[%}%]
[%else if(variable.type = PrimitiveTypeEnum#String){%]
[%if(variable.initialValue.value = ""){%]	protected String [%=variable.name%];
[%}%]
[%else{%]	protected String [%=variable.name%];
[%}%]
[%}%]
[%}%]
[%}%]
[* generate generateStateMachineVariableInitialization*]
[%operation generateStateMachineVariableInitialization(stateMachine : slco::StateMachine){%]
[% for (variable in stateMachine.variables) { %]
[%if (variable.type = PrimitiveTypeEnum#Integer) {%]	    [%=variable.name%] = [%=variable.initialValue.value%];
[%}%]
[%else if(variable.type = PrimitiveTypeEnum#Boolean){%]	    [%=variable.name%] = [%=variable.initialValue.value%];
[%}%]
[%else if(variable.type = PrimitiveTypeEnum#String){%]
[%if(variable.initialValue.value = ""){%]	    [%=variable.name%] = "";
[%}%]
[%else{%]	    [%=variable.name%] = "[%=variable.initialValue.value%]";
[%}%]
[%}%]
[%}%]
[%}%]