/*
* generated by Xtext
*/
package org.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.services.TextualSlcoGrammarAccess;

public class TextualSlcoParser extends AbstractContentAssistParser {
	
	@Inject
	private TextualSlcoGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.ui.contentassist.antlr.internal.InternalTextualSlcoParser createParser() {
		org.xtext.ui.contentassist.antlr.internal.InternalTextualSlcoParser result = new org.xtext.ui.contentassist.antlr.internal.InternalTextualSlcoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getVertexAccess().getAlternatives(), "rule__Vertex__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getSignalArgumentAccess().getAlternatives(), "rule__SignalArgument__Alternatives");
					put(grammarAccess.getChannelAccess().getAlternatives(), "rule__Channel__Alternatives");
					put(grammarAccess.getTerminalExpressionAccess().getAlternatives(), "rule__TerminalExpression__Alternatives");
					put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
					put(grammarAccess.getChannelTypeAccess().getAlternatives(), "rule__ChannelType__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_3(), "rule__Model__Group_3__0");
					put(grammarAccess.getModelAccess().getGroup_4(), "rule__Model__Group_4__0");
					put(grammarAccess.getModelAccess().getGroup_5(), "rule__Model__Group_5__0");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getClassAccess().getGroup_2(), "rule__Class__Group_2__0");
					put(grammarAccess.getClassAccess().getGroup_3(), "rule__Class__Group_3__0");
					put(grammarAccess.getClassAccess().getGroup_4(), "rule__Class__Group_4__0");
					put(grammarAccess.getStateMachineAccess().getGroup(), "rule__StateMachine__Group__0");
					put(grammarAccess.getStateMachineAccess().getGroup_2(), "rule__StateMachine__Group_2__0");
					put(grammarAccess.getStateMachineAccess().getGroup_3(), "rule__StateMachine__Group_3__0");
					put(grammarAccess.getStateMachineAccess().getGroup_4(), "rule__StateMachine__Group_4__0");
					put(grammarAccess.getStateMachineAccess().getGroup_5(), "rule__StateMachine__Group_5__0");
					put(grammarAccess.getStateMachineAccess().getGroup_6(), "rule__StateMachine__Group_6__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_6(), "rule__Transition__Group_6__0");
					put(grammarAccess.getTransitionAccess().getGroup_6_1(), "rule__Transition__Group_6_1__0");
					put(grammarAccess.getDelayAccess().getGroup(), "rule__Delay__Group__0");
					put(grammarAccess.getSignalReceptionAccess().getGroup(), "rule__SignalReception__Group__0");
					put(grammarAccess.getSignalReceptionAccess().getGroup_3(), "rule__SignalReception__Group_3__0");
					put(grammarAccess.getSignalReceptionAccess().getGroup_3_1(), "rule__SignalReception__Group_3_1__0");
					put(grammarAccess.getSignalReceptionAccess().getGroup_4(), "rule__SignalReception__Group_4__0");
					put(grammarAccess.getSignalArgumentExpressionAccess().getGroup(), "rule__SignalArgumentExpression__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getSendSignalAccess().getGroup(), "rule__SendSignal__Group__0");
					put(grammarAccess.getSendSignalAccess().getGroup_3(), "rule__SendSignal__Group_3__0");
					put(grammarAccess.getSendSignalAccess().getGroup_3_1(), "rule__SendSignal__Group_3_1__0");
					put(grammarAccess.getObjectAccess().getGroup(), "rule__Object__Group__0");
					put(grammarAccess.getUnidirectionalChannelAccess().getGroup(), "rule__UnidirectionalChannel__Group__0");
					put(grammarAccess.getUnidirectionalChannelAccess().getGroup_2(), "rule__UnidirectionalChannel__Group_2__0");
					put(grammarAccess.getUnidirectionalChannelAccess().getGroup_2_1(), "rule__UnidirectionalChannel__Group_2_1__0");
					put(grammarAccess.getBidirectionalChannelAccess().getGroup(), "rule__BidirectionalChannel__Group__0");
					put(grammarAccess.getBidirectionalChannelAccess().getGroup_2(), "rule__BidirectionalChannel__Group_2__0");
					put(grammarAccess.getBidirectionalChannelAccess().getGroup_2_1(), "rule__BidirectionalChannel__Group_2_1__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getVariableAccess().getGroup_2(), "rule__Variable__Group_2__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getBracketExpressionAccess().getGroup(), "rule__BracketExpression__Group__0");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getClassesAssignment_3_1(), "rule__Model__ClassesAssignment_3_1");
					put(grammarAccess.getModelAccess().getObjectsAssignment_4_1(), "rule__Model__ObjectsAssignment_4_1");
					put(grammarAccess.getModelAccess().getChannelsAssignment_5_1(), "rule__Model__ChannelsAssignment_5_1");
					put(grammarAccess.getClassAccess().getNameAssignment_0(), "rule__Class__NameAssignment_0");
					put(grammarAccess.getClassAccess().getVariablesAssignment_2_1(), "rule__Class__VariablesAssignment_2_1");
					put(grammarAccess.getClassAccess().getPortsAssignment_3_1(), "rule__Class__PortsAssignment_3_1");
					put(grammarAccess.getClassAccess().getStateMachinesAssignment_4_1(), "rule__Class__StateMachinesAssignment_4_1");
					put(grammarAccess.getStateMachineAccess().getNameAssignment_0(), "rule__StateMachine__NameAssignment_0");
					put(grammarAccess.getStateMachineAccess().getVariablesAssignment_2_1(), "rule__StateMachine__VariablesAssignment_2_1");
					put(grammarAccess.getStateMachineAccess().getVerticesAssignment_3_1(), "rule__StateMachine__VerticesAssignment_3_1");
					put(grammarAccess.getStateMachineAccess().getVerticesAssignment_4_1(), "rule__StateMachine__VerticesAssignment_4_1");
					put(grammarAccess.getStateMachineAccess().getVerticesAssignment_5_1(), "rule__StateMachine__VerticesAssignment_5_1");
					put(grammarAccess.getStateMachineAccess().getTransitionsAssignment_6_1(), "rule__StateMachine__TransitionsAssignment_6_1");
					put(grammarAccess.getInitialAccess().getNameAssignment(), "rule__Initial__NameAssignment");
					put(grammarAccess.getStateAccess().getNameAssignment(), "rule__State__NameAssignment");
					put(grammarAccess.getFinalAccess().getNameAssignment(), "rule__Final__NameAssignment");
					put(grammarAccess.getVertexReferenceAccess().getNameAssignment(), "rule__VertexReference__NameAssignment");
					put(grammarAccess.getTransitionAccess().getNameAssignment_0(), "rule__Transition__NameAssignment_0");
					put(grammarAccess.getTransitionAccess().getSourceAssignment_2(), "rule__Transition__SourceAssignment_2");
					put(grammarAccess.getTransitionAccess().getTargetAssignment_4(), "rule__Transition__TargetAssignment_4");
					put(grammarAccess.getTransitionAccess().getStatementsAssignment_6_0(), "rule__Transition__StatementsAssignment_6_0");
					put(grammarAccess.getTransitionAccess().getStatementsAssignment_6_1_1(), "rule__Transition__StatementsAssignment_6_1_1");
					put(grammarAccess.getDelayAccess().getValueAssignment_1(), "rule__Delay__ValueAssignment_1");
					put(grammarAccess.getPortReferenceAccess().getNameAssignment(), "rule__PortReference__NameAssignment");
					put(grammarAccess.getSignalReceptionAccess().getSignalNameAssignment_1(), "rule__SignalReception__SignalNameAssignment_1");
					put(grammarAccess.getSignalReceptionAccess().getArgumentsAssignment_3_0(), "rule__SignalReception__ArgumentsAssignment_3_0");
					put(grammarAccess.getSignalReceptionAccess().getArgumentsAssignment_3_1_1(), "rule__SignalReception__ArgumentsAssignment_3_1_1");
					put(grammarAccess.getSignalReceptionAccess().getConditionAssignment_4_1(), "rule__SignalReception__ConditionAssignment_4_1");
					put(grammarAccess.getSignalReceptionAccess().getPortAssignment_7(), "rule__SignalReception__PortAssignment_7");
					put(grammarAccess.getSignalArgumentVariableAccess().getVariableAssignment(), "rule__SignalArgumentVariable__VariableAssignment");
					put(grammarAccess.getSignalArgumentExpressionAccess().getExpressionAssignment_1(), "rule__SignalArgumentExpression__ExpressionAssignment_1");
					put(grammarAccess.getAssignmentAccess().getVariableAssignment_0(), "rule__Assignment__VariableAssignment_0");
					put(grammarAccess.getAssignmentAccess().getExpressionAssignment_2(), "rule__Assignment__ExpressionAssignment_2");
					put(grammarAccess.getSendSignalAccess().getSignalNameAssignment_1(), "rule__SendSignal__SignalNameAssignment_1");
					put(grammarAccess.getSendSignalAccess().getArgumentsAssignment_3_0(), "rule__SendSignal__ArgumentsAssignment_3_0");
					put(grammarAccess.getSendSignalAccess().getArgumentsAssignment_3_1_1(), "rule__SendSignal__ArgumentsAssignment_3_1_1");
					put(grammarAccess.getSendSignalAccess().getPortAssignment_6(), "rule__SendSignal__PortAssignment_6");
					put(grammarAccess.getObjectAccess().getNameAssignment_0(), "rule__Object__NameAssignment_0");
					put(grammarAccess.getObjectAccess().getClassAssignment_2(), "rule__Object__ClassAssignment_2");
					put(grammarAccess.getPortAccess().getNameAssignment(), "rule__Port__NameAssignment");
					put(grammarAccess.getUnidirectionalChannelAccess().getNameAssignment_0(), "rule__UnidirectionalChannel__NameAssignment_0");
					put(grammarAccess.getUnidirectionalChannelAccess().getArgumentTypesAssignment_2_0(), "rule__UnidirectionalChannel__ArgumentTypesAssignment_2_0");
					put(grammarAccess.getUnidirectionalChannelAccess().getArgumentTypesAssignment_2_1_1(), "rule__UnidirectionalChannel__ArgumentTypesAssignment_2_1_1");
					put(grammarAccess.getUnidirectionalChannelAccess().getChannelTypeAssignment_4(), "rule__UnidirectionalChannel__ChannelTypeAssignment_4");
					put(grammarAccess.getUnidirectionalChannelAccess().getSourceObjectAssignment_6(), "rule__UnidirectionalChannel__SourceObjectAssignment_6");
					put(grammarAccess.getUnidirectionalChannelAccess().getSourcePortAssignment_8(), "rule__UnidirectionalChannel__SourcePortAssignment_8");
					put(grammarAccess.getUnidirectionalChannelAccess().getTargetObjectAssignment_10(), "rule__UnidirectionalChannel__TargetObjectAssignment_10");
					put(grammarAccess.getUnidirectionalChannelAccess().getTargetPortAssignment_12(), "rule__UnidirectionalChannel__TargetPortAssignment_12");
					put(grammarAccess.getBidirectionalChannelAccess().getNameAssignment_0(), "rule__BidirectionalChannel__NameAssignment_0");
					put(grammarAccess.getBidirectionalChannelAccess().getArgumentTypesAssignment_2_0(), "rule__BidirectionalChannel__ArgumentTypesAssignment_2_0");
					put(grammarAccess.getBidirectionalChannelAccess().getArgumentTypesAssignment_2_1_1(), "rule__BidirectionalChannel__ArgumentTypesAssignment_2_1_1");
					put(grammarAccess.getBidirectionalChannelAccess().getChannelTypeAssignment_4(), "rule__BidirectionalChannel__ChannelTypeAssignment_4");
					put(grammarAccess.getBidirectionalChannelAccess().getObject1Assignment_6(), "rule__BidirectionalChannel__Object1Assignment_6");
					put(grammarAccess.getBidirectionalChannelAccess().getPort1Assignment_8(), "rule__BidirectionalChannel__Port1Assignment_8");
					put(grammarAccess.getBidirectionalChannelAccess().getObject2Assignment_10(), "rule__BidirectionalChannel__Object2Assignment_10");
					put(grammarAccess.getBidirectionalChannelAccess().getPort2Assignment_12(), "rule__BidirectionalChannel__Port2Assignment_12");
					put(grammarAccess.getArgumentTypeAccess().getTypeAssignment(), "rule__ArgumentType__TypeAssignment");
					put(grammarAccess.getVariableAccess().getTypeAssignment_0(), "rule__Variable__TypeAssignment_0");
					put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
					put(grammarAccess.getVariableAccess().getIntialValueAssignment_2_1(), "rule__Variable__IntialValueAssignment_2_1");
					put(grammarAccess.getExpressionAccess().getOperatorAssignment_1_1(), "rule__Expression__OperatorAssignment_1_1");
					put(grammarAccess.getExpressionAccess().getOperand2Assignment_1_2(), "rule__Expression__Operand2Assignment_1_2");
					put(grammarAccess.getBooleanConstantExpressionAccess().getValueAssignment(), "rule__BooleanConstantExpression__ValueAssignment");
					put(grammarAccess.getIntegerConstantExpressionAccess().getValueAssignment(), "rule__IntegerConstantExpression__ValueAssignment");
					put(grammarAccess.getStringConstantExpressionAccess().getValueAssignment(), "rule__StringConstantExpression__ValueAssignment");
					put(grammarAccess.getVariableReferenceAccess().getNameAssignment(), "rule__VariableReference__NameAssignment");
					put(grammarAccess.getVariableExpressionAccess().getVariableAssignment(), "rule__VariableExpression__VariableAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.ui.contentassist.antlr.internal.InternalTextualSlcoParser typedParser = (org.xtext.ui.contentassist.antlr.internal.InternalTextualSlcoParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public TextualSlcoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(TextualSlcoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
