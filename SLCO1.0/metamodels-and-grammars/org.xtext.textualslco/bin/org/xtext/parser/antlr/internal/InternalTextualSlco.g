/*
* generated by Xtext
*/
grammar InternalTextualSlco;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.TextualSlcoGrammarAccess;

}

@parser::members {

 	private TextualSlcoGrammarAccess grammarAccess;
 	
    public InternalTextualSlcoParser(TokenStream input, TextualSlcoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected TextualSlcoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='model' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getModelKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='classes' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelAccess().getClassesKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getClassesClassParserRuleCall_3_1_0()); 
	    }
		lv_classes_4_0=ruleClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"classes",
        		lv_classes_4_0, 
        		"Class");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_5='objects' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModelAccess().getObjectsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getObjectsObjectParserRuleCall_4_1_0()); 
	    }
		lv_objects_6_0=ruleObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"objects",
        		lv_objects_6_0, 
        		"Object");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_7='channels' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getModelAccess().getChannelsKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getChannelsChannelParserRuleCall_5_1_0()); 
	    }
		lv_channels_8_0=ruleChannel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"channels",
        		lv_channels_8_0, 
        		"Channel");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_1());
    }
(	otherlv_2='variables' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassAccess().getVariablesKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getVariablesVariableParserRuleCall_2_1_0()); 
	    }
		lv_variables_3_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_3_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_4='ports' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassAccess().getPortsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getPortsPortParserRuleCall_3_1_0()); 
	    }
		lv_ports_5_0=rulePort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"ports",
        		lv_ports_5_0, 
        		"Port");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_6='state machines' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClassAccess().getStateMachinesKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getStateMachinesStateMachineParserRuleCall_4_1_0()); 
	    }
		lv_stateMachines_7_0=ruleStateMachine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"stateMachines",
        		lv_stateMachines_7_0, 
        		"StateMachine");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleStateMachine
entryRuleStateMachine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateMachineRule()); }
	 iv_ruleStateMachine=ruleStateMachine 
	 { $current=$iv_ruleStateMachine.current; } 
	 EOF 
;

// Rule StateMachine
ruleStateMachine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getStateMachineAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateMachineRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateMachineAccess().getLeftCurlyBracketKeyword_1());
    }
(	otherlv_2='variables' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStateMachineAccess().getVariablesKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateMachineAccess().getVariablesVariableParserRuleCall_2_1_0()); 
	    }
		lv_variables_3_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateMachineRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_3_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_4='initial' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStateMachineAccess().getInitialKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateMachineAccess().getVerticesInitialParserRuleCall_3_1_0()); 
	    }
		lv_vertices_5_0=ruleInitial		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateMachineRule());
	        }
       		add(
       			$current, 
       			"vertices",
        		lv_vertices_5_0, 
        		"Initial");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_6='state' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStateMachineAccess().getStateKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateMachineAccess().getVerticesStateParserRuleCall_4_1_0()); 
	    }
		lv_vertices_7_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateMachineRule());
	        }
       		add(
       			$current, 
       			"vertices",
        		lv_vertices_7_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_8='final' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStateMachineAccess().getFinalKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateMachineAccess().getVerticesFinalParserRuleCall_5_1_0()); 
	    }
		lv_vertices_9_0=ruleFinal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateMachineRule());
	        }
       		add(
       			$current, 
       			"vertices",
        		lv_vertices_9_0, 
        		"Final");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_10='transitions' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStateMachineAccess().getTransitionsKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateMachineAccess().getTransitionsTransitionParserRuleCall_6_1_0()); 
	    }
		lv_transitions_11_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateMachineRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_11_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getStateMachineAccess().getRightCurlyBracketKeyword_7());
    }
)
;







// Entry rule entryRuleInitial
entryRuleInitial returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitialRule()); }
	 iv_ruleInitial=ruleInitial 
	 { $current=$iv_ruleInitial.current; } 
	 EOF 
;

// Rule Initial
ruleInitial returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getInitialAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInitialRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleFinal
entryRuleFinal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFinalRule()); }
	 iv_ruleFinal=ruleFinal 
	 { $current=$iv_ruleFinal.current; } 
	 EOF 
;

// Rule Final
ruleFinal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFinalAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFinalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleVertexReference
entryRuleVertexReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVertexReferenceRule()); }
	 iv_ruleVertexReference=ruleVertexReference 
	 { $current=$iv_ruleVertexReference.current; } 
	 EOF 
;

// Rule VertexReference
ruleVertexReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVertexReferenceAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVertexReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTransitionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='from' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getFromKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getSourceVertexReferenceParserRuleCall_2_0()); 
	    }
		lv_source_2_0=ruleVertexReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_2_0, 
        		"VertexReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='to' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getToKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getTargetVertexReferenceParserRuleCall_4_0()); 
	    }
		lv_target_4_0=ruleVertexReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_4_0, 
        		"VertexReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_5());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getStatementsStatementParserRuleCall_6_0_0()); 
	    }
		lv_statements_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTransitionAccess().getSemicolonKeyword_6_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getStatementsStatementParserRuleCall_6_1_1_0()); 
	    }
		lv_statements_8_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_8_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_0()); 
    }
    this_Assignment_0=ruleAssignment
    { 
        $current = $this_Assignment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSendSignalParserRuleCall_1()); 
    }
    this_SendSignal_1=ruleSendSignal
    { 
        $current = $this_SendSignal_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDelayParserRuleCall_2()); 
    }
    this_Delay_2=ruleDelay
    { 
        $current = $this_Delay_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSignalReceptionParserRuleCall_3()); 
    }
    this_SignalReception_3=ruleSignalReception
    { 
        $current = $this_SignalReception_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_4()); 
    }
    this_Expression_4=ruleExpression
    { 
        $current = $this_Expression_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDelay
entryRuleDelay returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDelayRule()); }
	 iv_ruleDelay=ruleDelay 
	 { $current=$iv_ruleDelay.current; } 
	 EOF 
;

// Rule Delay
ruleDelay returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='after' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDelayAccess().getAfterKeyword_0());
    }
(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getDelayAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDelayRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
)	otherlv_2='ms' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDelayAccess().getMsKeyword_2());
    }
)
;





// Entry rule entryRulePortReference
entryRulePortReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPortReferenceRule()); }
	 iv_rulePortReference=rulePortReference 
	 { $current=$iv_rulePortReference.current; } 
	 EOF 
;

// Rule PortReference
rulePortReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPortReferenceAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPortReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleSignalReception
entryRuleSignalReception returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalReceptionRule()); }
	 iv_ruleSignalReception=ruleSignalReception 
	 { $current=$iv_ruleSignalReception.current; } 
	 EOF 
;

// Rule SignalReception
ruleSignalReception returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='receive' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSignalReceptionAccess().getReceiveKeyword_0());
    }
(
(
		lv_signalName_1_0=RULE_ID
		{
			newLeafNode(lv_signalName_1_0, grammarAccess.getSignalReceptionAccess().getSignalNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalReceptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"signalName",
        		lv_signalName_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSignalReceptionAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSignalReceptionAccess().getArgumentsSignalArgumentParserRuleCall_3_0_0()); 
	    }
		lv_arguments_3_0=ruleSignalArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalReceptionRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"SignalArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSignalReceptionAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalReceptionAccess().getArgumentsSignalArgumentParserRuleCall_3_1_1_0()); 
	    }
		lv_arguments_5_0=ruleSignalArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalReceptionRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"SignalArgument");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_6='|' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSignalReceptionAccess().getVerticalLineKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalReceptionAccess().getConditionExpressionParserRuleCall_4_1_0()); 
	    }
		lv_condition_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalReceptionRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSignalReceptionAccess().getRightParenthesisKeyword_5());
    }
	otherlv_9='from' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSignalReceptionAccess().getFromKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalReceptionAccess().getPortPortReferenceParserRuleCall_7_0()); 
	    }
		lv_port_10_0=rulePortReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalReceptionRule());
	        }
       		set(
       			$current, 
       			"port",
        		lv_port_10_0, 
        		"PortReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSignalArgument
entryRuleSignalArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalArgumentRule()); }
	 iv_ruleSignalArgument=ruleSignalArgument 
	 { $current=$iv_ruleSignalArgument.current; } 
	 EOF 
;

// Rule SignalArgument
ruleSignalArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSignalArgumentAccess().getSignalArgumentVariableParserRuleCall_0()); 
    }
    this_SignalArgumentVariable_0=ruleSignalArgumentVariable
    { 
        $current = $this_SignalArgumentVariable_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSignalArgumentAccess().getSignalArgumentExpressionParserRuleCall_1()); 
    }
    this_SignalArgumentExpression_1=ruleSignalArgumentExpression
    { 
        $current = $this_SignalArgumentExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSignalArgumentVariable
entryRuleSignalArgumentVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalArgumentVariableRule()); }
	 iv_ruleSignalArgumentVariable=ruleSignalArgumentVariable 
	 { $current=$iv_ruleSignalArgumentVariable.current; } 
	 EOF 
;

// Rule SignalArgumentVariable
ruleSignalArgumentVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalArgumentVariableAccess().getVariableVariableReferenceParserRuleCall_0()); 
	    }
		lv_variable_0_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalArgumentVariableRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleSignalArgumentExpression
entryRuleSignalArgumentExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalArgumentExpressionRule()); }
	 iv_ruleSignalArgumentExpression=ruleSignalArgumentExpression 
	 { $current=$iv_ruleSignalArgumentExpression.current; } 
	 EOF 
;

// Rule SignalArgumentExpression
ruleSignalArgumentExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSignalArgumentExpressionAccess().getLeftSquareBracketLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalArgumentExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalArgumentExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']]' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSignalArgumentExpressionAccess().getRightSquareBracketRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getVariableVariableReferenceParserRuleCall_0_0()); 
	    }
		lv_variable_0_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSendSignal
entryRuleSendSignal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSendSignalRule()); }
	 iv_ruleSendSignal=ruleSendSignal 
	 { $current=$iv_ruleSendSignal.current; } 
	 EOF 
;

// Rule SendSignal
ruleSendSignal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='send' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSendSignalAccess().getSendKeyword_0());
    }
(
(
		lv_signalName_1_0=RULE_ID
		{
			newLeafNode(lv_signalName_1_0, grammarAccess.getSendSignalAccess().getSignalNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSendSignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"signalName",
        		lv_signalName_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSendSignalAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSendSignalAccess().getArgumentsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_arguments_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSendSignalRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSendSignalAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSendSignalAccess().getArgumentsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_arguments_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSendSignalRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSendSignalAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7='to' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSendSignalAccess().getToKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSendSignalAccess().getPortPortReferenceParserRuleCall_6_0()); 
	    }
		lv_port_8_0=rulePortReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSendSignalRule());
	        }
       		set(
       			$current, 
       			"port",
        		lv_port_8_0, 
        		"PortReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectRule()); }
	 iv_ruleObject=ruleObject 
	 { $current=$iv_ruleObject.current; } 
	 EOF 
;

// Rule Object
ruleObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getObjectAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getObjectAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getObjectAccess().getClassClassCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRulePort
entryRulePort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPortRule()); }
	 iv_rulePort=rulePort 
	 { $current=$iv_rulePort.current; } 
	 EOF 
;

// Rule Port
rulePort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPortAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleChannel
entryRuleChannel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChannelRule()); }
	 iv_ruleChannel=ruleChannel 
	 { $current=$iv_ruleChannel.current; } 
	 EOF 
;

// Rule Channel
ruleChannel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getChannelAccess().getUnidirectionalChannelParserRuleCall_0()); 
    }
    this_UnidirectionalChannel_0=ruleUnidirectionalChannel
    { 
        $current = $this_UnidirectionalChannel_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getChannelAccess().getBidirectionalChannelParserRuleCall_1()); 
    }
    this_BidirectionalChannel_1=ruleBidirectionalChannel
    { 
        $current = $this_BidirectionalChannel_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUnidirectionalChannel
entryRuleUnidirectionalChannel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnidirectionalChannelRule()); }
	 iv_ruleUnidirectionalChannel=ruleUnidirectionalChannel 
	 { $current=$iv_ruleUnidirectionalChannel.current; } 
	 EOF 
;

// Rule UnidirectionalChannel
ruleUnidirectionalChannel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getUnidirectionalChannelAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnidirectionalChannelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnidirectionalChannelAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnidirectionalChannelAccess().getArgumentTypesArgumentTypeParserRuleCall_2_0_0()); 
	    }
		lv_argumentTypes_2_0=ruleArgumentType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnidirectionalChannelRule());
	        }
       		add(
       			$current, 
       			"argumentTypes",
        		lv_argumentTypes_2_0, 
        		"ArgumentType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnidirectionalChannelAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnidirectionalChannelAccess().getArgumentTypesArgumentTypeParserRuleCall_2_1_1_0()); 
	    }
		lv_argumentTypes_4_0=ruleArgumentType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnidirectionalChannelRule());
	        }
       		add(
       			$current, 
       			"argumentTypes",
        		lv_argumentTypes_4_0, 
        		"ArgumentType");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnidirectionalChannelAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnidirectionalChannelAccess().getChannelTypeChannelTypeEnumRuleCall_4_0()); 
	    }
		lv_channelType_6_0=ruleChannelType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnidirectionalChannelRule());
	        }
       		set(
       			$current, 
       			"channelType",
        		lv_channelType_6_0, 
        		"ChannelType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='from' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getUnidirectionalChannelAccess().getFromKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnidirectionalChannelRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getUnidirectionalChannelAccess().getSourceObjectObjectCrossReference_6_0()); 
	}

)
)	otherlv_9='.' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getUnidirectionalChannelAccess().getFullStopKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnidirectionalChannelAccess().getSourcePortPortReferenceParserRuleCall_8_0()); 
	    }
		lv_sourcePort_10_0=rulePortReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnidirectionalChannelRule());
	        }
       		set(
       			$current, 
       			"sourcePort",
        		lv_sourcePort_10_0, 
        		"PortReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='to' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getUnidirectionalChannelAccess().getToKeyword_9());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnidirectionalChannelRule());
	        }
        }
	otherlv_12=RULE_ID
	{
		newLeafNode(otherlv_12, grammarAccess.getUnidirectionalChannelAccess().getTargetObjectObjectCrossReference_10_0()); 
	}

)
)	otherlv_13='.' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getUnidirectionalChannelAccess().getFullStopKeyword_11());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnidirectionalChannelAccess().getTargetPortPortReferenceParserRuleCall_12_0()); 
	    }
		lv_targetPort_14_0=rulePortReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnidirectionalChannelRule());
	        }
       		set(
       			$current, 
       			"targetPort",
        		lv_targetPort_14_0, 
        		"PortReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBidirectionalChannel
entryRuleBidirectionalChannel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBidirectionalChannelRule()); }
	 iv_ruleBidirectionalChannel=ruleBidirectionalChannel 
	 { $current=$iv_ruleBidirectionalChannel.current; } 
	 EOF 
;

// Rule BidirectionalChannel
ruleBidirectionalChannel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getBidirectionalChannelAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBidirectionalChannelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBidirectionalChannelAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBidirectionalChannelAccess().getArgumentTypesArgumentTypeParserRuleCall_2_0_0()); 
	    }
		lv_argumentTypes_2_0=ruleArgumentType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBidirectionalChannelRule());
	        }
       		add(
       			$current, 
       			"argumentTypes",
        		lv_argumentTypes_2_0, 
        		"ArgumentType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBidirectionalChannelAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBidirectionalChannelAccess().getArgumentTypesArgumentTypeParserRuleCall_2_1_1_0()); 
	    }
		lv_argumentTypes_4_0=ruleArgumentType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBidirectionalChannelRule());
	        }
       		add(
       			$current, 
       			"argumentTypes",
        		lv_argumentTypes_4_0, 
        		"ArgumentType");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBidirectionalChannelAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBidirectionalChannelAccess().getChannelTypeChannelTypeEnumRuleCall_4_0()); 
	    }
		lv_channelType_6_0=ruleChannelType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBidirectionalChannelRule());
	        }
       		set(
       			$current, 
       			"channelType",
        		lv_channelType_6_0, 
        		"ChannelType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='between' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getBidirectionalChannelAccess().getBetweenKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBidirectionalChannelRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getBidirectionalChannelAccess().getObject1ObjectCrossReference_6_0()); 
	}

)
)	otherlv_9='.' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getBidirectionalChannelAccess().getFullStopKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBidirectionalChannelAccess().getPort1PortReferenceParserRuleCall_8_0()); 
	    }
		lv_port1_10_0=rulePortReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBidirectionalChannelRule());
	        }
       		set(
       			$current, 
       			"port1",
        		lv_port1_10_0, 
        		"PortReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='and' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getBidirectionalChannelAccess().getAndKeyword_9());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBidirectionalChannelRule());
	        }
        }
	otherlv_12=RULE_ID
	{
		newLeafNode(otherlv_12, grammarAccess.getBidirectionalChannelAccess().getObject2ObjectCrossReference_10_0()); 
	}

)
)	otherlv_13='.' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getBidirectionalChannelAccess().getFullStopKeyword_11());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBidirectionalChannelAccess().getPort2PortReferenceParserRuleCall_12_0()); 
	    }
		lv_port2_14_0=rulePortReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBidirectionalChannelRule());
	        }
       		set(
       			$current, 
       			"port2",
        		lv_port2_14_0, 
        		"PortReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleArgumentType
entryRuleArgumentType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentTypeRule()); }
	 iv_ruleArgumentType=ruleArgumentType 
	 { $current=$iv_ruleArgumentType.current; } 
	 EOF 
;

// Rule ArgumentType
ruleArgumentType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentTypeAccess().getTypePrimitiveTypeEnumRuleCall_0()); 
	    }
		lv_type_0_0=rulePrimitiveType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"PrimitiveType");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getTypePrimitiveTypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=rulePrimitiveType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"PrimitiveType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getIntialValueExpressionParserRuleCall_2_1_0()); 
	    }
		lv_intialValue_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"intialValue",
        		lv_intialValue_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getTerminalExpressionParserRuleCall_0()); 
    }
    this_TerminalExpression_0=ruleTerminalExpression
    { 
        $current = $this_TerminalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionAccess().getBinaryOperatorExpressionOperand1Action_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getOperatorOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getOperand2ExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand2_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getBooleanConstantExpressionParserRuleCall_0()); 
    }
    this_BooleanConstantExpression_0=ruleBooleanConstantExpression
    { 
        $current = $this_BooleanConstantExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getIntegerConstantExpressionParserRuleCall_1()); 
    }
    this_IntegerConstantExpression_1=ruleIntegerConstantExpression
    { 
        $current = $this_IntegerConstantExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getStringConstantExpressionParserRuleCall_2()); 
    }
    this_StringConstantExpression_2=ruleStringConstantExpression
    { 
        $current = $this_StringConstantExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getVariableExpressionParserRuleCall_3()); 
    }
    this_VariableExpression_3=ruleVariableExpression
    { 
        $current = $this_VariableExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getBracketExpressionParserRuleCall_4()); 
    }
    this_BracketExpression_4=ruleBracketExpression
    { 
        $current = $this_BracketExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBooleanConstantExpression
entryRuleBooleanConstantExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanConstantExpressionRule()); }
	 iv_ruleBooleanConstantExpression=ruleBooleanConstantExpression 
	 { $current=$iv_ruleBooleanConstantExpression.current; } 
	 EOF 
;

// Rule BooleanConstantExpression
ruleBooleanConstantExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_0_0, grammarAccess.getBooleanConstantExpressionAccess().getValueBOOLEANTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanConstantExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"BOOLEAN");
	    }

)
)
;





// Entry rule entryRuleIntegerConstantExpression
entryRuleIntegerConstantExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerConstantExpressionRule()); }
	 iv_ruleIntegerConstantExpression=ruleIntegerConstantExpression 
	 { $current=$iv_ruleIntegerConstantExpression.current; } 
	 EOF 
;

// Rule IntegerConstantExpression
ruleIntegerConstantExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntegerConstantExpressionAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerConstantExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleStringConstantExpression
entryRuleStringConstantExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringConstantExpressionRule()); }
	 iv_ruleStringConstantExpression=ruleStringConstantExpression 
	 { $current=$iv_ruleStringConstantExpression.current; } 
	 EOF 
;

// Rule StringConstantExpression
ruleStringConstantExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringConstantExpressionAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringConstantExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableReferenceRule()); }
	 iv_ruleVariableReference=ruleVariableReference 
	 { $current=$iv_ruleVariableReference.current; } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableReferenceAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleVariableExpression
entryRuleVariableExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableExpressionRule()); }
	 iv_ruleVariableExpression=ruleVariableExpression 
	 { $current=$iv_ruleVariableExpression.current; } 
	 EOF 
;

// Rule VariableExpression
ruleVariableExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableExpressionAccess().getVariableVariableReferenceParserRuleCall_0()); 
	    }
		lv_variable_0_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableExpressionRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBracketExpression
entryRuleBracketExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBracketExpressionRule()); }
	 iv_ruleBracketExpression=ruleBracketExpression 
	 { $current=$iv_ruleBracketExpression.current; } 
	 EOF 
;

// Rule BracketExpression
ruleBracketExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBracketExpressionAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getBracketExpressionAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBracketExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Rule PrimitiveType
rulePrimitiveType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Integer' 
	{
        $current = grammarAccess.getPrimitiveTypeAccess().getIntegerEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPrimitiveTypeAccess().getIntegerEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='String' 
	{
        $current = grammarAccess.getPrimitiveTypeAccess().getStringEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPrimitiveTypeAccess().getStringEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Boolean' 
	{
        $current = grammarAccess.getPrimitiveTypeAccess().getBooleanEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getPrimitiveTypeAccess().getBooleanEnumLiteralDeclaration_2()); 
    }
));



// Rule ChannelType
ruleChannelType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='sync' 
	{
        $current = grammarAccess.getChannelTypeAccess().getSynchronousEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getChannelTypeAccess().getSynchronousEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='async lossless' 
	{
        $current = grammarAccess.getChannelTypeAccess().getAsynchronousLosslessEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getChannelTypeAccess().getAsynchronousLosslessEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='async lossy' 
	{
        $current = grammarAccess.getChannelTypeAccess().getAsynchronousLossyEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getChannelTypeAccess().getAsynchronousLossyEnumLiteralDeclaration_2()); 
    }
));



// Rule Operator
ruleOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='>=' 
	{
        $current = grammarAccess.getOperatorAccess().getAtLeastEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperatorAccess().getAtLeastEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<=' 
	{
        $current = grammarAccess.getOperatorAccess().getAtMostEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperatorAccess().getAtMostEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='+' 
	{
        $current = grammarAccess.getOperatorAccess().getAddEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOperatorAccess().getAddEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='&&' 
	{
        $current = grammarAccess.getOperatorAccess().getAndEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getOperatorAccess().getAndEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='||' 
	{
        $current = grammarAccess.getOperatorAccess().getOrEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getOperatorAccess().getOrEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='==' 
	{
        $current = grammarAccess.getOperatorAccess().getEqualsEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getOperatorAccess().getEqualsEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='!=' 
	{
        $current = grammarAccess.getOperatorAccess().getDiffersEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getOperatorAccess().getDiffersEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='-' 
	{
        $current = grammarAccess.getOperatorAccess().getSubtractEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getOperatorAccess().getSubtractEnumLiteralDeclaration_7()); 
    }
));



RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


