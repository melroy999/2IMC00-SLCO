SLCOModel:
  'model' name=NID '{'
  ('actions' actions+=Action)?
  ('classes' classes*=Class)?
  ('objects' objects*=Object[','])?
  ('channels' channels*=Channel)?
  '}'
;

Class:
  name=NID '{'
        ('variables' variables*=Variable)?
  	('ports' ports*=Port)?
	('state machines'
		statemachines*=StateMachine
	)?
  '}'
;

Object:
  name=NID ':' type=[Class] '(' assignments*=Initialisation[','] ')'
;

Initialisation:
  left=[Variable] ':=' (right=INT|right=BOOL|('['(rights+=INT[',']|rights+=BOOL[','])']'))
;

Channel:
  name=NID '(' type*=Type[','] ')'
  ((synctype='async' ('[' size=INT ']')? (losstype='lossless'|losstype='lossy')
  'from' source=[Object]'.'port0=[Port] 'to'
  target=[Object]'.'port1=[Port])
  |
  (synctype='sync' 'between' source=[Object]'.'port0=[Port] 'and'
  target=[Object]'.'port1=[Port])
  )
;

StateMachine:
  name=NID '{'
	('variables'
		variables*=Variable
	)?
	'initial' initialstate=State
	('states' states*=State)?
	('transitions' transitions*=Transition)?
  '}'
;

State:
  name=NID
;

Port:
  name=NID
;

Transition:
  (priority=INT':')?
  ((source=[State] '->' target=[State])|
  ('from' source=[State] 'to' target=[State]))
  ('{' statements*=Statement[';'] (';')? '}')?
;

Statement:
  (Composite | ReceiveSignal | SendSignal | Delay | Assignment | Expression | DoAction)
;

DoAction:
  'do' act=[Action]
;

Assignment:
  left=VariableRef ':=' right=Expression
;

Composite:
  '[' (guard=Expression ';')? assignments*=Assignment[';'] ']'
;

ReceiveSignal:
  'receive' signal=NID '(' params*=VariableRef[','] ('|' guard=Expression)? ')' 'from' target=[Port]
;

SendSignal:
  'send' signal=NID '(' params*=Expression[','] ')' 'to' target=[Port]
;

Expression:
  terms=ExprPrec7 ((terms='or'|terms='||') terms=ExprPrec7)*
;

ExprPrec7:
  terms=ExprPrec6 ((terms='and'|terms='&&') terms=ExprPrec6)*
;

ExprPrec6:
  terms=ExprPrec5 ((terms='xor') terms=ExprPrec5)*
;

ExprPrec5:
  terms=ExprPrec4 ((terms='!='|terms='='|terms='<>') terms=ExprPrec4)*
;

ExprPrec4:
  terms=ExprPrec3 ((terms='<='|terms='>='|terms='<'|terms='>') terms=ExprPrec3)*
;

ExprPrec3:
  terms=ExprPrec2 ((terms='+'|terms='-') terms=ExprPrec2)*
;

ExprPrec2:
  terms=ExprPrec1 ((terms='*'|terms='/'|terms='%') terms=ExprPrec1)*
;

ExprPrec1:
  left=Primary (op='**' right=ExprPrec1)?
;

Primary:
  (sign='+'|sign='-'|sign='not')? (value=INT | value=BOOL | '(' body=Expression ')' | ref=ExpressionRef)
;

Delay:
  'after' length=INT 'ms'
;

ExpressionRef:
  ref=NID ('['index=Expression']')?
;

Action:
  name=NID
;

VariableRef:
  var=[Variable] ('['index=Expression']')?
;

Variable:
  (type=Type?) name=NID (':=' (defvalue=INT | defvalue=BOOL|('['(defvalues+=INT[',']|defvalues+=BOOL[','])']')))?
;

Type:
  (base='Integer' | base='Boolean' | base='Byte') ('[' size=INT ']')?
;

Keyword:
  'do' | 'actions' | 'model' | 'classes' | 'ports' | 'state machines' | 'variables' | 'initial' | 'state' | 'transitions' | 'from' | 'to' | 'send' | 'receive' | 'objects' | 'channels' | 'Boolean' | 'Integer' | 'Byte' | 'async' | 'sync' | 'lossless' | 'lossy' | 'between' | 'and' | ':=' | 'after' | 'ms' | 'not' | '-' | '+' | 'or' | 'xor' | 'and' | '==' | '<>' | '<=' | '>=' | '<' | '>' | 'mod' | '*' | '/' | '**' | 'true' | 'false'
;

NID:
  !Keyword ID
;
