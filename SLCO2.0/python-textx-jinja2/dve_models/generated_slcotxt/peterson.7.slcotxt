model dve_peterson_7 {
classes
	GlobalClass {
		variables
			Integer[5] pos
			Integer[5] step
		state machines
			P_0 {
				variables
					Integer j := 0
					Integer k := 0
				initial NCS
				states  CS wait q2 q3
				transitions
					from NCS to wait {
						j := 1
					}

					from wait to q2 {
						j < 5; pos[0] := j
					}

					from q2 to q3 {
						step[j-1] := 0;k := 0
					}

					from q3 to q3 {
						k < 5 and (k = 0 or pos[k] < j); k := k+1
					}

					from q3 to wait {
						step[j-1] <> 0 or k = 5; j := j+1
					}

					from wait to CS {
						j = 5
					}

					from CS to NCS {
						pos[0] := 0
					}

				}
	
			P_1 {
				variables
					Integer j := 0
					Integer k := 0
				initial NCS
				states  CS wait q2 q3
				transitions
					from NCS to wait {
						j := 1
					}

					from wait to q2 {
						j < 5; pos[1] := j
					}

					from q2 to q3 {
						step[j-1] := 1;k := 0
					}

					from q3 to q3 {
						k < 5 and (k = 1 or pos[k] < j); k := k+1
					}

					from q3 to wait {
						step[j-1] <> 1 or k = 5; j := j+1
					}

					from wait to CS {
						j = 5
					}

					from CS to NCS {
						pos[1] := 0
					}

				}
	
			P_2 {
				variables
					Integer j := 0
					Integer k := 0
				initial NCS
				states  CS wait q2 q3
				transitions
					from NCS to wait {
						j := 1
					}

					from wait to q2 {
						j < 5; pos[2] := j
					}

					from q2 to q3 {
						step[j-1] := 2;k := 0
					}

					from q3 to q3 {
						k < 5 and (k = 2 or pos[k] < j); k := k+1
					}

					from q3 to wait {
						step[j-1] <> 2 or k = 5; j := j+1
					}

					from wait to CS {
						j = 5
					}

					from CS to NCS {
						pos[2] := 0
					}

				}
	
			P_3 {
				variables
					Integer j := 0
					Integer k := 0
				initial NCS
				states  CS wait q2 q3
				transitions
					from NCS to wait {
						j := 1
					}

					from wait to q2 {
						j < 5; pos[3] := j
					}

					from q2 to q3 {
						step[j-1] := 3;k := 0
					}

					from q3 to q3 {
						k < 5 and (k = 3 or pos[k] < j); k := k+1
					}

					from q3 to wait {
						step[j-1] <> 3 or k = 5; j := j+1
					}

					from wait to CS {
						j = 5
					}

					from CS to NCS {
						pos[3] := 0
					}

				}
	
			P_4 {
				variables
					Integer j := 0
					Integer k := 0
				initial NCS
				states  CS wait q2 q3
				transitions
					from NCS to wait {
						j := 1
					}

					from wait to q2 {
						j < 5; pos[4] := j
					}

					from q2 to q3 {
						step[j-1] := 4;k := 0
					}

					from q3 to q3 {
						k < 5 and (k = 4 or pos[k] < j); k := k+1
					}

					from q3 to wait {
						step[j-1] <> 4 or k = 5; j := j+1
					}

					from wait to CS {
						j = 5
					}

					from CS to NCS {
						pos[4] := 0
					}

				}
	
	}

objects
	globalObject : GlobalClass()
}
