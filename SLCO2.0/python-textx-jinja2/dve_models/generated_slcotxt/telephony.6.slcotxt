model  {
classes
	GlobalClass {
		variables
			Integer[4] chan := [255,255,255,255]
			Integer[4] partner := [255,255,255,255]
			Integer[4] record := [255,255,255,255]
		state machines
			User_0 {
				variables
					Integer dev := 1
					Integer mbit
				initial idle
				states  dialing calling busy q_i talert unobtainable oalert error_state oconnected oringout tpickup tconnected ringback
				transitions
					from idle to dialing {
						[chan[0] == 255; dev := 0;chan[0] := ((0)+(0)*20)]
					}
	
					from idle to q_i {
						[chan[0] != 255; partner[0] := ((chan[0])%20)]
					}
	
					from q_i to talert {
						[((chan[partner[0]])%20) == 0]
					}
	
					from q_i to idle {
						[((chan[partner[0]])%20) != 0; partner[0] := 255]
					}
	
					from dialing to idle {
						[dev := 1;chan[0] := 255]
					}
	
					from dialing to calling {
						[partner[0] := 0]
					}
	
					from dialing to calling {
						[partner[0] := 1]
					}
	
					from dialing to calling {
						[partner[0] := 2]
					}
	
					from dialing to calling {
						[partner[0] := 3]
					}
	
					from dialing to calling {
						[partner[0] := 4]
					}
	
					from calling to busy {
						[partner[0] == 0]
					}
	
					from calling to unobtainable {
						[partner[0] == 4]
					}
	
					from calling to ringback {
						[partner[0] == 4]
					}
	
					from calling to busy {
						[partner[0] != 0 && partner[0] !=4 &&
			chan[partner[0]]!=255; record[partner[0]] := 0]
					}
	
					from calling to oalert {
						[partner[0] != 0 && partner[0] !=4 && chan[partner[0]]==255; record[partner[0]] := 0;chan[partner[0]] := ((0)+(0)*20);chan[0] := ((partner[0])+(0)*20)]
					}
	
					from busy to idle {
						[chan[0] := 255;partner[0] := 255;dev := 1]
					}
	
					from oalert to error_state {
						[((chan[0])%20)!=partner[0]]
					}
	
					from oalert to oconnected {
						[((chan[0])%20)==partner[0] && ((chan[0])/20) == 1]
					}
	
					from oalert to oringout {
						[((chan[0])%20)==partner[0] && ((chan[0])/20) == 0]
					}
	
					from oconnected to idle {
						[dev := 1;chan[0] := 255;chan[partner[0]] := 255]
					}
	
					from oringout to idle {
						[dev := 1;chan[0] := 255;partner[0] := ((((partner[0])%20))+(0)*20)]
					}
	
					from unobtainable to idle {
						[chan[0] := 255;partner[0] := 255;dev := 1]
					}
	
					from ringback to idle {
						[chan[0] := 255;partner[0] := 255;dev := 1]
					}
	
					from ringback to calling {
						[record[0] != 255; partner[0] := record[0]]
					}
	
					from talert to error_state {
						[dev != 1 || chan[0] == 255]
					}
	
					from talert to tpickup {
						[((chan[partner[0]])%20) == 0]
					}
	
					from talert to idle {
						[((chan[partner[0]])%20) != 0]
					}
	
					from tpickup to tconnected {
						[((chan[partner[0]])%20) == 0 && ((chan[partner[0]])/20) == 0; dev := 0;chan[partner[0]] := ((0)+(1)*20);chan[0] := ((partner[0])+(1)*20)]
					}
	
					from tpickup to idle {
						[chan[partner[0]] == 255 || ((chan[partner[0]])%20) != 0; dev := 1;partner[0] := 255;chan[0] := 255]
					}
	
					from tconnected to tconnected {
						[((chan[0])/20)==1 && dev == 0; dev := 1]
					}
	
					from tconnected to tconnected {
						[((chan[0])/20)==1 && dev == 1; dev := 0]
					}
	
					from tconnected to idle {
						[((chan[0])/20)==0; partner[0] := 255;chan[0] := 255]
					}
	
				}
	
			User_1 {
				variables
					Integer dev := 1
					Integer mbit
				initial idle
				states  dialing calling busy q_i talert unobtainable oalert error_state oconnected oringout tpickup tconnected ringback
				transitions
					from idle to dialing {
						[chan[1] == 255; dev := 0;chan[1] := ((1)+(0)*20)]
					}
	
					from idle to q_i {
						[chan[1] != 255; partner[1] := ((chan[1])%20)]
					}
	
					from q_i to talert {
						[((chan[partner[1]])%20) == 1]
					}
	
					from q_i to idle {
						[((chan[partner[1]])%20) != 1; partner[1] := 255]
					}
	
					from dialing to idle {
						[dev := 1;chan[1] := 255]
					}
	
					from dialing to calling {
						[partner[1] := 0]
					}
	
					from dialing to calling {
						[partner[1] := 1]
					}
	
					from dialing to calling {
						[partner[1] := 2]
					}
	
					from dialing to calling {
						[partner[1] := 3]
					}
	
					from dialing to calling {
						[partner[1] := 4]
					}
	
					from calling to busy {
						[partner[1] == 1]
					}
	
					from calling to unobtainable {
						[partner[1] == 4]
					}
	
					from calling to ringback {
						[partner[1] == 4]
					}
	
					from calling to busy {
						[partner[1] != 1 && partner[1] !=4 &&
			chan[partner[1]]!=255; record[partner[1]] := 1]
					}
	
					from calling to oalert {
						[partner[1] != 1 && partner[1] !=4 && chan[partner[1]]==255; record[partner[1]] := 1;chan[partner[1]] := ((1)+(0)*20);chan[1] := ((partner[1])+(0)*20)]
					}
	
					from busy to idle {
						[chan[1] := 255;partner[1] := 255;dev := 1]
					}
	
					from oalert to error_state {
						[((chan[1])%20)!=partner[1]]
					}
	
					from oalert to oconnected {
						[((chan[1])%20)==partner[1] && ((chan[1])/20) == 1]
					}
	
					from oalert to oringout {
						[((chan[1])%20)==partner[1] && ((chan[1])/20) == 0]
					}
	
					from oconnected to idle {
						[dev := 1;chan[1] := 255;chan[partner[1]] := 255]
					}
	
					from oringout to idle {
						[dev := 1;chan[1] := 255;partner[1] := ((((partner[1])%20))+(0)*20)]
					}
	
					from unobtainable to idle {
						[chan[1] := 255;partner[1] := 255;dev := 1]
					}
	
					from ringback to idle {
						[chan[1] := 255;partner[1] := 255;dev := 1]
					}
	
					from ringback to calling {
						[record[1] != 255; partner[1] := record[1]]
					}
	
					from talert to error_state {
						[dev != 1 || chan[1] == 255]
					}
	
					from talert to tpickup {
						[((chan[partner[1]])%20) == 1]
					}
	
					from talert to idle {
						[((chan[partner[1]])%20) != 1]
					}
	
					from tpickup to tconnected {
						[((chan[partner[1]])%20) == 1 && ((chan[partner[1]])/20) == 0; dev := 0;chan[partner[1]] := ((1)+(1)*20);chan[1] := ((partner[1])+(1)*20)]
					}
	
					from tpickup to idle {
						[chan[partner[1]] == 255 || ((chan[partner[1]])%20) != 1; dev := 1;partner[1] := 255;chan[1] := 255]
					}
	
					from tconnected to tconnected {
						[((chan[1])/20)==1 && dev == 0; dev := 1]
					}
	
					from tconnected to tconnected {
						[((chan[1])/20)==1 && dev == 1; dev := 0]
					}
	
					from tconnected to idle {
						[((chan[1])/20)==0; partner[1] := 255;chan[1] := 255]
					}
	
				}
	
			User_2 {
				variables
					Integer dev := 1
					Integer mbit
				initial idle
				states  dialing calling busy q_i talert unobtainable oalert error_state oconnected oringout tpickup tconnected ringback
				transitions
					from idle to dialing {
						[chan[2] == 255; dev := 0;chan[2] := ((2)+(0)*20)]
					}
	
					from idle to q_i {
						[chan[2] != 255; partner[2] := ((chan[2])%20)]
					}
	
					from q_i to talert {
						[((chan[partner[2]])%20) == 2]
					}
	
					from q_i to idle {
						[((chan[partner[2]])%20) != 2; partner[2] := 255]
					}
	
					from dialing to idle {
						[dev := 1;chan[2] := 255]
					}
	
					from dialing to calling {
						[partner[2] := 0]
					}
	
					from dialing to calling {
						[partner[2] := 1]
					}
	
					from dialing to calling {
						[partner[2] := 2]
					}
	
					from dialing to calling {
						[partner[2] := 3]
					}
	
					from dialing to calling {
						[partner[2] := 4]
					}
	
					from calling to busy {
						[partner[2] == 2]
					}
	
					from calling to unobtainable {
						[partner[2] == 4]
					}
	
					from calling to ringback {
						[partner[2] == 4]
					}
	
					from calling to busy {
						[partner[2] != 2 && partner[2] !=4 &&
			chan[partner[2]]!=255; record[partner[2]] := 2]
					}
	
					from calling to oalert {
						[partner[2] != 2 && partner[2] !=4 && chan[partner[2]]==255; record[partner[2]] := 2;chan[partner[2]] := ((2)+(0)*20);chan[2] := ((partner[2])+(0)*20)]
					}
	
					from busy to idle {
						[chan[2] := 255;partner[2] := 255;dev := 1]
					}
	
					from oalert to error_state {
						[((chan[2])%20)!=partner[2]]
					}
	
					from oalert to oconnected {
						[((chan[2])%20)==partner[2] && ((chan[2])/20) == 1]
					}
	
					from oalert to oringout {
						[((chan[2])%20)==partner[2] && ((chan[2])/20) == 0]
					}
	
					from oconnected to idle {
						[dev := 1;chan[2] := 255;chan[partner[2]] := 255]
					}
	
					from oringout to idle {
						[dev := 1;chan[2] := 255;partner[2] := ((((partner[2])%20))+(0)*20)]
					}
	
					from unobtainable to idle {
						[chan[2] := 255;partner[2] := 255;dev := 1]
					}
	
					from ringback to idle {
						[chan[2] := 255;partner[2] := 255;dev := 1]
					}
	
					from ringback to calling {
						[record[2] != 255; partner[2] := record[2]]
					}
	
					from talert to error_state {
						[dev != 1 || chan[2] == 255]
					}
	
					from talert to tpickup {
						[((chan[partner[2]])%20) == 2]
					}
	
					from talert to idle {
						[((chan[partner[2]])%20) != 2]
					}
	
					from tpickup to tconnected {
						[((chan[partner[2]])%20) == 2 && ((chan[partner[2]])/20) == 0; dev := 0;chan[partner[2]] := ((2)+(1)*20);chan[2] := ((partner[2])+(1)*20)]
					}
	
					from tpickup to idle {
						[chan[partner[2]] == 255 || ((chan[partner[2]])%20) != 2; dev := 1;partner[2] := 255;chan[2] := 255]
					}
	
					from tconnected to tconnected {
						[((chan[2])/20)==1 && dev == 0; dev := 1]
					}
	
					from tconnected to tconnected {
						[((chan[2])/20)==1 && dev == 1; dev := 0]
					}
	
					from tconnected to idle {
						[((chan[2])/20)==0; partner[2] := 255;chan[2] := 255]
					}
	
				}
	
			User_3 {
				variables
					Integer dev := 1
					Integer mbit
				initial idle
				states  dialing calling busy q_i talert unobtainable oalert error_state oconnected oringout tpickup tconnected ringback
				transitions
					from idle to dialing {
						[chan[3] == 255; dev := 0;chan[3] := ((3)+(0)*20)]
					}
	
					from idle to q_i {
						[chan[3] != 255; partner[3] := ((chan[3])%20)]
					}
	
					from q_i to talert {
						[((chan[partner[3]])%20) == 3]
					}
	
					from q_i to idle {
						[((chan[partner[3]])%20) != 3; partner[3] := 255]
					}
	
					from dialing to idle {
						[dev := 1;chan[3] := 255]
					}
	
					from dialing to calling {
						[partner[3] := 0]
					}
	
					from dialing to calling {
						[partner[3] := 1]
					}
	
					from dialing to calling {
						[partner[3] := 2]
					}
	
					from dialing to calling {
						[partner[3] := 3]
					}
	
					from dialing to calling {
						[partner[3] := 4]
					}
	
					from calling to busy {
						[partner[3] == 3]
					}
	
					from calling to unobtainable {
						[partner[3] == 4]
					}
	
					from calling to ringback {
						[partner[3] == 4]
					}
	
					from calling to busy {
						[partner[3] != 3 && partner[3] !=4 &&
			chan[partner[3]]!=255; record[partner[3]] := 3]
					}
	
					from calling to oalert {
						[partner[3] != 3 && partner[3] !=4 && chan[partner[3]]==255; record[partner[3]] := 3;chan[partner[3]] := ((3)+(0)*20);chan[3] := ((partner[3])+(0)*20)]
					}
	
					from busy to idle {
						[chan[3] := 255;partner[3] := 255;dev := 1]
					}
	
					from oalert to error_state {
						[((chan[3])%20)!=partner[3]]
					}
	
					from oalert to oconnected {
						[((chan[3])%20)==partner[3] && ((chan[3])/20) == 1]
					}
	
					from oalert to oringout {
						[((chan[3])%20)==partner[3] && ((chan[3])/20) == 0]
					}
	
					from oconnected to idle {
						[dev := 1;chan[3] := 255;chan[partner[3]] := 255]
					}
	
					from oringout to idle {
						[dev := 1;chan[3] := 255;partner[3] := ((((partner[3])%20))+(0)*20)]
					}
	
					from unobtainable to idle {
						[chan[3] := 255;partner[3] := 255;dev := 1]
					}
	
					from ringback to idle {
						[chan[3] := 255;partner[3] := 255;dev := 1]
					}
	
					from ringback to calling {
						[record[3] != 255; partner[3] := record[3]]
					}
	
					from talert to error_state {
						[dev != 1 || chan[3] == 255]
					}
	
					from talert to tpickup {
						[((chan[partner[3]])%20) == 3]
					}
	
					from talert to idle {
						[((chan[partner[3]])%20) != 3]
					}
	
					from tpickup to tconnected {
						[((chan[partner[3]])%20) == 3 && ((chan[partner[3]])/20) == 0; dev := 0;chan[partner[3]] := ((3)+(1)*20);chan[3] := ((partner[3])+(1)*20)]
					}
	
					from tpickup to idle {
						[chan[partner[3]] == 255 || ((chan[partner[3]])%20) != 3; dev := 1;partner[3] := 255;chan[3] := 255]
					}
	
					from tconnected to tconnected {
						[((chan[3])/20)==1 && dev == 0; dev := 1]
					}
	
					from tconnected to tconnected {
						[((chan[3])/20)==1 && dev == 1; dev := 0]
					}
	
					from tconnected to idle {
						[((chan[3])/20)==0; partner[3] := 255;chan[3] := 255]
					}
	
				}
	
	}

objects
	globalObject : GlobalClass
}
